
MECSOL2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00009524  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  080096c8  080096c8  0000a6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b88  08009b88  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b88  08009b88  0000ab88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b90  08009b90  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b90  08009b90  0000ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b94  08009b94  0000ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009b98  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001e8  08009d80  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08009d80  0000b860  2**0
=======
  1 .text         00007794  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007938  08007938  00008938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d30  08007d30  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007d30  08007d30  00008d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d38  08007d38  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d38  08007d38  00008d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d3c  08007d3c  00008d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007d40  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200001e8  08007f28  000091e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08007f28  00009868  2**0
>>>>>>> Stashed changes
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
<<<<<<< Updated upstream
 12 .debug_info   0000bc86  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecc  00000000  00000000  00016e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00018d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f3  00000000  00000000  000197b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017324  00000000  00000000  00019fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6b4  00000000  00000000  000312cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9d6  00000000  00000000  00040983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000400c  00000000  00000000  000cb39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cf3a8  2**0
=======
 12 .debug_info   0000bcb6  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec7  00000000  00000000  00014ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00016d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f3  00000000  00000000  000177e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bf  00000000  00000000  00017fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f575  00000000  00000000  0002f192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9cf  00000000  00000000  0003e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c90d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000c911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ccba0  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001c0:	080096ac 	.word	0x080096ac
=======
 80001c0:	0800791c 	.word	0x0800791c
>>>>>>> Stashed changes

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
<<<<<<< Updated upstream
 80001dc:	080096ac 	.word	0x080096ac
=======
 80001dc:	0800791c 	.word	0x0800791c
>>>>>>> Stashed changes

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0xd4>)
 8001080:	f001 fb44 	bl	800270c <HAL_GPIO_WritePin>
=======
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4812      	ldr	r0, [pc, #72]	@ (800101c <MX_GPIO_Init+0xd4>)
 8000fd4:	f001 fbce 	bl	8002774 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_GPIO_Init+0xd8>)
 800109c:	f001 f9b2 	bl	8002404 <HAL_GPIO_Init>
=======
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_GPIO_Init+0xd8>)
 8000ff0:	f001 fa3c 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a0:	2320      	movs	r3, #32
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_GPIO_Init+0xd4>)
 80010b8:	f001 f9a4 	bl	8002404 <HAL_GPIO_Init>
=======
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <MX_GPIO_Init+0xd4>)
 800100c:	f001 fa2e 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020800 	.word	0x40020800

080010d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_I2C1_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_I2C1_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< Updated upstream
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_I2C1_Init+0x50>)
 800110e:	f001 fb17 	bl	8002740 <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 fa46 	bl	80015a8 <Error_Handler>
=======
 8001060:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f001 fba1 	bl	80027a8 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fa70 	bl	8001550 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000204 	.word	0x20000204
 8001124:	40005400 	.word	0x40005400
 8001128:	000186a0 	.word	0x000186a0

0800112c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_I2C2_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <MX_I2C2_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_I2C2_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <MX_I2C2_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_I2C2_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_I2C2_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_I2C2_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_I2C2_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_I2C2_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_I2C2_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_I2C2_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
<<<<<<< Updated upstream
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_I2C2_Init+0x50>)
 800116a:	f001 fae9 	bl	8002740 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 fa18 	bl	80015a8 <Error_Handler>
=======
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_I2C2_Init+0x50>)
 80010be:	f001 fb73 	bl	80027a8 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 fa42 	bl	8001550 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000258 	.word	0x20000258
 8001180:	40005800 	.word	0x40005800
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_I2C3_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_I2C3_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_I2C3_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_I2C3_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_I2C3_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
<<<<<<< Updated upstream
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_I2C3_Init+0x50>)
 80011c6:	f001 fabb 	bl	8002740 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 f9ea 	bl	80015a8 <Error_Handler>
=======
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_I2C3_Init+0x50>)
 800111a:	f001 fb45 	bl	80027a8 <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fa14 	bl	8001550 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200002ac 	.word	0x200002ac
 80011dc:	40005c00 	.word	0x40005c00
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	@ 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a64      	ldr	r2, [pc, #400]	@ (8001394 <HAL_I2C_MspInit+0x1b0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12c      	bne.n	8001260 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	4b63      	ldr	r3, [pc, #396]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a62      	ldr	r2, [pc, #392]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b60      	ldr	r3, [pc, #384]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23c0      	movs	r3, #192	@ 0xc0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001226:	2312      	movs	r3, #18
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001232:	2304      	movs	r3, #4
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4857      	ldr	r0, [pc, #348]	@ (800139c <HAL_I2C_MspInit+0x1b8>)
 800123e:	f001 f8e1 	bl	8002404 <HAL_GPIO_Init>
=======
 800118a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4857      	ldr	r0, [pc, #348]	@ (80012f0 <HAL_I2C_MspInit+0x1b8>)
 8001192:	f001 f96b 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a53      	ldr	r2, [pc, #332]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800125e:	e094      	b.n	800138a <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <HAL_I2C_MspInit+0x1bc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d13e      	bne.n	80012e8 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a49      	ldr	r2, [pc, #292]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001298:	2304      	movs	r3, #4
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< Updated upstream
 800129c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	483e      	ldr	r0, [pc, #248]	@ (800139c <HAL_I2C_MspInit+0x1b8>)
 80012a4:	f001 f8ae 	bl	8002404 <HAL_GPIO_Init>
=======
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	483e      	ldr	r0, [pc, #248]	@ (80012f0 <HAL_I2C_MspInit+0x1b8>)
 80011f8:	f001 f938 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80012ba:	2309      	movs	r3, #9
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< Updated upstream
 80012be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4835      	ldr	r0, [pc, #212]	@ (800139c <HAL_I2C_MspInit+0x1b8>)
 80012c6:	f001 f89d 	bl	8002404 <HAL_GPIO_Init>
=======
 8001212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4835      	ldr	r0, [pc, #212]	@ (80012f0 <HAL_I2C_MspInit+0x1b8>)
 800121a:	f001 f927 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a31      	ldr	r2, [pc, #196]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
}
 80012e6:	e050      	b.n	800138a <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2d      	ldr	r2, [pc, #180]	@ (80013a4 <HAL_I2C_MspInit+0x1c0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d14b      	bne.n	800138a <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a20      	ldr	r2, [pc, #128]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800133c:	2304      	movs	r3, #4
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <HAL_I2C_MspInit+0x1c4>)
 8001348:	f001 f85c 	bl	8002404 <HAL_GPIO_Init>
=======
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4818      	ldr	r0, [pc, #96]	@ (80012fc <HAL_I2C_MspInit+0x1c4>)
 800129c:	f001 f8e6 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800134c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001352:	2312      	movs	r3, #18
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800135e:	2304      	movs	r3, #4
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4810      	ldr	r0, [pc, #64]	@ (80013ac <HAL_I2C_MspInit+0x1c8>)
 800136a:	f001 f84b 	bl	8002404 <HAL_GPIO_Init>
=======
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4810      	ldr	r0, [pc, #64]	@ (8001300 <HAL_I2C_MspInit+0x1c8>)
 80012be:	f001 f8d5 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes
    __HAL_RCC_I2C3_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_I2C_MspInit+0x1b4>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	bf00      	nop
 800138c:	3738      	adds	r7, #56	@ 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40005800 	.word	0x40005800
 80013a4:	40005c00 	.word	0x40005c00
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020000 	.word	0x40020000

<<<<<<< Updated upstream
080013b0 <main>:
/**
  * @brief  The application entry point.
=======
08001304 <main>:
>>>>>>> Stashed changes
  * @retval int
  */


int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 80013b4:	f000 feaa 	bl	800210c <HAL_Init>
=======
 8001308:	f000 ff34 	bl	8002174 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 80013b8:	f000 f87a 	bl	80014b0 <SystemClock_Config>
=======
 800130c:	f000 f894 	bl	8001438 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff fe1a 	bl	8000ff4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
<<<<<<< Updated upstream
 80013c0:	f000 fe08 	bl	8001fd4 <MX_USART2_UART_Init>
=======
 8001314:	f000 fe92 	bl	800203c <MX_USART2_UART_Init>
>>>>>>> Stashed changes
  MX_I2C1_Init();
 80013c4:	f7ff fe84 	bl	80010d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013c8:	f7ff feb0 	bl	800112c <MX_I2C2_Init>
  MX_I2C3_Init();
<<<<<<< Updated upstream
 80013cc:	f7ff fedc 	bl	8001188 <MX_I2C3_Init>
=======
 8001320:	f7ff fedc 	bl	80010dc <MX_I2C3_Init>
////  while (MPU6050_Init(&MPU60504, &hi2c2, MPU6050_ADDR+2) == 1);
//  HAL_I2C_Init(&hi2c3);
//  while (MPU6050_Init(&MPU60503, &hi2c3, MPU6050_ADDR) == 1);
//  while (MPU6050_Init(&MPU60504, &hi2c3, MPU6050_ADDR+2) == 1);
//
  MX_GPIO_Init();
 8001324:	f7ff fe10 	bl	8000f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001328:	f000 fe88 	bl	800203c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800132c:	f7ff fe7a 	bl	8001024 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001330:	f7ff fea6 	bl	8001080 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001334:	f7ff fed2 	bl	80010dc <MX_I2C3_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */

  HAL_I2C_Init(&hi2c1);
<<<<<<< Updated upstream
 80013d0:	482e      	ldr	r0, [pc, #184]	@ (800148c <main+0xdc>)
 80013d2:	f001 f9b5 	bl	8002740 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60501, &hi2c1, MPU6050_ADDR) == 1);
 80013d6:	bf00      	nop
 80013d8:	22d0      	movs	r2, #208	@ 0xd0
 80013da:	492c      	ldr	r1, [pc, #176]	@ (800148c <main+0xdc>)
 80013dc:	482c      	ldr	r0, [pc, #176]	@ (8001490 <main+0xe0>)
 80013de:	f000 f8eb 	bl	80015b8 <MPU6050_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d0f7      	beq.n	80013d8 <main+0x28>
  HAL_I2C_Init(&hi2c2);
 80013e8:	482a      	ldr	r0, [pc, #168]	@ (8001494 <main+0xe4>)
 80013ea:	f001 f9a9 	bl	8002740 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60502, &hi2c2, MPU6050_ADDR) == 1);
 80013ee:	bf00      	nop
 80013f0:	22d0      	movs	r2, #208	@ 0xd0
 80013f2:	4928      	ldr	r1, [pc, #160]	@ (8001494 <main+0xe4>)
 80013f4:	4828      	ldr	r0, [pc, #160]	@ (8001498 <main+0xe8>)
 80013f6:	f000 f8df 	bl	80015b8 <MPU6050_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d0f7      	beq.n	80013f0 <main+0x40>
  HAL_I2C_Init(&hi2c3);
 8001400:	4826      	ldr	r0, [pc, #152]	@ (800149c <main+0xec>)
 8001402:	f001 f99d 	bl	8002740 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60503, &hi2c3, MPU6050_ADDR) == 1);
 8001406:	bf00      	nop
 8001408:	22d0      	movs	r2, #208	@ 0xd0
 800140a:	4924      	ldr	r1, [pc, #144]	@ (800149c <main+0xec>)
 800140c:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <main+0xf0>)
 800140e:	f000 f8d3 	bl	80015b8 <MPU6050_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d0f7      	beq.n	8001408 <main+0x58>
  while (MPU6050_Init(&MPU60504, &hi2c3, MPU6050_ADDR+2) == 1);
 8001418:	bf00      	nop
 800141a:	22d2      	movs	r2, #210	@ 0xd2
 800141c:	491f      	ldr	r1, [pc, #124]	@ (800149c <main+0xec>)
 800141e:	4821      	ldr	r0, [pc, #132]	@ (80014a4 <main+0xf4>)
 8001420:	f000 f8ca 	bl	80015b8 <MPU6050_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d0f7      	beq.n	800141a <main+0x6a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU60501);
 800142a:	4919      	ldr	r1, [pc, #100]	@ (8001490 <main+0xe0>)
 800142c:	4817      	ldr	r0, [pc, #92]	@ (800148c <main+0xdc>)
 800142e:	f000 f95b 	bl	80016e8 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c2, &MPU60502);
 8001432:	4919      	ldr	r1, [pc, #100]	@ (8001498 <main+0xe8>)
 8001434:	4817      	ldr	r0, [pc, #92]	@ (8001494 <main+0xe4>)
 8001436:	f000 f957 	bl	80016e8 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c3, &MPU60503);
 800143a:	4919      	ldr	r1, [pc, #100]	@ (80014a0 <main+0xf0>)
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <main+0xec>)
 800143e:	f000 f953 	bl	80016e8 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c3, &MPU60504);
 8001442:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <main+0xf4>)
 8001444:	4815      	ldr	r0, [pc, #84]	@ (800149c <main+0xec>)
 8001446:	f000 f94f 	bl	80016e8 <MPU6050_Read_All>
	  printf("%d\t",MPU60501.Accel_Z_RAW);
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <main+0xe0>)
 800144c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001450:	4619      	mov	r1, r3
 8001452:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <main+0xf8>)
 8001454:	f004 f96a 	bl	800572c <iprintf>
	  printf("%d\t",MPU60502.Accel_Z_RAW);
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <main+0xe8>)
 800145a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800145e:	4619      	mov	r1, r3
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <main+0xf8>)
 8001462:	f004 f963 	bl	800572c <iprintf>
	  printf("%d\t",MPU60503.Accel_Z_RAW);
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <main+0xf0>)
 8001468:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146c:	4619      	mov	r1, r3
 800146e:	480e      	ldr	r0, [pc, #56]	@ (80014a8 <main+0xf8>)
 8001470:	f004 f95c 	bl	800572c <iprintf>
	  printf("%d\t\n\r",MPU60504.Accel_Z_RAW);
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <main+0xf4>)
 8001476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <main+0xfc>)
 800147e:	f004 f955 	bl	800572c <iprintf>
	  HAL_Delay (10);
 8001482:	200a      	movs	r0, #10
 8001484:	f000 feb4 	bl	80021f0 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU60501);
 8001488:	bf00      	nop
 800148a:	e7ce      	b.n	800142a <main+0x7a>
 800148c:	20000204 	.word	0x20000204
 8001490:	20000300 	.word	0x20000300
 8001494:	20000258 	.word	0x20000258
 8001498:	200003f0 	.word	0x200003f0
 800149c:	200002ac 	.word	0x200002ac
 80014a0:	200004e0 	.word	0x200004e0
 80014a4:	200005d0 	.word	0x200005d0
 80014a8:	080096c8 	.word	0x080096c8
 80014ac:	080096cc 	.word	0x080096cc

080014b0 <SystemClock_Config>:
=======
 8001338:	4836      	ldr	r0, [pc, #216]	@ (8001414 <main+0x110>)
 800133a:	f001 fa35 	bl	80027a8 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60501, &hi2c1, MPU6050_ADDR) == 1);
 800133e:	bf00      	nop
 8001340:	22d0      	movs	r2, #208	@ 0xd0
 8001342:	4934      	ldr	r1, [pc, #208]	@ (8001414 <main+0x110>)
 8001344:	4834      	ldr	r0, [pc, #208]	@ (8001418 <main+0x114>)
 8001346:	f000 f90b 	bl	8001560 <MPU6050_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d0f7      	beq.n	8001340 <main+0x3c>
  HAL_I2C_Init(&hi2c2);
 8001350:	4832      	ldr	r0, [pc, #200]	@ (800141c <main+0x118>)
 8001352:	f001 fa29 	bl	80027a8 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60502, &hi2c2, MPU6050_ADDR) == 1);
 8001356:	bf00      	nop
 8001358:	22d0      	movs	r2, #208	@ 0xd0
 800135a:	4930      	ldr	r1, [pc, #192]	@ (800141c <main+0x118>)
 800135c:	4830      	ldr	r0, [pc, #192]	@ (8001420 <main+0x11c>)
 800135e:	f000 f8ff 	bl	8001560 <MPU6050_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d0f7      	beq.n	8001358 <main+0x54>
  HAL_I2C_Init(&hi2c3);
 8001368:	482e      	ldr	r0, [pc, #184]	@ (8001424 <main+0x120>)
 800136a:	f001 fa1d 	bl	80027a8 <HAL_I2C_Init>
  while (MPU6050_Init(&MPU60503, &hi2c3, MPU6050_ADDR) == 1);
 800136e:	bf00      	nop
 8001370:	22d0      	movs	r2, #208	@ 0xd0
 8001372:	492c      	ldr	r1, [pc, #176]	@ (8001424 <main+0x120>)
 8001374:	482c      	ldr	r0, [pc, #176]	@ (8001428 <main+0x124>)
 8001376:	f000 f8f3 	bl	8001560 <MPU6050_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d0f7      	beq.n	8001370 <main+0x6c>
  while (MPU6050_Init(&MPU60504, &hi2c3, MPU6050_ADDR + 2) == 1);
 8001380:	bf00      	nop
 8001382:	22d2      	movs	r2, #210	@ 0xd2
 8001384:	4927      	ldr	r1, [pc, #156]	@ (8001424 <main+0x120>)
 8001386:	4829      	ldr	r0, [pc, #164]	@ (800142c <main+0x128>)
 8001388:	f000 f8ea 	bl	8001560 <MPU6050_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b01      	cmp	r3, #1
 8001390:	d0f7      	beq.n	8001382 <main+0x7e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  time = 0;
 8001392:	4927      	ldr	r1, [pc, #156]	@ (8001430 <main+0x12c>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9c1 2300 	strd	r2, r3, [r1]
   while (1)
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  time = (double) (HAL_GetTick()) / 1000;
 80013a0:	f000 ff4e 	bl	8002240 <HAL_GetTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8b4 	bl	8000514 <__aeabi_ui2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <main+0x130>)
 80013b2:	f7ff fa53 	bl	800085c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	491d      	ldr	r1, [pc, #116]	@ (8001430 <main+0x12c>)
 80013bc:	e9c1 2300 	strd	r2, r3, [r1]

	  MPU6050_Read_All(&hi2c1, &MPU60501, 1, 1, 1);
 80013c0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80013c4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013cc:	4912      	ldr	r1, [pc, #72]	@ (8001418 <main+0x114>)
 80013ce:	4811      	ldr	r0, [pc, #68]	@ (8001414 <main+0x110>)
 80013d0:	f000 f95e 	bl	8001690 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c2, &MPU60502, 1, 1, 1);
 80013d4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80013d8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013e0:	490f      	ldr	r1, [pc, #60]	@ (8001420 <main+0x11c>)
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <main+0x118>)
 80013e4:	f000 f954 	bl	8001690 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c3, &MPU60503, 1, 1, 1);
 80013e8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80013ec:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <main+0x124>)
 80013f6:	480b      	ldr	r0, [pc, #44]	@ (8001424 <main+0x120>)
 80013f8:	f000 f94a 	bl	8001690 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c3, &MPU60504, 1, 1, 1);
 80013fc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001400:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001404:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001408:	4908      	ldr	r1, [pc, #32]	@ (800142c <main+0x128>)
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <main+0x120>)
 800140c:	f000 f940 	bl	8001690 <MPU6050_Read_All>
	  time = (double) (HAL_GetTick()) / 1000;
 8001410:	bf00      	nop
 8001412:	e7c5      	b.n	80013a0 <main+0x9c>
 8001414:	20000204 	.word	0x20000204
 8001418:	20000300 	.word	0x20000300
 800141c:	20000258 	.word	0x20000258
 8001420:	200003f0 	.word	0x200003f0
 8001424:	200002ac 	.word	0x200002ac
 8001428:	200004e0 	.word	0x200004e0
 800142c:	200005d0 	.word	0x200005d0
 8001430:	200006c0 	.word	0x200006c0
 8001434:	408f4000 	.word	0x408f4000

08001438 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f9a9 	bl	8005816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
=======
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	@ 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	@ 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f003 ffd3 	bl	80053f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <SystemClock_Config+0xcc>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <SystemClock_Config+0xcc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <SystemClock_Config+0xd0>)
 80014fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <SystemClock_Config+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
=======
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <SystemClock_Config+0xec>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001464:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <SystemClock_Config+0xec>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	@ 0x40
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <SystemClock_Config+0xec>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <SystemClock_Config+0xf0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <SystemClock_Config+0xf0>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <SystemClock_Config+0xf0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_I2C2_FORCE_RESET();
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <SystemClock_Config+0xec>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <SystemClock_Config+0xec>)
 800149a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800149e:	6213      	str	r3, [r2, #32]

     HAL_Delay(1000);
 80014a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a4:	f000 fed8 	bl	8002258 <HAL_Delay>

  __HAL_RCC_I2C2_RELEASE_RESET();
 80014a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <SystemClock_Config+0xec>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <SystemClock_Config+0xec>)
 80014ae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80014b2:	6213      	str	r3, [r2, #32]
>>>>>>> Stashed changes

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001520:	2310      	movs	r3, #16
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001524:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152a:	2304      	movs	r3, #4
 800152c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4618      	mov	r0, r3
 8001538:	f002 f926 	bl	8003788 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001542:	f000 f831 	bl	80015a8 <Error_Handler>
=======
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d6:	2304      	movs	r3, #4
 80014d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f986 	bl	80037f0 <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014ea:	f000 f831 	bl	8001550 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8001546:	230f      	movs	r3, #15
 8001548:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2302      	movs	r3, #2
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fb88 	bl	8003c78 <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800156e:	f000 f81b 	bl	80015a8 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <__io_putchar>:
=======
 80014ee:	230f      	movs	r3, #15
 80014f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fbe8 	bl	8003ce0 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001516:	f000 f81b 	bl	8001550 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	@ 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <__io_putchar>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
<<<<<<< Updated upstream
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800158c:	1d39      	adds	r1, r7, #4
 800158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001592:	2201      	movs	r2, #1
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <__io_putchar+0x20>)
 8001596:	f002 fddf 	bl	8004158 <HAL_UART_Transmit>

  return ch;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200006c8 	.word	0x200006c8

080015a8 <Error_Handler>:
=======
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001534:	1d39      	adds	r1, r7, #4
 8001536:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800153a:	2201      	movs	r2, #1
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <__io_putchar+0x20>)
 800153e:	f002 fe3f 	bl	80041c0 <HAL_UART_Transmit>

  return ch;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200006d0 	.word	0x200006d0

08001550 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
=======
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
=======
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <Error_Handler+0x8>
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <MPU6050_Init>:
=======
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <Error_Handler+0x8>
 800155c:	0000      	movs	r0, r0
	...

08001560 <MPU6050_Init>:
>>>>>>> Stashed changes
const uint16_t i2c_timeout = 100;
const double Accel_Z_corrector = 14418.0;

uint32_t timer;

uint8_t MPU6050_Init(MPU6050_t *mpu, I2C_HandleTypeDef *I2Cx, uint8_t address) {
<<<<<<< Updated upstream
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71fb      	strb	r3, [r7, #7]

	mpu -> KalmanX.Q_angle = 0.001f;
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	a341      	add	r3, pc, #260	@ (adr r3, 80016d0 <MPU6050_Init+0x118>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	mpu -> KalmanX.Q_bias = 0.003f;
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	a340      	add	r3, pc, #256	@ (adr r3, 80016d8 <MPU6050_Init+0x120>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	mpu -> KalmanX.R_measure = 0.03f;
 80015de:	68f9      	ldr	r1, [r7, #12]
 80015e0:	a33f      	add	r3, pc, #252	@ (adr r3, 80016e0 <MPU6050_Init+0x128>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	mpu -> KalmanY.Q_bias = 0.003f;
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80016d8 <MPU6050_Init+0x120>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	mpu -> KalmanY.R_measure = 0.03f;
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	a339      	add	r3, pc, #228	@ (adr r3, 80016e0 <MPU6050_Init+0x128>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	mpu -> KalmanY.Q_angle = 0.001f;
 8001602:	68f9      	ldr	r1, [r7, #12]
 8001604:	a332      	add	r3, pc, #200	@ (adr r3, 80016d0 <MPU6050_Init+0x118>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	mpu -> address = address;
 800160e:	79fa      	ldrb	r2, [r7, #7]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	601a      	str	r2, [r3, #0]

    uint8_t check = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	75fb      	strb	r3, [r7, #23]
    uint8_t Data = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	75bb      	strb	r3, [r7, #22]
=======
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af04      	add	r7, sp, #16
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	71fb      	strb	r3, [r7, #7]

	mpu -> KalmanX.Q_angle = 0.001f;
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	a341      	add	r3, pc, #260	@ (adr r3, 8001678 <MPU6050_Init+0x118>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	mpu -> KalmanX.Q_bias = 0.003f;
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	a340      	add	r3, pc, #256	@ (adr r3, 8001680 <MPU6050_Init+0x120>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	mpu -> KalmanX.R_measure = 0.03f;
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	a33f      	add	r3, pc, #252	@ (adr r3, 8001688 <MPU6050_Init+0x128>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	mpu -> KalmanY.Q_bias = 0.003f;
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	a33a      	add	r3, pc, #232	@ (adr r3, 8001680 <MPU6050_Init+0x120>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	mpu -> KalmanY.R_measure = 0.03f;
 800159e:	68f9      	ldr	r1, [r7, #12]
 80015a0:	a339      	add	r3, pc, #228	@ (adr r3, 8001688 <MPU6050_Init+0x128>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	mpu -> KalmanY.Q_angle = 0.001f;
 80015aa:	68f9      	ldr	r1, [r7, #12]
 80015ac:	a332      	add	r3, pc, #200	@ (adr r3, 8001678 <MPU6050_Init+0x118>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	mpu -> address = address;
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	601a      	str	r2, [r3, #0]

    uint8_t check = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
    uint8_t Data = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	75bb      	strb	r3, [r7, #22]
>>>>>>> Stashed changes

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, address, WHO_AM_I_REG, 1, &check, 1, 10000);
<<<<<<< Updated upstream
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	b299      	uxth	r1, r3
 8001620:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2301      	movs	r3, #1
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 0317 	add.w	r3, r7, #23
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	2275      	movs	r2, #117	@ 0x75
 8001634:	68b8      	ldr	r0, [r7, #8]
 8001636:	f001 fac1 	bl	8002bbc <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b68      	cmp	r3, #104	@ 0x68
 800163e:	d141      	bne.n	80016c4 <MPU6050_Init+0x10c>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	b299      	uxth	r1, r3
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2301      	movs	r3, #1
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	f107 0316 	add.w	r3, r7, #22
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2301      	movs	r3, #1
 8001658:	226b      	movs	r2, #107	@ 0x6b
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f001 f9b4 	bl	80029c8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001660:	2307      	movs	r3, #7
 8001662:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	b299      	uxth	r1, r3
 8001668:	2364      	movs	r3, #100	@ 0x64
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	2301      	movs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f107 0316 	add.w	r3, r7, #22
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2301      	movs	r3, #1
 8001678:	2219      	movs	r2, #25
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f001 f9a4 	bl	80029c8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	b299      	uxth	r1, r3
 8001688:	2364      	movs	r3, #100	@ 0x64
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2301      	movs	r3, #1
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	f107 0316 	add.w	r3, r7, #22
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	221c      	movs	r2, #28
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f001 f994 	bl	80029c8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	b299      	uxth	r1, r3
 80016a8:	2364      	movs	r3, #100	@ 0x64
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	f107 0316 	add.w	r3, r7, #22
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	221b      	movs	r2, #27
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f001 f984 	bl	80029c8 <HAL_I2C_Mem_Write>
        return 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e000      	b.n	80016c6 <MPU6050_Init+0x10e>
    }
    return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e0000000 	.word	0xe0000000
 80016d4:	3f50624d 	.word	0x3f50624d
 80016d8:	c0000000 	.word	0xc0000000
 80016dc:	3f689374 	.word	0x3f689374
 80016e0:	e0000000 	.word	0xe0000000
 80016e4:	3f9eb851 	.word	0x3f9eb851

080016e8 <MPU6050_Read_All>:
=======
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f107 0317 	add.w	r3, r7, #23
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2301      	movs	r3, #1
 80015da:	2275      	movs	r2, #117	@ 0x75
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f001 fb21 	bl	8002c24 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b68      	cmp	r3, #104	@ 0x68
 80015e6:	d141      	bne.n	800166c <MPU6050_Init+0x10c>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	b299      	uxth	r1, r3
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f107 0316 	add.w	r3, r7, #22
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	226b      	movs	r2, #107	@ 0x6b
 8001602:	68b8      	ldr	r0, [r7, #8]
 8001604:	f001 fa14 	bl	8002a30 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001608:	2307      	movs	r3, #7
 800160a:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b299      	uxth	r1, r3
 8001610:	2364      	movs	r3, #100	@ 0x64
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	f107 0316 	add.w	r3, r7, #22
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	2219      	movs	r2, #25
 8001622:	68b8      	ldr	r0, [r7, #8]
 8001624:	f001 fa04 	bl	8002a30 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001628:	2300      	movs	r3, #0
 800162a:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	b299      	uxth	r1, r3
 8001630:	2364      	movs	r3, #100	@ 0x64
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f107 0316 	add.w	r3, r7, #22
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	221c      	movs	r2, #28
 8001642:	68b8      	ldr	r0, [r7, #8]
 8001644:	f001 f9f4 	bl	8002a30 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001648:	2300      	movs	r3, #0
 800164a:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	b299      	uxth	r1, r3
 8001650:	2364      	movs	r3, #100	@ 0x64
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f107 0316 	add.w	r3, r7, #22
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	221b      	movs	r2, #27
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f001 f9e4 	bl	8002a30 <HAL_I2C_Mem_Write>
        return 0;
 8001668:	2300      	movs	r3, #0
 800166a:	e000      	b.n	800166e <MPU6050_Init+0x10e>
    }
    return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e0000000 	.word	0xe0000000
 800167c:	3f50624d 	.word	0x3f50624d
 8001680:	c0000000 	.word	0xc0000000
 8001684:	3f689374 	.word	0x3f689374
 8001688:	e0000000 	.word	0xe0000000
 800168c:	3f9eb851 	.word	0x3f9eb851

08001690 <MPU6050_Read_All>:
>>>>>>> Stashed changes

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

<<<<<<< Updated upstream
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b094      	sub	sp, #80	@ 0x50
 80016ee:	af04      	add	r7, sp, #16
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
=======
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct, float cX, float cY, float cZ) {
 8001690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001694:	b098      	sub	sp, #96	@ 0x60
 8001696:	af04      	add	r7, sp, #16
 8001698:	6178      	str	r0, [r7, #20]
 800169a:	6139      	str	r1, [r7, #16]
 800169c:	ed87 0a03 	vstr	s0, [r7, #12]
 80016a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80016a4:	ed87 1a01 	vstr	s2, [r7, #4]
>>>>>>> Stashed changes
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, DataStruct->address, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
<<<<<<< Updated upstream
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b299      	uxth	r1, r3
 80016fa:	2364      	movs	r3, #100	@ 0x64
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	230e      	movs	r3, #14
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	223b      	movs	r2, #59	@ 0x3b
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fa55 	bl	8002bbc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001712:	7a3b      	ldrb	r3, [r7, #8]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	7a7b      	ldrb	r3, [r7, #9]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	809a      	strh	r2, [r3, #4]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001724:	7abb      	ldrb	r3, [r7, #10]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	7afb      	ldrb	r3, [r7, #11]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21a      	sxth	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	80da      	strh	r2, [r3, #6]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001736:	7b3b      	ldrb	r3, [r7, #12]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	7b7b      	ldrb	r3, [r7, #13]
 800173e:	b21b      	sxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b21a      	sxth	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	811a      	strh	r2, [r3, #8]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001756:	7c3b      	ldrb	r3, [r7, #16]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	b21a      	sxth	r2, r3
 800175c:	7c7b      	ldrb	r3, [r7, #17]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21a      	sxth	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	851a      	strh	r2, [r3, #40]	@ 0x28
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001768:	7cbb      	ldrb	r3, [r7, #18]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21a      	sxth	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	855a      	strh	r2, [r3, #42]	@ 0x2a
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800177a:	7d3b      	ldrb	r3, [r7, #20]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7d7b      	ldrb	r3, [r7, #21]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	859a      	strh	r2, [r3, #44]	@ 0x2c

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fece 	bl	8000534 <__aeabi_i2d>
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4bc0      	ldr	r3, [pc, #768]	@ (8001aa0 <MPU6050_Read_All+0x3b8>)
 800179e:	f7ff f85d 	bl	800085c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe febe 	bl	8000534 <__aeabi_i2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4bb8      	ldr	r3, [pc, #736]	@ (8001aa0 <MPU6050_Read_All+0x3b8>)
 80017be:	f7ff f84d 	bl	800085c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe feae 	bl	8000534 <__aeabi_i2d>
 80017d8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8001a88 <MPU6050_Read_All+0x3a0>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7ff f83d 	bl	800085c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80017ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8001aa4 <MPU6050_Read_All+0x3bc>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001aa8 <MPU6050_Read_All+0x3c0>
 8001804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe8d 	bl	8000534 <__aeabi_i2d>
 800181a:	a39d      	add	r3, pc, #628	@ (adr r3, 8001a90 <MPU6050_Read_All+0x3a8>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe7d 	bl	8000534 <__aeabi_i2d>
 800183a:	a395      	add	r3, pc, #596	@ (adr r3, 8001a90 <MPU6050_Read_All+0x3a8>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7ff f80c 	bl	800085c <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe6d 	bl	8000534 <__aeabi_i2d>
 800185a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001a90 <MPU6050_Read_All+0x3a8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fffc 	bl	800085c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800186e:	f000 fcb3 	bl	80021d8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	4b8d      	ldr	r3, [pc, #564]	@ (8001aac <MPU6050_Read_All+0x3c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe4a 	bl	8000514 <__aeabi_ui2d>
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab0 <MPU6050_Read_All+0x3c8>)
 8001886:	f7fe ffe9 	bl	800085c <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001892:	f000 fca1 	bl	80021d8 <HAL_GetTick>
 8001896:	4603      	mov	r3, r0
 8001898:	4a84      	ldr	r2, [pc, #528]	@ (8001aac <MPU6050_Read_All+0x3c4>)
 800189a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018b4:	4619      	mov	r1, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe36 	bl	8000534 <__aeabi_i2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	ec43 2b10 	vmov	d0, r2, r3
 80018d0:	f007 fb7e 	bl	8008fd0 <sqrt>
 80018d4:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018e4:	f7ff f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11f      	bne.n	800192e <MPU6050_Read_All+0x246>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe1d 	bl	8000534 <__aeabi_i2d>
 80018fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018fe:	f7fe ffad 	bl	800085c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b17 	vmov	d7, r2, r3
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f007 fb89 	bl	8009028 <atan>
 8001916:	ec51 0b10 	vmov	r0, r1, d0
 800191a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001a98 <MPU6050_Read_All+0x3b0>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe72 	bl	8000608 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800192c:	e005      	b.n	800193a <MPU6050_Read_All+0x252>
    } else {
        roll = 0.0;
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001940:	425b      	negs	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf6 	bl	8000534 <__aeabi_i2d>
 8001948:	4682      	mov	sl, r0
 800194a:	468b      	mov	fp, r1
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fdee 	bl	8000534 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	ec43 2b11 	vmov	d1, r2, r3
 8001960:	ec4b ab10 	vmov	d0, sl, fp
 8001964:	f007 fb32 	bl	8008fcc <atan2>
 8001968:	ec51 0b10 	vmov	r0, r1, d0
 800196c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001a98 <MPU6050_Read_All+0x3b0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fe49 	bl	8000608 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab4 <MPU6050_Read_All+0x3cc>)
 8001984:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001988:	f7ff f8b0 	bl	8000aec <__aeabi_dcmplt>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <MPU6050_Read_All+0x2c0>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <MPU6050_Read_All+0x3d0>)
 800199e:	f7ff f8c3 	bl	8000b28 <__aeabi_dcmpgt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d114      	bne.n	80019d2 <MPU6050_Read_All+0x2ea>
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <MPU6050_Read_All+0x3d0>)
 80019ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019b2:	f7ff f8b9 	bl	8000b28 <__aeabi_dcmpgt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <MPU6050_Read_All+0x300>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <MPU6050_Read_All+0x3cc>)
 80019c8:	f7ff f890 	bl	8000aec <__aeabi_dcmplt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <MPU6050_Read_All+0x300>
        DataStruct->KalmanY.angle = pitch;
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d8:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
        DataStruct->KalmanAngleY = pitch;
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 80019e6:	e017      	b.n	8001a18 <MPU6050_Read_All+0x330>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&(DataStruct->KalmanY), pitch, DataStruct->Gy, dt);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80019f4:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80019f8:	eeb0 1a47 	vmov.f32	s2, s14
 80019fc:	eef0 1a67 	vmov.f32	s3, s15
 8001a00:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a04:	4610      	mov	r0, r2
 8001a06:	f000 f859 	bl	8001abc <Kalman_getAngle>
 8001a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a0e:	eef0 7a60 	vmov.f32	s15, s1
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001a1e:	4690      	mov	r8, r2
 8001a20:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <MPU6050_Read_All+0x3d0>)
 8001a2a:	4640      	mov	r0, r8
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	f7ff f87b 	bl	8000b28 <__aeabi_dcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <MPU6050_Read_All+0x362>
        DataStruct->Gx = -DataStruct->Gx;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a3e:	4614      	mov	r4, r2
 8001a40:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
    DataStruct->KalmanAngleX = Kalman_getAngle(&(DataStruct->KalmanX), roll, DataStruct->Gy, dt);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001a56:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001a5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a5e:	eef0 1a67 	vmov.f32	s3, s15
 8001a62:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001a66:	4610      	mov	r0, r2
 8001a68:	f000 f828 	bl	8001abc <Kalman_getAngle>
 8001a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a70:	eef0 7a60 	vmov.f32	s15, s1
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50

}
 8001a7a:	bf00      	nop
 8001a7c:	3740      	adds	r7, #64	@ 0x40
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	40cc2900 	.word	0x40cc2900
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40606000 	.word	0x40606000
 8001a98:	1a63c1f8 	.word	0x1a63c1f8
 8001a9c:	404ca5dc 	.word	0x404ca5dc
 8001aa0:	40d00000 	.word	0x40d00000
 8001aa4:	43aa0000 	.word	0x43aa0000
 8001aa8:	42121eb8 	.word	0x42121eb8
 8001aac:	200006c0 	.word	0x200006c0
 8001ab0:	408f4000 	.word	0x408f4000
 8001ab4:	c0568000 	.word	0xc0568000
 8001ab8:	40568000 	.word	0x40568000

08001abc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b096      	sub	sp, #88	@ 0x58
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	61f8      	str	r0, [r7, #28]
 8001ac4:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ac8:	ed87 1b02 	vstr	d1, [r7, #8]
 8001acc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ada:	f7fe fbdd 	bl	8000298 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	f7fe fd88 	bl	8000608 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbcc 	bl	800029c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	69f9      	ldr	r1, [r7, #28]
 8001b0a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b1e:	f7fe fd73 	bl	8000608 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b30:	f7fe fbb2 	bl	8000298 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b42:	f7fe fba9 	bl	8000298 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fba2 	bl	800029c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b64:	f7fe fd50 	bl	8000608 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb94 	bl	800029c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b8e:	f7fe fd3b 	bl	8000608 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fb7d 	bl	8000298 <__aeabi_dsub>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	69f9      	ldr	r1, [r7, #28]
 8001ba4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb8:	f7fe fd26 	bl	8000608 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb68 	bl	8000298 <__aeabi_dsub>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	69f9      	ldr	r1, [r7, #28]
 8001bce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001be2:	f7fe fd11 	bl	8000608 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f7fe fb55 	bl	800029c <__adddf3>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	69f9      	ldr	r1, [r7, #28]
 8001bf8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c08:	f7fe fb48 	bl	800029c <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c1e:	f7fe fe1d 	bl	800085c <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c34:	f7fe fe12 	bl	800085c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4a:	f7fe fb25 	bl	8000298 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c64:	f7fe fcd0 	bl	8000608 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fb14 	bl	800029c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001c84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c8c:	f7fe fcbc 	bl	8000608 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fb00 	bl	800029c <__adddf3>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	69f9      	ldr	r1, [r7, #28]
 8001ca2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001cac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001cb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001cc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cc8:	f7fe fc9e 	bl	8000608 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f7fe fae0 	bl	8000298 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	69f9      	ldr	r1, [r7, #28]
 8001cde:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001ce8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe facc 	bl	8000298 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	69f9      	ldr	r1, [r7, #28]
 8001d06:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d18:	f7fe fc76 	bl	8000608 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	f7fe fab8 	bl	8000298 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	69f9      	ldr	r1, [r7, #28]
 8001d2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d40:	f7fe fc62 	bl	8000608 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe faa4 	bl	8000298 <__aeabi_dsub>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	69f9      	ldr	r1, [r7, #28]
 8001d56:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d60:	ec43 2b17 	vmov	d7, r2, r3
};
 8001d64:	eeb0 0a47 	vmov.f32	s0, s14
 8001d68:	eef0 0a67 	vmov.f32	s1, s15
 8001d6c:	3758      	adds	r7, #88	@ 0x58
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d74 <HAL_MspInit>:
=======
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b299      	uxth	r1, r3
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	230e      	movs	r3, #14
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	223b      	movs	r2, #59	@ 0x3b
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f001 faaf 	bl	8002c24 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80016c6:	7e3b      	ldrb	r3, [r7, #24]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7e7b      	ldrb	r3, [r7, #25]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	809a      	strh	r2, [r3, #4]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80016d8:	7ebb      	ldrb	r3, [r7, #26]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7efb      	ldrb	r3, [r7, #27]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	80da      	strh	r2, [r3, #6]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80016ea:	7f3b      	ldrb	r3, [r7, #28]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7f7b      	ldrb	r3, [r7, #29]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	811a      	strh	r2, [r3, #8]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80016fc:	7fbb      	ldrb	r3, [r7, #30]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800170c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	851a      	strh	r2, [r3, #40]	@ 0x28
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001722:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21a      	sxth	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001738:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21a      	sxth	r2, r3
 8001740:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	859a      	strh	r2, [r3, #44]	@ 0x2c

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe feed 	bl	8000534 <__aeabi_i2d>
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4bc2      	ldr	r3, [pc, #776]	@ (8001a68 <MPU6050_Read_All+0x3d8>)
 8001760:	f7ff f87c 	bl	800085c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	6939      	ldr	r1, [r7, #16]
 800176a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fedd 	bl	8000534 <__aeabi_i2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4bba      	ldr	r3, [pc, #744]	@ (8001a68 <MPU6050_Read_All+0x3d8>)
 8001780:	f7ff f86c 	bl	800085c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	6939      	ldr	r1, [r7, #16]
 800178a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fecd 	bl	8000534 <__aeabi_i2d>
 800179a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8001a50 <MPU6050_Read_All+0x3c0>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f85c 	bl	800085c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Corrections

    DataStruct->Ax = (float) (DataStruct->Ax * (float) cX );
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7fe fecf 	bl	8000558 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4650      	mov	r0, sl
 80017c0:	4659      	mov	r1, fp
 80017c2:	f7fe ff21 	bl	8000608 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f9f3 	bl	8000bb8 <__aeabi_d2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe febf 	bl	8000558 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	6939      	ldr	r1, [r7, #16]
 80017e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Ay = (float) (DataStruct->Ay * (float) cY );
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f7fe feb4 	bl	8000558 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4650      	mov	r0, sl
 80017f6:	4659      	mov	r1, fp
 80017f8:	f7fe ff06 	bl	8000608 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9d8 	bl	8000bb8 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	6939      	ldr	r1, [r7, #16]
 8001816:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Az = (float) (DataStruct->Az * (float) cZ );
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7fe fe99 	bl	8000558 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4650      	mov	r0, sl
 800182c:	4659      	mov	r1, fp
 800182e:	f7fe feeb 	bl	8000608 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9bd 	bl	8000bb8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	e9c1 2308 	strd	r2, r3, [r1, #32]

    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001850:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185c:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8001a6c <MPU6050_Read_All+0x3dc>
 8001860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001864:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001a70 <MPU6050_Read_All+0x3e0>
 8001868:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe5b 	bl	8000534 <__aeabi_i2d>
 800187e:	a376      	add	r3, pc, #472	@ (adr r3, 8001a58 <MPU6050_Read_All+0x3c8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe ffea 	bl	800085c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe4b 	bl	8000534 <__aeabi_i2d>
 800189e:	a36e      	add	r3, pc, #440	@ (adr r3, 8001a58 <MPU6050_Read_All+0x3c8>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe ffda 	bl	800085c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	6939      	ldr	r1, [r7, #16]
 80018ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe3b 	bl	8000534 <__aeabi_i2d>
 80018be:	a366      	add	r3, pc, #408	@ (adr r3, 8001a58 <MPU6050_Read_All+0x3c8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ffca 	bl	800085c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80018d2:	f000 fcb5 	bl	8002240 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <MPU6050_Read_All+0x3e4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe18 	bl	8000514 <__aeabi_ui2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <MPU6050_Read_All+0x3e8>)
 80018ea:	f7fe ffb7 	bl	800085c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    timer = HAL_GetTick();
 80018f6:	f000 fca3 	bl	8002240 <HAL_GetTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a74 <MPU6050_Read_All+0x3e4>)
 80018fe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800190e:	fb03 f202 	mul.w	r2, r3, r2
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001918:	4619      	mov	r1, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe04 	bl	8000534 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	ec43 2b10 	vmov	d0, r2, r3
 8001934:	f005 fc82 	bl	800723c <sqrt>
 8001938:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
    if (roll_sqrt != 0.0) {
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001948:	f7ff f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11f      	bne.n	8001992 <MPU6050_Read_All+0x302>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdeb 	bl	8000534 <__aeabi_i2d>
 800195e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001962:	f7fe ff7b 	bl	800085c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ec43 2b17 	vmov	d7, r2, r3
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	f005 fc8f 	bl	8007298 <atan>
 800197a:	ec51 0b10 	vmov	r0, r1, d0
 800197e:	a338      	add	r3, pc, #224	@ (adr r3, 8001a60 <MPU6050_Read_All+0x3d0>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe40 	bl	8000608 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8001990:	e005      	b.n	800199e <MPU6050_Read_All+0x30e>
    } else {
        roll = 0.0;
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a4:	425b      	negs	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdc4 	bl	8000534 <__aeabi_i2d>
 80019ac:	4682      	mov	sl, r0
 80019ae:	468b      	mov	fp, r1
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdbc 	bl	8000534 <__aeabi_i2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	ec43 2b11 	vmov	d1, r2, r3
 80019c4:	ec4b ab10 	vmov	d0, sl, fp
 80019c8:	f005 fc36 	bl	8007238 <atan2>
 80019cc:	ec51 0b10 	vmov	r0, r1, d0
 80019d0:	a323      	add	r3, pc, #140	@ (adr r3, 8001a60 <MPU6050_Read_All+0x3d0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe17 	bl	8000608 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <MPU6050_Read_All+0x3ec>)
 80019e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019ec:	f7ff f87e 	bl	8000aec <__aeabi_dcmplt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <MPU6050_Read_All+0x37c>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MPU6050_Read_All+0x3f0>)
 8001a02:	f7ff f891 	bl	8000b28 <__aeabi_dcmpgt>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d114      	bne.n	8001a36 <MPU6050_Read_All+0x3a6>
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <MPU6050_Read_All+0x3f0>)
 8001a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a16:	f7ff f887 	bl	8000b28 <__aeabi_dcmpgt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d031      	beq.n	8001a84 <MPU6050_Read_All+0x3f4>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MPU6050_Read_All+0x3ec>)
 8001a2c:	f7ff f85e 	bl	8000aec <__aeabi_dcmplt>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d026      	beq.n	8001a84 <MPU6050_Read_All+0x3f4>
        DataStruct->KalmanY.angle = pitch;
 8001a36:	6939      	ldr	r1, [r7, #16]
 8001a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a3c:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
        DataStruct->KalmanAngleY = pitch;
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a46:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001a4a:	e033      	b.n	8001ab4 <MPU6050_Read_All+0x424>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40cc2900 	.word	0x40cc2900
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40606000 	.word	0x40606000
 8001a60:	1a63c1f8 	.word	0x1a63c1f8
 8001a64:	404ca5dc 	.word	0x404ca5dc
 8001a68:	40d00000 	.word	0x40d00000
 8001a6c:	43aa0000 	.word	0x43aa0000
 8001a70:	42121eb8 	.word	0x42121eb8
 8001a74:	200006c8 	.word	0x200006c8
 8001a78:	408f4000 	.word	0x408f4000
 8001a7c:	c0568000 	.word	0xc0568000
 8001a80:	40568000 	.word	0x40568000
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&(DataStruct->KalmanY), pitch, DataStruct->Gy, dt);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001a90:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8001a94:	eeb0 1a47 	vmov.f32	s2, s14
 8001a98:	eef0 1a67 	vmov.f32	s3, s15
 8001a9c:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f000 f83f 	bl	8001b24 <Kalman_getAngle>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	eef0 7a60 	vmov.f32	s15, s1
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001aba:	4690      	mov	r8, r2
 8001abc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <MPU6050_Read_All+0x490>)
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	4649      	mov	r1, r9
 8001aca:	f7ff f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <MPU6050_Read_All+0x456>
        DataStruct->Gx = -DataStruct->Gx;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ada:	4614      	mov	r4, r2
 8001adc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
    DataStruct->KalmanAngleX = Kalman_getAngle(&(DataStruct->KalmanX), roll, DataStruct->Gy, dt);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001af2:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8001af6:	eeb0 1a47 	vmov.f32	s2, s14
 8001afa:	eef0 1a67 	vmov.f32	s3, s15
 8001afe:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 f80e 	bl	8001b24 <Kalman_getAngle>
 8001b08:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0c:	eef0 7a60 	vmov.f32	s15, s1
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50

}
 8001b16:	bf00      	nop
 8001b18:	3750      	adds	r7, #80	@ 0x50
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b20:	40568000 	.word	0x40568000

08001b24 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b096      	sub	sp, #88	@ 0x58
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	61f8      	str	r0, [r7, #28]
 8001b2c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b30:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b34:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b42:	f7fe fba9 	bl	8000298 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b5c:	f7fe fd54 	bl	8000608 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fb98 	bl	800029c <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	69f9      	ldr	r1, [r7, #28]
 8001b72:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b86:	f7fe fd3f 	bl	8000608 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b98:	f7fe fb7e 	bl	8000298 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001baa:	f7fe fb75 	bl	8000298 <__aeabi_dsub>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fb6e 	bl	800029c <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bcc:	f7fe fd1c 	bl	8000608 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fb60 	bl	800029c <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	69f9      	ldr	r1, [r7, #28]
 8001be2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf6:	f7fe fd07 	bl	8000608 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fb49 	bl	8000298 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	69f9      	ldr	r1, [r7, #28]
 8001c0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c20:	f7fe fcf2 	bl	8000608 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb34 	bl	8000298 <__aeabi_dsub>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	69f9      	ldr	r1, [r7, #28]
 8001c36:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb21 	bl	800029c <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c70:	f7fe fb14 	bl	800029c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c86:	f7fe fde9 	bl	800085c <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c9c:	f7fe fdde 	bl	800085c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cb2:	f7fe faf1 	bl	8000298 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001cc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ccc:	f7fe fc9c 	bl	8000608 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fae0 	bl	800029c <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	69f9      	ldr	r1, [r7, #28]
 8001ce2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001cec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cf4:	f7fe fc88 	bl	8000608 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe facc 	bl	800029c <__adddf3>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	69f9      	ldr	r1, [r7, #28]
 8001d0a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d14:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d30:	f7fe fc6a 	bl	8000608 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe faac 	bl	8000298 <__aeabi_dsub>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	69f9      	ldr	r1, [r7, #28]
 8001d46:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d58:	f7fe fc56 	bl	8000608 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fa98 	bl	8000298 <__aeabi_dsub>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	69f9      	ldr	r1, [r7, #28]
 8001d6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d80:	f7fe fc42 	bl	8000608 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fa84 	bl	8000298 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	69f9      	ldr	r1, [r7, #28]
 8001d96:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001da0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001da4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fa70 	bl	8000298 <__aeabi_dsub>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	69f9      	ldr	r1, [r7, #28]
 8001dbe:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dc8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd0:	eef0 0a67 	vmov.f32	s1, s15
 8001dd4:	3758      	adds	r7, #88	@ 0x58
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ddc <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
=======
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001db2:	2007      	movs	r0, #7
 8001db4:	f000 faf2 	bl	800239c <HAL_NVIC_SetPriorityGrouping>
=======
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e1a:	2007      	movs	r0, #7
 8001e1c:	f000 faf2 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <NMI_Handler>:
=======
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800

08001e2c <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
=======
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <NMI_Handler+0x4>

08001dcc <HardFault_Handler>:
=======
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
=======
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:
=======
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
=======
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <MemManage_Handler+0x4>

08001ddc <BusFault_Handler>:
=======
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
=======
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:
=======
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
=======
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dec <SVC_Handler>:
=======
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
=======
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <DebugMon_Handler>:
=======
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
=======
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <PendSV_Handler>:
=======
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
=======
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <SysTick_Handler>:
=======
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
=======
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8001e1a:	f000 f9c9 	bl	80021b0 <HAL_IncTick>
=======
 8001e82:	f000 f9c9 	bl	8002218 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_getpid>:
=======
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  return 1;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_kill>:

int _kill(int pid, int sig)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3c:	f003 fd3e 	bl	80058bc <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2216      	movs	r2, #22
 8001e44:	601a      	str	r2, [r3, #0]
  return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_exit>:

void _exit (int status)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffe7 	bl	8001e32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <_exit+0x12>

08001e68 <_read>:
=======
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return 1;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_kill>:

int _kill(int pid, int sig)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea4:	f003 faf8 	bl	8005498 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2216      	movs	r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_exit>:

void _exit (int status)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffe7 	bl	8001e9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <_exit+0x12>

08001ed0 <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
=======
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e00a      	b.n	8001e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7a:	f3af 8000 	nop.w
 8001e7e:	4601      	mov	r1, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	b2ca      	uxtb	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf0      	blt.n	8001e7a <_read+0x12>
  }

  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
=======
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< Updated upstream
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e009      	b.n	8001ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	60ba      	str	r2, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb61 	bl	8001584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf1      	blt.n	8001eb4 <_write+0x12>
  }
  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_close>:

int _close(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:
=======
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fb01 	bl	800152c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
=======
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< Updated upstream
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <_sbrk>:
=======
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
=======
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
=======
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
=======
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f003 fca2 	bl	80058bc <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20020000 	.word	0x20020000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	200006c4 	.word	0x200006c4
 8001fac:	20000860 	.word	0x20000860

08001fb0 <SystemInit>:
=======
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f003 fa5c 	bl	8005498 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20020000 	.word	0x20020000
 800200c:	00000400 	.word	0x00000400
 8002010:	200006cc 	.word	0x200006cc
 8002014:	20000868 	.word	0x20000868

08002018 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_USART2_UART_Init>:
=======
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
=======
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< Updated upstream
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <MX_USART2_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <MX_USART2_UART_Init+0x4c>)
 800200c:	f002 f854 	bl	80040b8 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f7ff fac7 	bl	80015a8 <Error_Handler>
=======
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_USART2_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002048:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002074:	f002 f854 	bl	8004120 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f7ff fa67 	bl	8001550 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< Updated upstream
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200006c8 	.word	0x200006c8
 8002024:	40004400 	.word	0x40004400

08002028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_UART_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12b      	bne.n	80020a2 <HAL_UART_MspInit+0x7a>
=======
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200006d0 	.word	0x200006d0
 800208c:	40004400 	.word	0x40004400

08002090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_UART_MspInit+0x84>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12b      	bne.n	800210a <HAL_UART_MspInit+0x7a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_UART_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
=======
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< Updated upstream
 8002082:	230c      	movs	r3, #12
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002092:	2307      	movs	r3, #7
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <HAL_UART_MspInit+0x8c>)
 800209e:	f000 f9b1 	bl	8002404 <HAL_GPIO_Init>
=======
 80020ea:	230c      	movs	r3, #12
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <HAL_UART_MspInit+0x8c>)
 8002106:	f000 f9b1 	bl	800246c <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020000 	.word	0x40020000

080020b8 <Reset_Handler>:
=======
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	@ 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40004400 	.word	0x40004400
 8002118:	40023800 	.word	0x40023800
 800211c:	40020000 	.word	0x40020000

08002120 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< Updated upstream
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020bc:	f7ff ff78 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e6:	f003 fbef 	bl	80058c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7ff f961 	bl	80013b0 <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020fc:	08009b98 	.word	0x08009b98
  ldr r2, =_sbss
 8002100:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002104:	20000860 	.word	0x20000860

08002108 <ADC_IRQHandler>:
=======
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002124:	f7ff ff78 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f003 f9a9 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff f8d7 	bl	8001304 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002164:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 8002168:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800216c:	20000868 	.word	0x20000868

08002170 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>
	...

0800210c <HAL_Init>:
=======
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_Init+0x40>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]
=======
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002182:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_Init+0x40>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002126:	6013      	str	r3, [r2, #0]
=======
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_Init+0x40>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002132:	6013      	str	r3, [r2, #0]
=======
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f931 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fe18 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_InitTick>:
=======
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f931 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fe18 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f93b 	bl	80023ea <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
=======
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f93b 	bl	8002452 <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 f911 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
=======
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f911 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	@ (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_IncTick>:
=======
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	20000008 	.word	0x20000008
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000710 	.word	0x20000710

080021d8 <HAL_GetTick>:
=======
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008
 800223c:	20000718 	.word	0x20000718

08002240 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
	}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000710 	.word	0x20000710

080021f0 <HAL_Delay>:
=======
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
	}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000718 	.word	0x20000718

08002258 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d005      	beq.n	8002216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_Delay+0x44>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002216:	bf00      	nop
 8002218:	f7ff ffde 	bl	80021d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <HAL_Delay+0x28>
  {
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008

08002238 <__NVIC_SetPriorityGrouping>:
=======
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008

080022a0 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
=======
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_SetPriority>:
=======
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
=======
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
=======
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
=======
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
=======
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
=======
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff47 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
=======
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff47 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
=======
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80023c4:	f7ff ff5c 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
=======
 800242c:	f7ff ff5c 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffb0 	bl	8002358 <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_GPIO_Init>:
=======
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffb0 	bl	80023c0 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
=======
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e159      	b.n	80026d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8148 	bne.w	80026ce <HAL_GPIO_Init+0x2ca>
=======
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e159      	b.n	800273c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8148 	bne.w	8002736 <HAL_GPIO_Init+0x2ca>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
=======
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d005      	beq.n	80024be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d130      	bne.n	8002520 <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
=======
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 0201 	and.w	r2, r3, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b03      	cmp	r3, #3
 800252a:	d017      	beq.n	800255c <HAL_GPIO_Init+0xf0>
>>>>>>> Stashed changes
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
=======
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
=======
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]
=======
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a2 	beq.w	80026ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b54      	ldr	r3, [pc, #336]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_GPIO_Init+0x2ec>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	@ (80026f4 <HAL_GPIO_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x202>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	@ (80026f8 <HAL_GPIO_Init+0x2f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x1fe>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <HAL_GPIO_Init+0x2f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x1fa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	@ (8002700 <HAL_GPIO_Init+0x2fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x1f6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	@ (8002704 <HAL_GPIO_Init+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x1f2>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	@ (80026f0 <HAL_GPIO_Init+0x2ec>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <HAL_GPIO_Init+0x304>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1a      	ldr	r2, [pc, #104]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f aea2 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
=======
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a2 	beq.w	8002736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b57      	ldr	r3, [pc, #348]	@ (8002754 <HAL_GPIO_Init+0x2e8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	4a56      	ldr	r2, [pc, #344]	@ (8002754 <HAL_GPIO_Init+0x2e8>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002600:	6453      	str	r3, [r2, #68]	@ 0x44
 8002602:	4b54      	ldr	r3, [pc, #336]	@ (8002754 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_GPIO_Init+0x2ec>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a49      	ldr	r2, [pc, #292]	@ (800275c <HAL_GPIO_Init+0x2f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d019      	beq.n	800266e <HAL_GPIO_Init+0x202>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <HAL_GPIO_Init+0x2f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x1fe>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a47      	ldr	r2, [pc, #284]	@ (8002764 <HAL_GPIO_Init+0x2f8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00d      	beq.n	8002666 <HAL_GPIO_Init+0x1fa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a46      	ldr	r2, [pc, #280]	@ (8002768 <HAL_GPIO_Init+0x2fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x1f6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a45      	ldr	r2, [pc, #276]	@ (800276c <HAL_GPIO_Init+0x300>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_GPIO_Init+0x1f2>
 800265a:	2304      	movs	r3, #4
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800265e:	2307      	movs	r3, #7
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4935      	ldr	r1, [pc, #212]	@ (8002758 <HAL_GPIO_Init+0x2ec>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268e:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_GPIO_Init+0x304>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002770 <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <HAL_GPIO_Init+0x304>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026dc:	4a24      	ldr	r2, [pc, #144]	@ (8002770 <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e2:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_GPIO_Init+0x304>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002706:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270c:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <HAL_GPIO_Init+0x304>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002730:	4a0f      	ldr	r2, [pc, #60]	@ (8002770 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f aea2 	bls.w	8002488 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_WritePin>:
=======
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
=======
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
=======
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8002728:	e003      	b.n	8002732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_I2C_Init>:
=======
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
=======
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< Updated upstream
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e12b      	b.n	80029aa <HAL_I2C_Init+0x26a>
=======
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
>>>>>>> Stashed changes
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd3c 	bl	80011e4 <HAL_I2C_MspInit>
=======
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fcb2 	bl	8001138 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 fc60 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a81      	ldr	r2, [pc, #516]	@ (80029b4 <HAL_I2C_Init+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x84>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a80      	ldr	r2, [pc, #512]	@ (80029b8 <HAL_I2C_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	@ (80029bc <HAL_I2C_Init+0x27c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0e7      	b.n	80029aa <HAL_I2C_Init+0x26a>
=======
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f001 fc60 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	@ (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	@ (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
>>>>>>> Stashed changes
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< Updated upstream
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a78      	ldr	r2, [pc, #480]	@ (80029c0 <HAL_I2C_Init+0x280>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]
=======
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	@ (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< Updated upstream
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
=======
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< Updated upstream
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a6a      	ldr	r2, [pc, #424]	@ (80029b4 <HAL_I2C_Init+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xd4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xe8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a69      	ldr	r2, [pc, #420]	@ (80029c4 <HAL_I2C_Init+0x284>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]
=======
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	@ (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	@ (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< Updated upstream
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	495c      	ldr	r1, [pc, #368]	@ (80029b4 <HAL_I2C_Init+0x274>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d819      	bhi.n	800287c <HAL_I2C_Init+0x13c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800285c:	400b      	ands	r3, r1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_I2C_Init+0x138>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e051      	b.n	800291c <HAL_I2C_Init+0x1dc>
 8002878:	2304      	movs	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x168>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x18e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x196>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]
=======
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	@ (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< Updated upstream
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
=======
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< Updated upstream
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]
=======
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< Updated upstream
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_I2C_Mem_Write>:
=======
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Mem_Write>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7ff fbf9 	bl	80021d8 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]
=======
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	460b      	mov	r3, r1
 8002a44:	813b      	strh	r3, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a4a:	f7ff fbf9 	bl	8002240 <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80d9 	bne.w	8002ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2319      	movs	r3, #25
 80029fc:	2201      	movs	r2, #1
 80029fe:	496d      	ldr	r1, [pc, #436]	@ (8002bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fc8b 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0cc      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
=======
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	f040 80d9 	bne.w	8002c10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2319      	movs	r3, #25
 8002a64:	2201      	movs	r2, #1
 8002a66:	496d      	ldr	r1, [pc, #436]	@ (8002c1c <HAL_I2C_Mem_Write+0x1ec>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fc8b 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0cc      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_Mem_Write+0x56>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0c5      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
=======
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Mem_Write+0x56>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0c5      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d007      	beq.n	8002aac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< Updated upstream
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2221      	movs	r2, #33	@ 0x21
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a3a      	ldr	r2, [r7, #32]
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a86:	88f8      	ldrh	r0, [r7, #6]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4603      	mov	r3, r0
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fac2 	bl	8003020 <I2C_RequestMemoryWrite>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d052      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e081      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
=======
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2221      	movs	r2, #33	@ 0x21
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2240      	movs	r2, #64	@ 0x40
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a4d      	ldr	r2, [pc, #308]	@ (8002c20 <HAL_I2C_Mem_Write+0x1f0>)
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aee:	88f8      	ldrh	r0, [r7, #6]
 8002af0:	893a      	ldrh	r2, [r7, #8]
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4603      	mov	r3, r0
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fac2 	bl	8003088 <I2C_RequestMemoryWrite>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d052      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e081      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> Stashed changes
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fd50 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
=======
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fd50 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> Stashed changes
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< Updated upstream
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_I2C_Mem_Write+0x180>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1aa      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0xde>
=======
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11b      	bne.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1aa      	bne.n	8002b0e <HAL_I2C_Mem_Write+0xde>
>>>>>>> Stashed changes
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fd43 	bl	80035e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e016      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
=======
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fd43 	bl	8003648 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e016      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> Stashed changes
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< Updated upstream
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
=======
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	00100002 	.word	0x00100002
 8002bb8:	ffff0000 	.word	0xffff0000

08002bbc <HAL_I2C_Mem_Read>:
=======
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	00100002 	.word	0x00100002
 8002c20:	ffff0000 	.word	0xffff0000

08002c24 <HAL_I2C_Mem_Read>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	@ 0x30
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd6:	f7ff faff 	bl	80021d8 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24
=======
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	@ 0x30
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c3e:	f7ff faff 	bl	8002240 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	@ 0x24
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	f040 8214 	bne.w	8003012 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2319      	movs	r3, #25
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	497b      	ldr	r1, [pc, #492]	@ (8002de0 <HAL_I2C_Mem_Read+0x224>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb91 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	e207      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	f040 8214 	bne.w	800307a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2319      	movs	r3, #25
 8002c58:	2201      	movs	r2, #1
 8002c5a:	497b      	ldr	r1, [pc, #492]	@ (8002e48 <HAL_I2C_Mem_Read+0x224>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fb91 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e207      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_I2C_Mem_Read+0x56>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e200      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d007      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
=======
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x56>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e200      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d007      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< Updated upstream
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2222      	movs	r2, #34	@ 0x22
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2240      	movs	r2, #64	@ 0x40
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a5b      	ldr	r2, [pc, #364]	@ (8002de4 <HAL_I2C_Mem_Read+0x228>)
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7a:	88f8      	ldrh	r0, [r7, #6]
 8002c7c:	893a      	ldrh	r2, [r7, #8]
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4603      	mov	r3, r0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa5e 	bl	800314c <I2C_RequestMemoryRead>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1bc      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e190      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d11b      	bne.n	8002d0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e170      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d11b      	bne.n	8002d4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	e150      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
=======
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2222      	movs	r2, #34	@ 0x22
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2240      	movs	r2, #64	@ 0x40
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a5b      	ldr	r2, [pc, #364]	@ (8002e4c <HAL_I2C_Mem_Read+0x228>)
 8002ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce2:	88f8      	ldrh	r0, [r7, #6]
 8002ce4:	893a      	ldrh	r2, [r7, #8]
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa5e 	bl	80031b4 <I2C_RequestMemoryRead>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1bc      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d113      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e190      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d11b      	bne.n	8002d72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e170      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d11b      	bne.n	8002db2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	e150      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
>>>>>>> Stashed changes
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< Updated upstream
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d60:	e144      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	f200 80f1 	bhi.w	8002f4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d123      	bne.n	8002dbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fc79 	bl	8003670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e145      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dc8:	e144      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	f200 80f1 	bhi.w	8002fb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d123      	bne.n	8002e24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fc79 	bl	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e145      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< Updated upstream
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dba:	e117      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d14e      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4906      	ldr	r1, [pc, #24]	@ (8002de8 <HAL_I2C_Mem_Read+0x22c>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 faa4 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e11a      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
 8002dde:	bf00      	nop
 8002de0:	00100002 	.word	0x00100002
 8002de4:	ffff0000 	.word	0xffff0000
 8002de8:	00010004 	.word	0x00010004
=======
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e22:	e117      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d14e      	bne.n	8002eca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e32:	2200      	movs	r2, #0
 8002e34:	4906      	ldr	r1, [pc, #24]	@ (8002e50 <HAL_I2C_Mem_Read+0x22c>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 faa4 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e11a      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
 8002e46:	bf00      	nop
 8002e48:	00100002 	.word	0x00100002
 8002e4c:	ffff0000 	.word	0xffff0000
 8002e50:	00010004 	.word	0x00010004
>>>>>>> Stashed changes
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< Updated upstream
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e60:	e0c4      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
=======
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ec8:	e0c4      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
>>>>>>> Stashed changes
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	2200      	movs	r2, #0
 8002e6a:	496c      	ldr	r1, [pc, #432]	@ (800301c <HAL_I2C_Mem_Read+0x460>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa55 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cb      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	496c      	ldr	r1, [pc, #432]	@ (8003084 <HAL_I2C_Mem_Read+0x460>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fa55 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cb      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< Updated upstream
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4955      	ldr	r1, [pc, #340]	@ (800301c <HAL_I2C_Mem_Read+0x460>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa27 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e09d      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4955      	ldr	r1, [pc, #340]	@ (8003084 <HAL_I2C_Mem_Read+0x460>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fa27 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e09d      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< Updated upstream
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f4c:	e04e      	b.n	8002fec <HAL_I2C_Mem_Read+0x430>
=======
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fb4:	e04e      	b.n	8003054 <HAL_I2C_Mem_Read+0x430>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fb8c 	bl	8003670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e058      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fb8c 	bl	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e058      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< Updated upstream
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d124      	bne.n	8002fec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f aeb6 	bne.w	8002d62 <HAL_I2C_Mem_Read+0x1a6>
=======
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d124      	bne.n	8003054 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	2b03      	cmp	r3, #3
 8003010:	d107      	bne.n	8003022 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003020:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f aeb6 	bne.w	8002dca <HAL_I2C_Mem_Read+0x1a6>
>>>>>>> Stashed changes
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< Updated upstream
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_I2C_Mem_Read+0x458>
=======
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_I2C_Mem_Read+0x458>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	@ 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	00010004 	.word	0x00010004

08003020 <I2C_RequestMemoryWrite>:
=======
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	@ 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	00010004 	.word	0x00010004

08003088 <I2C_RequestMemoryWrite>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2200      	movs	r2, #0
 8003052:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f960 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003070:	d103      	bne.n	800307a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e05f      	b.n	800313e <I2C_RequestMemoryWrite+0x11e>
=======
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	460b      	mov	r3, r1
 800309c:	813b      	strh	r3, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f960 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d8:	d103      	bne.n	80030e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e05f      	b.n	80031a6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> Stashed changes
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< Updated upstream
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800308c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	492d      	ldr	r1, [pc, #180]	@ (8003148 <I2C_RequestMemoryWrite+0x128>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f9bb 	bl	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04c      	b.n	800313e <I2C_RequestMemoryWrite+0x11e>
=======
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	492d      	ldr	r1, [pc, #180]	@ (80031b0 <I2C_RequestMemoryWrite+0x128>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f9bb 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04c      	b.n	80031a6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> Stashed changes
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< Updated upstream
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fa46 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02b      	b.n	800313e <I2C_RequestMemoryWrite+0x11e>
=======
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa46 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e02b      	b.n	80031a6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]
 80030f6:	e021      	b.n	800313c <I2C_RequestMemoryWrite+0x11c>
=======
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e021      	b.n	80031a4 <I2C_RequestMemoryWrite+0x11c>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa20 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b04      	cmp	r3, #4
 800311c:	d107      	bne.n	800312e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e005      	b.n	800313e <I2C_RequestMemoryWrite+0x11e>
=======
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b29b      	uxth	r3, r3
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa20 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2b04      	cmp	r3, #4
 8003184:	d107      	bne.n	8003196 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e005      	b.n	80031a6 <I2C_RequestMemoryWrite+0x11e>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 8003132:	893b      	ldrh	r3, [r7, #8]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	00010002 	.word	0x00010002

0800314c <I2C_RequestMemoryRead>:
=======
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	00010002 	.word	0x00010002

080031b4 <I2C_RequestMemoryRead>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	460b      	mov	r3, r1
 8003160:	813b      	strh	r3, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2200      	movs	r2, #0
 800318e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f8c2 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ac:	d103      	bne.n	80031b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0aa      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	460b      	mov	r3, r1
 80031c8:	813b      	strh	r3, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f8c2 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d103      	bne.n	800321e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0aa      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< Updated upstream
 80031ba:	897b      	ldrh	r3, [r7, #10]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	4952      	ldr	r1, [pc, #328]	@ (8003318 <I2C_RequestMemoryRead+0x1cc>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f91d 	bl	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e097      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	6a3a      	ldr	r2, [r7, #32]
 8003236:	4952      	ldr	r1, [pc, #328]	@ (8003380 <I2C_RequestMemoryRead+0x1cc>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f91d 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e097      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< Updated upstream
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f8:	6a39      	ldr	r1, [r7, #32]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f9a8 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b04      	cmp	r3, #4
 800320c:	d107      	bne.n	800321e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e076      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	6a39      	ldr	r1, [r7, #32]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f9a8 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	2b04      	cmp	r3, #4
 8003274:	d107      	bne.n	8003286 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e076      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	e021      	b.n	8003278 <I2C_RequestMemoryRead+0x12c>
=======
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	e021      	b.n	80032e0 <I2C_RequestMemoryRead+0x12c>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003244:	6a39      	ldr	r1, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f982 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	2b04      	cmp	r3, #4
 8003258:	d107      	bne.n	800326a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e050      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 800329c:	893b      	ldrh	r3, [r7, #8]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f982 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e050      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]
=======
 80032d6:	893b      	ldrh	r3, [r7, #8]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8003278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327a:	6a39      	ldr	r1, [r7, #32]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f967 	bl	8003550 <I2C_WaitOnTXEFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	2b04      	cmp	r3, #4
 800328e:	d107      	bne.n	80032a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e035      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 80032e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e2:	6a39      	ldr	r1, [r7, #32]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f967 	bl	80035b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e035      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< Updated upstream
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f82b 	bl	800331c <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032da:	d103      	bne.n	80032e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e013      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
=======
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800331a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2200      	movs	r2, #0
 8003324:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f82b 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	d103      	bne.n	800334c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e013      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
>>>>>>> Stashed changes
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
<<<<<<< Updated upstream
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	6a3a      	ldr	r2, [r7, #32]
 80032fc:	4906      	ldr	r1, [pc, #24]	@ (8003318 <I2C_RequestMemoryRead+0x1cc>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f886 	bl	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	00010002 	.word	0x00010002

0800331c <I2C_WaitOnFlagUntilTimeout>:
=======
 8003350:	897b      	ldrh	r3, [r7, #10]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	6a3a      	ldr	r2, [r7, #32]
 8003364:	4906      	ldr	r1, [pc, #24]	@ (8003380 <I2C_RequestMemoryRead+0x1cc>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f886 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332c:	e048      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d044      	beq.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
    	if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fe ff4f 	bl	80021d8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d139      	bne.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10d      	bne.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	e00c      	b.n	800338c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	429a      	cmp	r2, r3
 8003390:	d116      	bne.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e023      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10d      	bne.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	e00c      	b.n	8003400 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	43da      	mvns	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	429a      	cmp	r2, r3
 8003404:	d093      	beq.n	800332e <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	e048      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d044      	beq.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
    	if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe ff4f 	bl	8002240 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d139      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e023      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	e00c      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d093      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341e:	e071      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342e:	d123      	bne.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e067      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	e071      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d123      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d041      	beq.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fe feaa 	bl	80021d8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d136      	bne.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10c      	bne.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	e00b      	b.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e021      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10c      	bne.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e00b      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f af6d 	bne.w	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d041      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe feaa 	bl	8002240 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d136      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10c      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e00b      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af6d 	bne.w	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355c:	e034      	b.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f8e3 	bl	800372a <I2C_IsAcknowledgeFailed>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e034      	b.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f8e3 	bl	8003792 <I2C_IsAcknowledgeFailed>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d028      	beq.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe fe2f 	bl	80021d8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b80      	cmp	r3, #128	@ 0x80
 8003598:	d016      	beq.n	80035c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e007      	b.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d1c3      	bne.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d028      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fe fe2f 	bl	8002240 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11d      	bne.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d016      	beq.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d1c3      	bne.n	80035c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ec:	e034      	b.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f89b 	bl	800372a <I2C_IsAcknowledgeFailed>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e034      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f89b 	bl	8003792 <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d028      	beq.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe fde7 	bl	80021d8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11d      	bne.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d016      	beq.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e007      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d1c3      	bne.n	80035ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d028      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fde7 	bl	8002240 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d016      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d1c3      	bne.n	8003656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800367c:	e049      	b.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b10      	cmp	r3, #16
 800368a:	d119      	bne.n	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0210 	mvn.w	r2, #16
 8003694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e030      	b.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
=======
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036e4:	e049      	b.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d119      	bne.n	8003728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0210 	mvn.w	r2, #16
 80036fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e030      	b.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 80036c0:	f7fe fd8a 	bl	80021d8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d016      	beq.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e007      	b.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	d1ae      	bne.n	800367e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
=======
 8003728:	f7fe fd8a 	bl	8002240 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11d      	bne.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	d016      	beq.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e007      	b.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b40      	cmp	r3, #64	@ 0x40
 8003786:	d1ae      	bne.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <I2C_IsAcknowledgeFailed>:
=======
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <I2C_IsAcknowledgeFailed>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003740:	d11b      	bne.n	800377a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800374a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f043 0204 	orr.w	r2, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_RCC_OscConfig>:
=======
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a8:	d11b      	bne.n	80037e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
=======
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e267      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
=======
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e267      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d075      	beq.n	8003892 <HAL_RCC_OscConfig+0x10a>
=======
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d075      	beq.n	80038fa <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 80037a6:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00c      	beq.n	80037cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b85      	ldr	r3, [pc, #532]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d112      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b82      	ldr	r3, [pc, #520]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05b      	beq.n	8003890 <HAL_RCC_OscConfig+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e242      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
=======
 800380e:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b85      	ldr	r3, [pc, #532]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003822:	2b08      	cmp	r3, #8
 8003824:	d112      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b82      	ldr	r3, [pc, #520]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b7e      	ldr	r3, [pc, #504]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05b      	beq.n	80038f8 <HAL_RCC_OscConfig+0x108>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d157      	bne.n	80038f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e242      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x74>
 80037ee:	4b76      	ldr	r3, [pc, #472]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a75      	ldr	r2, [pc, #468]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x98>
 8003806:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6f      	ldr	r2, [pc, #444]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6c      	ldr	r2, [pc, #432]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 8003820:	4b69      	ldr	r3, [pc, #420]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a68      	ldr	r2, [pc, #416]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b66      	ldr	r3, [pc, #408]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a65      	ldr	r2, [pc, #404]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fcca 	bl	80021d8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fcc6 	bl	80021d8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e207      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xc0>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
=======
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x74>
 8003856:	4b76      	ldr	r3, [pc, #472]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x98>
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6f      	ldr	r2, [pc, #444]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003888:	4b69      	ldr	r3, [pc, #420]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a68      	ldr	r2, [pc, #416]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b66      	ldr	r3, [pc, #408]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a65      	ldr	r2, [pc, #404]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fcca 	bl	8002240 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe fcc6 	bl	8002240 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e207      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xc0>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003868:	f7fe fcb6 	bl	80021d8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe fcb2 	bl	80021d8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1f3      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b51      	ldr	r3, [pc, #324]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0xe8>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
=======
 80038d0:	f7fe fcb6 	bl	8002240 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe fcb2 	bl	8002240 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	@ 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1f3      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b51      	ldr	r3, [pc, #324]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0xe8>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x1de>
=======
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d063      	beq.n	80039ce <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 800389e:	4b4a      	ldr	r3, [pc, #296]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b47      	ldr	r3, [pc, #284]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b41      	ldr	r3, [pc, #260]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1c7      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
=======
 8003906:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11c      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b44      	ldr	r3, [pc, #272]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	4b41      	ldr	r3, [pc, #260]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1c7      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4937      	ldr	r1, [pc, #220]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
=======
 8003942:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4937      	ldr	r1, [pc, #220]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	e03a      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_RCC_OscConfig+0x244>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fc6b 	bl	80021d8 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fc67 	bl	80021d8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1a8      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2b      	ldr	r3, [pc, #172]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x17e>
=======
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003960:	4b34      	ldr	r3, [pc, #208]	@ (8003a34 <HAL_RCC_OscConfig+0x244>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe fc6b 	bl	8002240 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe fc67 	bl	8002240 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1a8      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8003924:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4925      	ldr	r1, [pc, #148]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
=======
 800398c:	4b28      	ldr	r3, [pc, #160]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4925      	ldr	r1, [pc, #148]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 800393a:	4b24      	ldr	r3, [pc, #144]	@ (80039cc <HAL_RCC_OscConfig+0x244>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fc4a 	bl	80021d8 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe fc46 	bl	80021d8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e187      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1c0>
=======
 80039a2:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <HAL_RCC_OscConfig+0x244>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fc4a 	bl	8002240 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe fc46 	bl	8002240 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e187      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_RCC_OscConfig+0x258>
=======
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d036      	beq.n	8003a48 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <HAL_RCC_OscConfig+0x248>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe fc2a 	bl	80021d8 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe fc26 	bl	80021d8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e167      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCC_OscConfig+0x240>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x200>
 80039a6:	e01b      	b.n	80039e0 <HAL_RCC_OscConfig+0x258>
=======
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <HAL_RCC_OscConfig+0x248>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe fc2a 	bl	8002240 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fe fc26 	bl	8002240 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e167      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x200>
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_RCC_OscConfig+0x248>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fe fc13 	bl	80021d8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	e00e      	b.n	80039d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fe fc0f 	bl	80021d8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d907      	bls.n	80039d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e150      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470000 	.word	0x42470000
 80039d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b88      	ldr	r3, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ea      	bne.n	80039b6 <HAL_RCC_OscConfig+0x22e>
=======
 8003a10:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_RCC_OscConfig+0x248>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fc13 	bl	8002240 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00e      	b.n	8003a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fc0f 	bl	8002240 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d907      	bls.n	8003a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e150      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	42470000 	.word	0x42470000
 8003a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ea      	bne.n	8003a1e <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8097 	beq.w	8003b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
=======
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8097 	beq.w	8003b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80039f2:	4b81      	ldr	r3, [pc, #516]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b77      	ldr	r3, [pc, #476]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b74      	ldr	r3, [pc, #464]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a73      	ldr	r2, [pc, #460]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe fbcf 	bl	80021d8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe fbcb 	bl	80021d8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e10c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b6a      	ldr	r3, [pc, #424]	@ (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2b6>
=======
 8003a5a:	4b81      	ldr	r3, [pc, #516]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a76:	4b7a      	ldr	r3, [pc, #488]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b77      	ldr	r3, [pc, #476]	@ (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a92:	4b74      	ldr	r3, [pc, #464]	@ (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	@ (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fbcf 	bl	8002240 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe fbcb 	bl	8002240 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e10c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ea>
 8003a64:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a63      	ldr	r2, [pc, #396]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a70:	e01c      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x30c>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a86:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a94:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a57      	ldr	r2, [pc, #348]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	4b55      	ldr	r3, [pc, #340]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4a54      	ldr	r2, [pc, #336]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0304 	bic.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fb90 	bl	80021d8 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fe fb8c 	bl	80021d8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0cb      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ee      	beq.n	8003abc <HAL_RCC_OscConfig+0x334>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x382>
=======
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x2ea>
 8003acc:	4b64      	ldr	r3, [pc, #400]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	4a63      	ldr	r2, [pc, #396]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x30c>
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aee:	4b5c      	ldr	r3, [pc, #368]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003afc:	4b58      	ldr	r3, [pc, #352]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	4a57      	ldr	r2, [pc, #348]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b08:	4b55      	ldr	r3, [pc, #340]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	4a54      	ldr	r2, [pc, #336]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe fb90 	bl	8002240 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe fb8c 	bl	8002240 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0cb      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b49      	ldr	r3, [pc, #292]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCC_OscConfig+0x334>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x382>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8003ae0:	f7fe fb7a 	bl	80021d8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fb76 	bl	80021d8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b5      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x360>
=======
 8003b48:	f7fe fb7a 	bl	8002240 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe fb76 	bl	8002240 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0b5      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	4b3e      	ldr	r3, [pc, #248]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ee      	bne.n	8003b50 <HAL_RCC_OscConfig+0x360>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	4a38      	ldr	r2, [pc, #224]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b39      	ldr	r3, [pc, #228]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	4a38      	ldr	r2, [pc, #224]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a1 	beq.w	8003c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b26:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d05c      	beq.n	8003bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d141      	bne.n	8003bbe <HAL_RCC_OscConfig+0x436>
=======
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a1 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8e:	4b34      	ldr	r3, [pc, #208]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d05c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d141      	bne.n	8003c26 <HAL_RCC_OscConfig+0x436>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8003b3a:	4b31      	ldr	r3, [pc, #196]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fb4a 	bl	80021d8 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fb46 	bl	80021d8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e087      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
=======
 8003ba2:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fb4a 	bl	8002240 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fb46 	bl	8002240 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e087      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
=======
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	491b      	ldr	r1, [pc, #108]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fb1f 	bl	80021d8 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe fb1b 	bl	80021d8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e05c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x416>
 8003bbc:	e054      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
=======
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fb1f 	bl	8002240 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fb1b 	bl	8002240 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e05c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x416>
 8003c24:	e054      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fb08 	bl	80021d8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fb04 	bl	80021d8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e045      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x444>
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
=======
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fb08 	bl	8002240 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe fb04 	bl	8002240 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e045      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x444>
 8003c52:	e03d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e038      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060
=======
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e038      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42470060 	.word	0x42470060
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_OscConfig+0x4ec>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
=======
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d028      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d121      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d11a      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
=======
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d028      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d121      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800

08003c78 <HAL_RCC_ClockConfig>:
=======
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
=======
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0cc      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cc      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003c8c:	4b68      	ldr	r3, [pc, #416]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b65      	ldr	r3, [pc, #404]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]
=======
 8003cf4:	4b68      	ldr	r3, [pc, #416]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90c      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b65      	ldr	r3, [pc, #404]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003ca2:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b8      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003d0a:	4b63      	ldr	r3, [pc, #396]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b8      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
=======
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
=======
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b59      	ldr	r3, [pc, #356]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a58      	ldr	r2, [pc, #352]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b53      	ldr	r3, [pc, #332]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a52      	ldr	r2, [pc, #328]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8003cf0:	4b50      	ldr	r3, [pc, #320]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494d      	ldr	r1, [pc, #308]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
=======
 8003d58:	4b50      	ldr	r3, [pc, #320]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	494d      	ldr	r1, [pc, #308]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
=======
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d044      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e067      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003dae:	4b3b      	ldr	r3, [pc, #236]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8003d56:	4b37      	ldr	r3, [pc, #220]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4934      	ldr	r1, [pc, #208]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe fa36 	bl	80021d8 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe fa32 	bl	80021d8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
=======
 8003dbe:	4b37      	ldr	r3, [pc, #220]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4934      	ldr	r1, [pc, #208]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fe fa36 	bl	8002240 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fe fa32 	bl	8002240 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 020c 	and.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d1eb      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
=======
 8003e00:	4b25      	ldr	r3, [pc, #148]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20c      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e032      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003e16:	4b20      	ldr	r3, [pc, #128]	@ (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4916      	ldr	r1, [pc, #88]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
=======
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4916      	ldr	r1, [pc, #88]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490e      	ldr	r1, [pc, #56]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
=======
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	490e      	ldr	r1, [pc, #56]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8003dfe:	f000 f821 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	490a      	ldr	r1, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	5ccb      	ldrb	r3, [r1, r3]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a09      	ldr	r2, [pc, #36]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe f996 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	080096d4 	.word	0x080096d4
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000004 	.word	0x20000004

08003e44 <HAL_RCC_GetSysClockFreq>:
=======
 8003e66:	f000 f821 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490a      	ldr	r1, [pc, #40]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe f996 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08007938 	.word	0x08007938
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004

08003eac <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b094      	sub	sp, #80	@ 0x50
 8003e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e54:	2300      	movs	r3, #0
 8003e56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5c:	4b79      	ldr	r3, [pc, #484]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x40>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f200 80e1 	bhi.w	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e76:	e0db      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b094      	sub	sp, #80	@ 0x50
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec4:	4b79      	ldr	r3, [pc, #484]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d00d      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x40>
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	f200 80e1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ede:	e0db      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8003e78:	4b73      	ldr	r3, [pc, #460]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e7c:	e0db      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003ee0:	4b73      	ldr	r3, [pc, #460]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ee4:	e0db      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8003e7e:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e82:	e0d8      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003ee6:	4b73      	ldr	r3, [pc, #460]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8003e84:	4b6f      	ldr	r3, [pc, #444]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d063      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ea4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4621      	mov	r1, r4
 8003ed0:	1a51      	subs	r1, r2, r1
 8003ed2:	6139      	str	r1, [r7, #16]
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	018b      	lsls	r3, r1, #6
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	018a      	lsls	r2, r1, #6
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8003efc:	4659      	mov	r1, fp
 8003efe:	eb63 0901 	sbc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	462b      	mov	r3, r5
 8003f24:	eb49 0303 	adc.w	r3, r9, r3
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f36:	4629      	mov	r1, r5
 8003f38:	024b      	lsls	r3, r1, #9
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f40:	4621      	mov	r1, r4
 8003f42:	024a      	lsls	r2, r1, #9
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f54:	f7fc fea0 	bl	8000c98 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f60:	e058      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8003eec:	4b6f      	ldr	r3, [pc, #444]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ef4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b6a      	ldr	r3, [pc, #424]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	2200      	movs	r2, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4621      	mov	r1, r4
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ebb2 0801 	subs.w	r8, r2, r1
 8003f64:	4659      	mov	r1, fp
 8003f66:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	eb18 0303 	adds.w	r3, r8, r3
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	eb49 0303 	adc.w	r3, r9, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	024b      	lsls	r3, r1, #9
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa8:	4621      	mov	r1, r4
 8003faa:	024a      	lsls	r2, r1, #9
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fbc:	f7fc fe4c 	bl	8000c58 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc8:	e058      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8003f62:	4b38      	ldr	r3, [pc, #224]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0159      	lsls	r1, r3, #5
 8003f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8e:	0150      	lsls	r0, r2, #5
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4641      	mov	r1, r8
 8003f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	eb45 0303 	adc.w	r3, r5, r3
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	028a      	lsls	r2, r1, #10
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	61fa      	str	r2, [r7, #28]
 8004004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004008:	f7fc fe46 	bl	8000c98 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8003fca:	4b38      	ldr	r3, [pc, #224]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb63 0b01 	sbc.w	fp, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800401c:	ebb2 040a 	subs.w	r4, r2, sl
 8004020:	eb63 050b 	sbc.w	r5, r3, fp
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	464b      	mov	r3, r9
 8004040:	eb45 0303 	adc.w	r3, r5, r3
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	f7fc fdf2 	bl	8000c58 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800408c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800408e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004038:	4618      	mov	r0, r3
 800403a:	3750      	adds	r7, #80	@ 0x50
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
=======
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800409a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3750      	adds	r7, #80	@ 0x50
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000000 	.word	0x20000000

08004068 <HAL_RCC_GetPCLK1Freq>:
=======
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	080096e4 	.word	0x080096e4

08004090 <HAL_RCC_GetPCLK2Freq>:
=======
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08007948 	.word	0x08007948

080040f8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	080096e4 	.word	0x080096e4

080040b8 <HAL_UART_Init>:
=======
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	08007948 	.word	0x08007948

08004120 <HAL_UART_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_UART_Init+0x98>
=======
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e042      	b.n	80041b8 <HAL_UART_Init+0x98>
>>>>>>> Stashed changes
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd ffa2 	bl	8002028 <HAL_UART_MspInit>
=======
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd ffa2 	bl	8002090 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	@ 0x24
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f973 	bl	80043e8 <UART_SetConfig>
=======
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	@ 0x24
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f973 	bl	8004450 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
=======
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b20      	cmp	r3, #32
 8004176:	d175      	bne.n	8004264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Transmit+0x2c>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e06e      	b.n	8004266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2221      	movs	r2, #33	@ 0x21
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004196:	f7fe f81f 	bl	80021d8 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b0:	d108      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e003      	b.n	80041cc <HAL_UART_Transmit+0x74>
=======
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	@ 0x28
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d175      	bne.n	80042cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_UART_Transmit+0x2c>
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e06e      	b.n	80042ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2221      	movs	r2, #33	@ 0x21
 80041fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fe:	f7fe f81f 	bl	8002240 <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004218:	d108      	bne.n	800422c <HAL_UART_Transmit+0x6c>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e003      	b.n	8004234 <HAL_UART_Transmit+0x74>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041cc:	e02e      	b.n	800422c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	@ 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f848 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e03a      	b.n	8004266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	3302      	adds	r3, #2
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e007      	b.n	800421e <HAL_UART_Transmit+0xc6>
=======
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004234:	e02e      	b.n	8004294 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2180      	movs	r1, #128	@ 0x80
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f848 	bl	80042d6 <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e03a      	b.n	80042ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800426c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	3302      	adds	r3, #2
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e007      	b.n	8004286 <HAL_UART_Transmit+0xc6>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1cb      	bne.n	80041ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2140      	movs	r1, #64	@ 0x40
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f814 	bl	800426e <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e006      	b.n	8004266 <HAL_UART_Transmit+0x10e>
=======
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1cb      	bne.n	8004236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	2140      	movs	r1, #64	@ 0x40
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f814 	bl	80042d6 <UART_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e006      	b.n	80042ce <HAL_UART_Transmit+0x10e>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_UART_Transmit+0x10e>
=======
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <HAL_UART_Transmit+0x10e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_WaitOnFlagUntilTimeout>:
=======
 80042cc:	2302      	movs	r3, #2
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	e03b      	b.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d037      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fd ffa6 	bl	80021d8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <UART_WaitOnFlagUntilTimeout+0x30>
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e03a      	b.n	8004318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b80      	cmp	r3, #128	@ 0x80
 80042b4:	d020      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d01d      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d116      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	697b      	ldr	r3, [r7, #20]
=======
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e6:	e03b      	b.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d037      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd ffa6 	bl	8002240 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <UART_WaitOnFlagUntilTimeout+0x30>
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e03a      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b80      	cmp	r3, #128	@ 0x80
 800431c:	d020      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d01d      	beq.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b08      	cmp	r3, #8
 8004330:	d116      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f81d 	bl	8004320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2208      	movs	r2, #8
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e00f      	b.n	8004318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d0b4      	beq.n	8004280 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f81d 	bl	8004388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2208      	movs	r2, #8
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e00f      	b.n	8004380 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4013      	ands	r3, r2
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	429a      	cmp	r2, r3
 800437c:	d0b4      	beq.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_EndRxTransfer>:
=======
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8004320:	b480      	push	{r7}
 8004322:	b095      	sub	sp, #84	@ 0x54
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004348:	643a      	str	r2, [r7, #64]	@ 0x40
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800434e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3314      	adds	r3, #20
 8004362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	61fb      	str	r3, [r7, #28]
   return(result);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800437c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	2b01      	cmp	r3, #1
 8004396:	d119      	bne.n	80043cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043b8:	61ba      	str	r2, [r7, #24]
 80043ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	613b      	str	r3, [r7, #16]
   return(result);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_EndRxTransfer+0x78>
=======
 8004388:	b480      	push	{r7}
 800438a:	b095      	sub	sp, #84	@ 0x54
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3314      	adds	r3, #20
 80043ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d119      	bne.n	8004434 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	647b      	str	r3, [r7, #68]	@ 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004420:	61ba      	str	r2, [r7, #24]
 8004422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	6979      	ldr	r1, [r7, #20]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	613b      	str	r3, [r7, #16]
   return(result);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_EndRxTransfer+0x78>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043da:	bf00      	nop
 80043dc:	3754      	adds	r7, #84	@ 0x54
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <UART_SetConfig>:
=======
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004442:	bf00      	nop
 8004444:	3754      	adds	r7, #84	@ 0x54
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b0c0      	sub	sp, #256	@ 0x100
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 8004450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004454:	b0c0      	sub	sp, #256	@ 0x100
 8004456:	af00      	add	r7, sp, #0
 8004458:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	ea40 0301 	orr.w	r3, r0, r1
 8004410:	6113      	str	r3, [r2, #16]
=======
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	68d9      	ldr	r1, [r3, #12]
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	ea40 0301 	orr.w	r3, r0, r1
 8004478:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	431a      	orrs	r2, r3
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004440:	f021 010c 	bic.w	r1, r1, #12
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800444e:	430b      	orrs	r3, r1
 8004450:	60d3      	str	r3, [r2, #12]
=======
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	431a      	orrs	r2, r3
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044a8:	f021 010c 	bic.w	r1, r1, #12
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044b6:	430b      	orrs	r3, r1
 80044b8:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	ea40 0301 	orr.w	r3, r0, r1
 800446e:	6153      	str	r3, [r2, #20]
=======
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	6999      	ldr	r1, [r3, #24]
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	ea40 0301 	orr.w	r3, r0, r1
 80044d6:	6153      	str	r3, [r2, #20]
>>>>>>> Stashed changes
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8f      	ldr	r3, [pc, #572]	@ (80046b4 <UART_SetConfig+0x2cc>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d005      	beq.n	8004488 <UART_SetConfig+0xa0>
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8d      	ldr	r3, [pc, #564]	@ (80046b8 <UART_SetConfig+0x2d0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d104      	bne.n	8004492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7ff fe02 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 800448c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004490:	e003      	b.n	800449a <UART_SetConfig+0xb2>
=======
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b8f      	ldr	r3, [pc, #572]	@ (800471c <UART_SetConfig+0x2cc>)
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d005      	beq.n	80044f0 <UART_SetConfig+0xa0>
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004720 <UART_SetConfig+0x2d0>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d104      	bne.n	80044fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7ff fe02 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80044f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044f8:	e003      	b.n	8004502 <UART_SetConfig+0xb2>
>>>>>>> Stashed changes
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 8004492:	f7ff fde9 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8004496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a4:	f040 810c 	bne.w	80046c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044c2:	415b      	adcs	r3, r3
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044ca:	4621      	mov	r1, r4
 80044cc:	eb12 0801 	adds.w	r8, r2, r1
 80044d0:	4629      	mov	r1, r5
 80044d2:	eb43 0901 	adc.w	r9, r3, r1
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ea:	4690      	mov	r8, r2
 80044ec:	4699      	mov	r9, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	eb18 0303 	adds.w	r3, r8, r3
 80044f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044f8:	462b      	mov	r3, r5
 80044fa:	eb49 0303 	adc.w	r3, r9, r3
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800450e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004516:	460b      	mov	r3, r1
 8004518:	18db      	adds	r3, r3, r3
 800451a:	653b      	str	r3, [r7, #80]	@ 0x50
 800451c:	4613      	mov	r3, r2
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	657b      	str	r3, [r7, #84]	@ 0x54
 8004524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800452c:	f7fc fbb4 	bl	8000c98 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4b61      	ldr	r3, [pc, #388]	@ (80046bc <UART_SetConfig+0x2d4>)
 8004536:	fba3 2302 	umull	r2, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	011c      	lsls	r4, r3, #4
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800454c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004558:	415b      	adcs	r3, r3
 800455a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800455c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004560:	4641      	mov	r1, r8
 8004562:	eb12 0a01 	adds.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0b01 	adc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	4692      	mov	sl, r2
 8004582:	469b      	mov	fp, r3
 8004584:	4643      	mov	r3, r8
 8004586:	eb1a 0303 	adds.w	r3, sl, r3
 800458a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800458e:	464b      	mov	r3, r9
 8004590:	eb4b 0303 	adc.w	r3, fp, r3
 8004594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045c2:	f7fc fb69 	bl	8000c98 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b3b      	ldr	r3, [pc, #236]	@ (80046bc <UART_SetConfig+0x2d4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	@ 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045e2:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <UART_SetConfig+0x2d4>)
 80045e4:	fba3 2302 	umull	r2, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045f0:	441c      	add	r4, r3
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	1891      	adds	r1, r2, r2
 800460a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800460c:	415b      	adcs	r3, r3
 800460e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004614:	4641      	mov	r1, r8
 8004616:	1851      	adds	r1, r2, r1
 8004618:	6339      	str	r1, [r7, #48]	@ 0x30
 800461a:	4649      	mov	r1, r9
 800461c:	414b      	adcs	r3, r1
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800462c:	4659      	mov	r1, fp
 800462e:	00cb      	lsls	r3, r1, #3
 8004630:	4651      	mov	r1, sl
 8004632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004636:	4651      	mov	r1, sl
 8004638:	00ca      	lsls	r2, r1, #3
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	4603      	mov	r3, r0
 8004640:	4642      	mov	r2, r8
 8004642:	189b      	adds	r3, r3, r2
 8004644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004648:	464b      	mov	r3, r9
 800464a:	460a      	mov	r2, r1
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800467a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800467e:	f7fc fb0b 	bl	8000c98 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <UART_SetConfig+0x2d4>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2164      	movs	r1, #100	@ 0x64
 8004690:	fb01 f303 	mul.w	r3, r1, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	@ 0x32
 800469a:	4a08      	ldr	r2, [pc, #32]	@ (80046bc <UART_SetConfig+0x2d4>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4422      	add	r2, r4
 80046ae:	609a      	str	r2, [r3, #8]
=======
 80044fa:	f7ff fde9 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 80044fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800450c:	f040 810c 	bne.w	8004728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800451a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800451e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	1891      	adds	r1, r2, r2
 8004528:	65b9      	str	r1, [r7, #88]	@ 0x58
 800452a:	415b      	adcs	r3, r3
 800452c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800452e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004532:	4621      	mov	r1, r4
 8004534:	eb12 0801 	adds.w	r8, r2, r1
 8004538:	4629      	mov	r1, r5
 800453a:	eb43 0901 	adc.w	r9, r3, r1
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800454a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004552:	4690      	mov	r8, r2
 8004554:	4699      	mov	r9, r3
 8004556:	4623      	mov	r3, r4
 8004558:	eb18 0303 	adds.w	r3, r8, r3
 800455c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004560:	462b      	mov	r3, r5
 8004562:	eb49 0303 	adc.w	r3, r9, r3
 8004566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004576:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800457a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800457e:	460b      	mov	r3, r1
 8004580:	18db      	adds	r3, r3, r3
 8004582:	653b      	str	r3, [r7, #80]	@ 0x50
 8004584:	4613      	mov	r3, r2
 8004586:	eb42 0303 	adc.w	r3, r2, r3
 800458a:	657b      	str	r3, [r7, #84]	@ 0x54
 800458c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004594:	f7fc fb60 	bl	8000c58 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4b61      	ldr	r3, [pc, #388]	@ (8004724 <UART_SetConfig+0x2d4>)
 800459e:	fba3 2302 	umull	r2, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	011c      	lsls	r4, r3, #4
 80045a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045c0:	415b      	adcs	r3, r3
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045c8:	4641      	mov	r1, r8
 80045ca:	eb12 0a01 	adds.w	sl, r2, r1
 80045ce:	4649      	mov	r1, r9
 80045d0:	eb43 0b01 	adc.w	fp, r3, r1
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e8:	4692      	mov	sl, r2
 80045ea:	469b      	mov	fp, r3
 80045ec:	4643      	mov	r3, r8
 80045ee:	eb1a 0303 	adds.w	r3, sl, r3
 80045f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045f6:	464b      	mov	r3, r9
 80045f8:	eb4b 0303 	adc.w	r3, fp, r3
 80045fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800460c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004614:	460b      	mov	r3, r1
 8004616:	18db      	adds	r3, r3, r3
 8004618:	643b      	str	r3, [r7, #64]	@ 0x40
 800461a:	4613      	mov	r3, r2
 800461c:	eb42 0303 	adc.w	r3, r2, r3
 8004620:	647b      	str	r3, [r7, #68]	@ 0x44
 8004622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800462a:	f7fc fb15 	bl	8000c58 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4611      	mov	r1, r2
 8004634:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <UART_SetConfig+0x2d4>)
 8004636:	fba3 2301 	umull	r2, r3, r3, r1
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	@ 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800464a:	4b36      	ldr	r3, [pc, #216]	@ (8004724 <UART_SetConfig+0x2d4>)
 800464c:	fba3 2302 	umull	r2, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004658:	441c      	add	r4, r3
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004664:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004674:	415b      	adcs	r3, r3
 8004676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800467c:	4641      	mov	r1, r8
 800467e:	1851      	adds	r1, r2, r1
 8004680:	6339      	str	r1, [r7, #48]	@ 0x30
 8004682:	4649      	mov	r1, r9
 8004684:	414b      	adcs	r3, r1
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004694:	4659      	mov	r1, fp
 8004696:	00cb      	lsls	r3, r1, #3
 8004698:	4651      	mov	r1, sl
 800469a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469e:	4651      	mov	r1, sl
 80046a0:	00ca      	lsls	r2, r1, #3
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	4642      	mov	r2, r8
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046d0:	460b      	mov	r3, r1
 80046d2:	18db      	adds	r3, r3, r3
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d6:	4613      	mov	r3, r2
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046e6:	f7fc fab7 	bl	8000c58 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <UART_SetConfig+0x2d4>)
 80046f0:	fba3 1302 	umull	r1, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	2164      	movs	r1, #100	@ 0x64
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	3332      	adds	r3, #50	@ 0x32
 8004702:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <UART_SetConfig+0x2d4>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f003 0207 	and.w	r2, r3, #7
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4422      	add	r2, r4
 8004716:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< Updated upstream
 80046b0:	e106      	b.n	80048c0 <UART_SetConfig+0x4d8>
 80046b2:	bf00      	nop
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046d2:	4642      	mov	r2, r8
 80046d4:	464b      	mov	r3, r9
 80046d6:	1891      	adds	r1, r2, r2
 80046d8:	6239      	str	r1, [r7, #32]
 80046da:	415b      	adcs	r3, r3
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046e2:	4641      	mov	r1, r8
 80046e4:	1854      	adds	r4, r2, r1
 80046e6:	4649      	mov	r1, r9
 80046e8:	eb43 0501 	adc.w	r5, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	00eb      	lsls	r3, r5, #3
 80046f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fa:	00e2      	lsls	r2, r4, #3
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	4643      	mov	r3, r8
 8004702:	18e3      	adds	r3, r4, r3
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004708:	464b      	mov	r3, r9
 800470a:	eb45 0303 	adc.w	r3, r5, r3
 800470e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800472e:	4629      	mov	r1, r5
 8004730:	008b      	lsls	r3, r1, #2
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004738:	4621      	mov	r1, r4
 800473a:	008a      	lsls	r2, r1, #2
 800473c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004740:	f7fc faaa 	bl	8000c98 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4b60      	ldr	r3, [pc, #384]	@ (80048cc <UART_SetConfig+0x4e4>)
 800474a:	fba3 2302 	umull	r2, r3, r3, r2
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	011c      	lsls	r4, r3, #4
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800475c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	61b9      	str	r1, [r7, #24]
 800476c:	415b      	adcs	r3, r3
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6139      	str	r1, [r7, #16]
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a8:	464b      	mov	r3, r9
 80047aa:	460a      	mov	r2, r1
 80047ac:	eb42 0303 	adc.w	r3, r2, r3
 80047b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047de:	f7fc fa5b 	bl	8000c98 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4b38      	ldr	r3, [pc, #224]	@ (80048cc <UART_SetConfig+0x4e4>)
 80047ea:	fba3 2301 	umull	r2, r3, r3, r1
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2264      	movs	r2, #100	@ 0x64
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	1acb      	subs	r3, r1, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	@ 0x32
 80047fc:	4a33      	ldr	r2, [pc, #204]	@ (80048cc <UART_SetConfig+0x4e4>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004808:	441c      	add	r4, r3
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	673b      	str	r3, [r7, #112]	@ 0x70
 8004812:	677a      	str	r2, [r7, #116]	@ 0x74
 8004814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	1891      	adds	r1, r2, r2
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	415b      	adcs	r3, r3
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004828:	4641      	mov	r1, r8
 800482a:	1851      	adds	r1, r2, r1
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	4649      	mov	r1, r9
 8004830:	414b      	adcs	r3, r1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004840:	4659      	mov	r1, fp
 8004842:	00cb      	lsls	r3, r1, #3
 8004844:	4651      	mov	r1, sl
 8004846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484a:	4651      	mov	r1, sl
 800484c:	00ca      	lsls	r2, r1, #3
 800484e:	4610      	mov	r0, r2
 8004850:	4619      	mov	r1, r3
 8004852:	4603      	mov	r3, r0
 8004854:	4642      	mov	r2, r8
 8004856:	189b      	adds	r3, r3, r2
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800485a:	464b      	mov	r3, r9
 800485c:	460a      	mov	r2, r1
 800485e:	eb42 0303 	adc.w	r3, r2, r3
 8004862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	663b      	str	r3, [r7, #96]	@ 0x60
 800486e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800487c:	4649      	mov	r1, r9
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004886:	4641      	mov	r1, r8
 8004888:	008a      	lsls	r2, r1, #2
 800488a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800488e:	f7fc fa03 	bl	8000c98 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <UART_SetConfig+0x4e4>)
 8004898:	fba3 1302 	umull	r1, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2164      	movs	r1, #100	@ 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	3332      	adds	r3, #50	@ 0x32
 80048aa:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <UART_SetConfig+0x4e4>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4422      	add	r2, r4
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048cc:	51eb851f 	.word	0x51eb851f

080048d0 <__cvt>:
 80048d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	ec57 6b10 	vmov	r6, r7, d0
 80048d8:	2f00      	cmp	r7, #0
 80048da:	460c      	mov	r4, r1
 80048dc:	4619      	mov	r1, r3
 80048de:	463b      	mov	r3, r7
 80048e0:	bfbb      	ittet	lt
 80048e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80048e6:	461f      	movlt	r7, r3
 80048e8:	2300      	movge	r3, #0
 80048ea:	232d      	movlt	r3, #45	@ 0x2d
 80048ec:	700b      	strb	r3, [r1, #0]
 80048ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80048f4:	4691      	mov	r9, r2
 80048f6:	f023 0820 	bic.w	r8, r3, #32
 80048fa:	bfbc      	itt	lt
 80048fc:	4632      	movlt	r2, r6
 80048fe:	4616      	movlt	r6, r2
 8004900:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004904:	d005      	beq.n	8004912 <__cvt+0x42>
 8004906:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800490a:	d100      	bne.n	800490e <__cvt+0x3e>
 800490c:	3401      	adds	r4, #1
 800490e:	2102      	movs	r1, #2
 8004910:	e000      	b.n	8004914 <__cvt+0x44>
 8004912:	2103      	movs	r1, #3
 8004914:	ab03      	add	r3, sp, #12
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	ab02      	add	r3, sp, #8
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	ec47 6b10 	vmov	d0, r6, r7
 8004920:	4653      	mov	r3, sl
 8004922:	4622      	mov	r2, r4
 8004924:	f001 f888 	bl	8005a38 <_dtoa_r>
 8004928:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800492c:	4605      	mov	r5, r0
 800492e:	d119      	bne.n	8004964 <__cvt+0x94>
 8004930:	f019 0f01 	tst.w	r9, #1
 8004934:	d00e      	beq.n	8004954 <__cvt+0x84>
 8004936:	eb00 0904 	add.w	r9, r0, r4
 800493a:	2200      	movs	r2, #0
 800493c:	2300      	movs	r3, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fc f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004946:	b108      	cbz	r0, 800494c <__cvt+0x7c>
 8004948:	f8cd 900c 	str.w	r9, [sp, #12]
 800494c:	2230      	movs	r2, #48	@ 0x30
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	454b      	cmp	r3, r9
 8004952:	d31e      	bcc.n	8004992 <__cvt+0xc2>
 8004954:	9b03      	ldr	r3, [sp, #12]
 8004956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004958:	1b5b      	subs	r3, r3, r5
 800495a:	4628      	mov	r0, r5
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	b004      	add	sp, #16
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004968:	eb00 0904 	add.w	r9, r0, r4
 800496c:	d1e5      	bne.n	800493a <__cvt+0x6a>
 800496e:	7803      	ldrb	r3, [r0, #0]
 8004970:	2b30      	cmp	r3, #48	@ 0x30
 8004972:	d10a      	bne.n	800498a <__cvt+0xba>
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	4630      	mov	r0, r6
 800497a:	4639      	mov	r1, r7
 800497c:	f7fc f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8004980:	b918      	cbnz	r0, 800498a <__cvt+0xba>
 8004982:	f1c4 0401 	rsb	r4, r4, #1
 8004986:	f8ca 4000 	str.w	r4, [sl]
 800498a:	f8da 3000 	ldr.w	r3, [sl]
 800498e:	4499      	add	r9, r3
 8004990:	e7d3      	b.n	800493a <__cvt+0x6a>
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	9103      	str	r1, [sp, #12]
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e7d9      	b.n	800494e <__cvt+0x7e>

0800499a <__exponent>:
 800499a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800499c:	2900      	cmp	r1, #0
 800499e:	bfba      	itte	lt
 80049a0:	4249      	neglt	r1, r1
 80049a2:	232d      	movlt	r3, #45	@ 0x2d
 80049a4:	232b      	movge	r3, #43	@ 0x2b
 80049a6:	2909      	cmp	r1, #9
 80049a8:	7002      	strb	r2, [r0, #0]
 80049aa:	7043      	strb	r3, [r0, #1]
 80049ac:	dd29      	ble.n	8004a02 <__exponent+0x68>
 80049ae:	f10d 0307 	add.w	r3, sp, #7
 80049b2:	461d      	mov	r5, r3
 80049b4:	270a      	movs	r7, #10
 80049b6:	461a      	mov	r2, r3
 80049b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80049bc:	fb07 1416 	mls	r4, r7, r6, r1
 80049c0:	3430      	adds	r4, #48	@ 0x30
 80049c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049c6:	460c      	mov	r4, r1
 80049c8:	2c63      	cmp	r4, #99	@ 0x63
 80049ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80049ce:	4631      	mov	r1, r6
 80049d0:	dcf1      	bgt.n	80049b6 <__exponent+0x1c>
 80049d2:	3130      	adds	r1, #48	@ 0x30
 80049d4:	1e94      	subs	r4, r2, #2
 80049d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049da:	1c41      	adds	r1, r0, #1
 80049dc:	4623      	mov	r3, r4
 80049de:	42ab      	cmp	r3, r5
 80049e0:	d30a      	bcc.n	80049f8 <__exponent+0x5e>
 80049e2:	f10d 0309 	add.w	r3, sp, #9
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	42ac      	cmp	r4, r5
 80049ea:	bf88      	it	hi
 80049ec:	2300      	movhi	r3, #0
 80049ee:	3302      	adds	r3, #2
 80049f0:	4403      	add	r3, r0
 80049f2:	1a18      	subs	r0, r3, r0
 80049f4:	b003      	add	sp, #12
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a00:	e7ed      	b.n	80049de <__exponent+0x44>
 8004a02:	2330      	movs	r3, #48	@ 0x30
 8004a04:	3130      	adds	r1, #48	@ 0x30
 8004a06:	7083      	strb	r3, [r0, #2]
 8004a08:	70c1      	strb	r1, [r0, #3]
 8004a0a:	1d03      	adds	r3, r0, #4
 8004a0c:	e7f1      	b.n	80049f2 <__exponent+0x58>
	...

08004a10 <_printf_float>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	b08d      	sub	sp, #52	@ 0x34
 8004a16:	460c      	mov	r4, r1
 8004a18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	461f      	mov	r7, r3
 8004a20:	4605      	mov	r5, r0
 8004a22:	f000 ff01 	bl	8005828 <_localeconv_r>
 8004a26:	6803      	ldr	r3, [r0, #0]
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb fc28 	bl	8000280 <strlen>
 8004a30:	2300      	movs	r3, #0
 8004a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a34:	f8d8 3000 	ldr.w	r3, [r8]
 8004a38:	9005      	str	r0, [sp, #20]
 8004a3a:	3307      	adds	r3, #7
 8004a3c:	f023 0307 	bic.w	r3, r3, #7
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a48:	f8d4 b000 	ldr.w	fp, [r4]
 8004a4c:	f8c8 2000 	str.w	r2, [r8]
 8004a50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a66:	4b9c      	ldr	r3, [pc, #624]	@ (8004cd8 <_printf_float+0x2c8>)
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	f7fc f866 	bl	8000b3c <__aeabi_dcmpun>
 8004a70:	bb70      	cbnz	r0, 8004ad0 <_printf_float+0xc0>
 8004a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a76:	4b98      	ldr	r3, [pc, #608]	@ (8004cd8 <_printf_float+0x2c8>)
 8004a78:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7c:	f7fc f840 	bl	8000b00 <__aeabi_dcmple>
 8004a80:	bb30      	cbnz	r0, 8004ad0 <_printf_float+0xc0>
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fc f82f 	bl	8000aec <__aeabi_dcmplt>
 8004a8e:	b110      	cbz	r0, 8004a96 <_printf_float+0x86>
 8004a90:	232d      	movs	r3, #45	@ 0x2d
 8004a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a96:	4a91      	ldr	r2, [pc, #580]	@ (8004cdc <_printf_float+0x2cc>)
 8004a98:	4b91      	ldr	r3, [pc, #580]	@ (8004ce0 <_printf_float+0x2d0>)
 8004a9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a9e:	bf94      	ite	ls
 8004aa0:	4690      	movls	r8, r2
 8004aa2:	4698      	movhi	r8, r3
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	f02b 0304 	bic.w	r3, fp, #4
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	f04f 0900 	mov.w	r9, #0
 8004ab2:	9700      	str	r7, [sp, #0]
 8004ab4:	4633      	mov	r3, r6
 8004ab6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f9d2 	bl	8004e64 <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f040 808d 	bne.w	8004be0 <_printf_float+0x1d0>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	b00d      	add	sp, #52	@ 0x34
 8004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	f7fc f830 	bl	8000b3c <__aeabi_dcmpun>
 8004adc:	b140      	cbz	r0, 8004af0 <_printf_float+0xe0>
 8004ade:	464b      	mov	r3, r9
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bfbc      	itt	lt
 8004ae4:	232d      	movlt	r3, #45	@ 0x2d
 8004ae6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004aea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ce4 <_printf_float+0x2d4>)
 8004aec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce8 <_printf_float+0x2d8>)
 8004aee:	e7d4      	b.n	8004a9a <_printf_float+0x8a>
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004af6:	9206      	str	r2, [sp, #24]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	d13b      	bne.n	8004b74 <_printf_float+0x164>
 8004afc:	2306      	movs	r3, #6
 8004afe:	6063      	str	r3, [r4, #4]
 8004b00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b04:	2300      	movs	r3, #0
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b10:	ab09      	add	r3, sp, #36	@ 0x24
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	6861      	ldr	r1, [r4, #4]
 8004b16:	ec49 8b10 	vmov	d0, r8, r9
 8004b1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7ff fed6 	bl	80048d0 <__cvt>
 8004b24:	9b06      	ldr	r3, [sp, #24]
 8004b26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b28:	2b47      	cmp	r3, #71	@ 0x47
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	d129      	bne.n	8004b82 <_printf_float+0x172>
 8004b2e:	1cc8      	adds	r0, r1, #3
 8004b30:	db02      	blt.n	8004b38 <_printf_float+0x128>
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	4299      	cmp	r1, r3
 8004b36:	dd41      	ble.n	8004bbc <_printf_float+0x1ac>
 8004b38:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b3c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b40:	3901      	subs	r1, #1
 8004b42:	4652      	mov	r2, sl
 8004b44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b48:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b4a:	f7ff ff26 	bl	800499a <__exponent>
 8004b4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b50:	1813      	adds	r3, r2, r0
 8004b52:	2a01      	cmp	r2, #1
 8004b54:	4681      	mov	r9, r0
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	dc02      	bgt.n	8004b60 <_printf_float+0x150>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	07d2      	lsls	r2, r2, #31
 8004b5e:	d501      	bpl.n	8004b64 <_printf_float+0x154>
 8004b60:	3301      	adds	r3, #1
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0a2      	beq.n	8004ab2 <_printf_float+0xa2>
 8004b6c:	232d      	movs	r3, #45	@ 0x2d
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b72:	e79e      	b.n	8004ab2 <_printf_float+0xa2>
 8004b74:	9a06      	ldr	r2, [sp, #24]
 8004b76:	2a47      	cmp	r2, #71	@ 0x47
 8004b78:	d1c2      	bne.n	8004b00 <_printf_float+0xf0>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1c0      	bne.n	8004b00 <_printf_float+0xf0>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7bd      	b.n	8004afe <_printf_float+0xee>
 8004b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b86:	d9db      	bls.n	8004b40 <_printf_float+0x130>
 8004b88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b8c:	d118      	bne.n	8004bc0 <_printf_float+0x1b0>
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	dd0b      	ble.n	8004bac <_printf_float+0x19c>
 8004b94:	6121      	str	r1, [r4, #16]
 8004b96:	b913      	cbnz	r3, 8004b9e <_printf_float+0x18e>
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	07d0      	lsls	r0, r2, #31
 8004b9c:	d502      	bpl.n	8004ba4 <_printf_float+0x194>
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	440b      	add	r3, r1
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ba6:	f04f 0900 	mov.w	r9, #0
 8004baa:	e7db      	b.n	8004b64 <_printf_float+0x154>
 8004bac:	b913      	cbnz	r3, 8004bb4 <_printf_float+0x1a4>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	07d2      	lsls	r2, r2, #31
 8004bb2:	d501      	bpl.n	8004bb8 <_printf_float+0x1a8>
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	e7f4      	b.n	8004ba2 <_printf_float+0x192>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e7f2      	b.n	8004ba2 <_printf_float+0x192>
 8004bbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	db05      	blt.n	8004bd2 <_printf_float+0x1c2>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	6121      	str	r1, [r4, #16]
 8004bca:	07d8      	lsls	r0, r3, #31
 8004bcc:	d5ea      	bpl.n	8004ba4 <_printf_float+0x194>
 8004bce:	1c4b      	adds	r3, r1, #1
 8004bd0:	e7e7      	b.n	8004ba2 <_printf_float+0x192>
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	bfd4      	ite	le
 8004bd6:	f1c1 0202 	rsble	r2, r1, #2
 8004bda:	2201      	movgt	r2, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	e7e0      	b.n	8004ba2 <_printf_float+0x192>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	055a      	lsls	r2, r3, #21
 8004be4:	d407      	bmi.n	8004bf6 <_printf_float+0x1e6>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	4642      	mov	r2, r8
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d12b      	bne.n	8004c4c <_printf_float+0x23c>
 8004bf4:	e767      	b.n	8004ac6 <_printf_float+0xb6>
 8004bf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bfa:	f240 80dd 	bls.w	8004db8 <_printf_float+0x3a8>
 8004bfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	f7fb ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d033      	beq.n	8004c76 <_printf_float+0x266>
 8004c0e:	4a37      	ldr	r2, [pc, #220]	@ (8004cec <_printf_float+0x2dc>)
 8004c10:	2301      	movs	r3, #1
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f af54 	beq.w	8004ac6 <_printf_float+0xb6>
 8004c1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c22:	4543      	cmp	r3, r8
 8004c24:	db02      	blt.n	8004c2c <_printf_float+0x21c>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	07d8      	lsls	r0, r3, #31
 8004c2a:	d50f      	bpl.n	8004c4c <_printf_float+0x23c>
 8004c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af45 	beq.w	8004ac6 <_printf_float+0xb6>
 8004c3c:	f04f 0900 	mov.w	r9, #0
 8004c40:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c44:	f104 0a1a 	add.w	sl, r4, #26
 8004c48:	45c8      	cmp	r8, r9
 8004c4a:	dc09      	bgt.n	8004c60 <_printf_float+0x250>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	079b      	lsls	r3, r3, #30
 8004c50:	f100 8103 	bmi.w	8004e5a <_printf_float+0x44a>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e734      	b.n	8004aca <_printf_float+0xba>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af2b 	beq.w	8004ac6 <_printf_float+0xb6>
 8004c70:	f109 0901 	add.w	r9, r9, #1
 8004c74:	e7e8      	b.n	8004c48 <_printf_float+0x238>
 8004c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dc39      	bgt.n	8004cf0 <_printf_float+0x2e0>
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <_printf_float+0x2dc>)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af1d 	beq.w	8004ac6 <_printf_float+0xb6>
 8004c8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c90:	ea59 0303 	orrs.w	r3, r9, r3
 8004c94:	d102      	bne.n	8004c9c <_printf_float+0x28c>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	07d9      	lsls	r1, r3, #31
 8004c9a:	d5d7      	bpl.n	8004c4c <_printf_float+0x23c>
 8004c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af0d 	beq.w	8004ac6 <_printf_float+0xb6>
 8004cac:	f04f 0a00 	mov.w	sl, #0
 8004cb0:	f104 0b1a 	add.w	fp, r4, #26
 8004cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	4553      	cmp	r3, sl
 8004cba:	dc01      	bgt.n	8004cc0 <_printf_float+0x2b0>
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	e793      	b.n	8004be8 <_printf_float+0x1d8>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	465a      	mov	r2, fp
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f aefb 	beq.w	8004ac6 <_printf_float+0xb6>
 8004cd0:	f10a 0a01 	add.w	sl, sl, #1
 8004cd4:	e7ee      	b.n	8004cb4 <_printf_float+0x2a4>
 8004cd6:	bf00      	nop
 8004cd8:	7fefffff 	.word	0x7fefffff
 8004cdc:	080096ec 	.word	0x080096ec
 8004ce0:	080096f0 	.word	0x080096f0
 8004ce4:	080096f4 	.word	0x080096f4
 8004ce8:	080096f8 	.word	0x080096f8
 8004cec:	080096fc 	.word	0x080096fc
 8004cf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004cf6:	4553      	cmp	r3, sl
 8004cf8:	bfa8      	it	ge
 8004cfa:	4653      	movge	r3, sl
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	4699      	mov	r9, r3
 8004d00:	dc36      	bgt.n	8004d70 <_printf_float+0x360>
 8004d02:	f04f 0b00 	mov.w	fp, #0
 8004d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d0a:	f104 021a 	add.w	r2, r4, #26
 8004d0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d10:	9306      	str	r3, [sp, #24]
 8004d12:	eba3 0309 	sub.w	r3, r3, r9
 8004d16:	455b      	cmp	r3, fp
 8004d18:	dc31      	bgt.n	8004d7e <_printf_float+0x36e>
 8004d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1c:	459a      	cmp	sl, r3
 8004d1e:	dc3a      	bgt.n	8004d96 <_printf_float+0x386>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d437      	bmi.n	8004d96 <_printf_float+0x386>
 8004d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d28:	ebaa 0903 	sub.w	r9, sl, r3
 8004d2c:	9b06      	ldr	r3, [sp, #24]
 8004d2e:	ebaa 0303 	sub.w	r3, sl, r3
 8004d32:	4599      	cmp	r9, r3
 8004d34:	bfa8      	it	ge
 8004d36:	4699      	movge	r9, r3
 8004d38:	f1b9 0f00 	cmp.w	r9, #0
 8004d3c:	dc33      	bgt.n	8004da6 <_printf_float+0x396>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d46:	f104 0b1a 	add.w	fp, r4, #26
 8004d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d50:	eba3 0309 	sub.w	r3, r3, r9
 8004d54:	4543      	cmp	r3, r8
 8004d56:	f77f af79 	ble.w	8004c4c <_printf_float+0x23c>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	465a      	mov	r2, fp
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f aeae 	beq.w	8004ac6 <_printf_float+0xb6>
 8004d6a:	f108 0801 	add.w	r8, r8, #1
 8004d6e:	e7ec      	b.n	8004d4a <_printf_float+0x33a>
 8004d70:	4642      	mov	r2, r8
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1c2      	bne.n	8004d02 <_printf_float+0x2f2>
 8004d7c:	e6a3      	b.n	8004ac6 <_printf_float+0xb6>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4631      	mov	r1, r6
 8004d82:	4628      	mov	r0, r5
 8004d84:	9206      	str	r2, [sp, #24]
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae9c 	beq.w	8004ac6 <_printf_float+0xb6>
 8004d8e:	9a06      	ldr	r2, [sp, #24]
 8004d90:	f10b 0b01 	add.w	fp, fp, #1
 8004d94:	e7bb      	b.n	8004d0e <_printf_float+0x2fe>
 8004d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d1c0      	bne.n	8004d26 <_printf_float+0x316>
 8004da4:	e68f      	b.n	8004ac6 <_printf_float+0xb6>
 8004da6:	9a06      	ldr	r2, [sp, #24]
 8004da8:	464b      	mov	r3, r9
 8004daa:	4442      	add	r2, r8
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c3      	bne.n	8004d3e <_printf_float+0x32e>
 8004db6:	e686      	b.n	8004ac6 <_printf_float+0xb6>
 8004db8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dbc:	f1ba 0f01 	cmp.w	sl, #1
 8004dc0:	dc01      	bgt.n	8004dc6 <_printf_float+0x3b6>
 8004dc2:	07db      	lsls	r3, r3, #31
 8004dc4:	d536      	bpl.n	8004e34 <_printf_float+0x424>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae78 	beq.w	8004ac6 <_printf_float+0xb6>
 8004dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
=======
 8004718:	e106      	b.n	8004928 <UART_SetConfig+0x4d8>
 800471a:	bf00      	nop
 800471c:	40011000 	.word	0x40011000
 8004720:	40011400 	.word	0x40011400
 8004724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472c:	2200      	movs	r2, #0
 800472e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004732:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800473a:	4642      	mov	r2, r8
 800473c:	464b      	mov	r3, r9
 800473e:	1891      	adds	r1, r2, r2
 8004740:	6239      	str	r1, [r7, #32]
 8004742:	415b      	adcs	r3, r3
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24
 8004746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800474a:	4641      	mov	r1, r8
 800474c:	1854      	adds	r4, r2, r1
 800474e:	4649      	mov	r1, r9
 8004750:	eb43 0501 	adc.w	r5, r3, r1
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	00eb      	lsls	r3, r5, #3
 800475e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004762:	00e2      	lsls	r2, r4, #3
 8004764:	4614      	mov	r4, r2
 8004766:	461d      	mov	r5, r3
 8004768:	4643      	mov	r3, r8
 800476a:	18e3      	adds	r3, r4, r3
 800476c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004770:	464b      	mov	r3, r9
 8004772:	eb45 0303 	adc.w	r3, r5, r3
 8004776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004796:	4629      	mov	r1, r5
 8004798:	008b      	lsls	r3, r1, #2
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a0:	4621      	mov	r1, r4
 80047a2:	008a      	lsls	r2, r1, #2
 80047a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047a8:	f7fc fa56 	bl	8000c58 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b60      	ldr	r3, [pc, #384]	@ (8004934 <UART_SetConfig+0x4e4>)
 80047b2:	fba3 2302 	umull	r2, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	011c      	lsls	r4, r3, #4
 80047ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	61b9      	str	r1, [r7, #24]
 80047d4:	415b      	adcs	r3, r3
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047dc:	4641      	mov	r1, r8
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	6139      	str	r1, [r7, #16]
 80047e2:	4649      	mov	r1, r9
 80047e4:	414b      	adcs	r3, r1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f4:	4659      	mov	r1, fp
 80047f6:	00cb      	lsls	r3, r1, #3
 80047f8:	4651      	mov	r1, sl
 80047fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fe:	4651      	mov	r1, sl
 8004800:	00ca      	lsls	r2, r1, #3
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	4603      	mov	r3, r0
 8004808:	4642      	mov	r2, r8
 800480a:	189b      	adds	r3, r3, r2
 800480c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004810:	464b      	mov	r3, r9
 8004812:	460a      	mov	r2, r1
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004826:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004834:	4649      	mov	r1, r9
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4641      	mov	r1, r8
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4641      	mov	r1, r8
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004846:	f7fc fa07 	bl	8000c58 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4611      	mov	r1, r2
 8004850:	4b38      	ldr	r3, [pc, #224]	@ (8004934 <UART_SetConfig+0x4e4>)
 8004852:	fba3 2301 	umull	r2, r3, r3, r1
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2264      	movs	r2, #100	@ 0x64
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	1acb      	subs	r3, r1, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	@ 0x32
 8004864:	4a33      	ldr	r2, [pc, #204]	@ (8004934 <UART_SetConfig+0x4e4>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004870:	441c      	add	r4, r3
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	673b      	str	r3, [r7, #112]	@ 0x70
 800487a:	677a      	str	r2, [r7, #116]	@ 0x74
 800487c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	415b      	adcs	r3, r3
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048c2:	464b      	mov	r3, r9
 80048c4:	460a      	mov	r2, r1
 80048c6:	eb42 0303 	adc.w	r3, r2, r3
 80048ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048e4:	4649      	mov	r1, r9
 80048e6:	008b      	lsls	r3, r1, #2
 80048e8:	4641      	mov	r1, r8
 80048ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ee:	4641      	mov	r1, r8
 80048f0:	008a      	lsls	r2, r1, #2
 80048f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048f6:	f7fc f9af 	bl	8000c58 <__aeabi_uldivmod>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <UART_SetConfig+0x4e4>)
 8004900:	fba3 1302 	umull	r1, r3, r3, r2
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	2164      	movs	r1, #100	@ 0x64
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	3332      	adds	r3, #50	@ 0x32
 8004912:	4a08      	ldr	r2, [pc, #32]	@ (8004934 <UART_SetConfig+0x4e4>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4422      	add	r2, r4
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004934:	51eb851f 	.word	0x51eb851f

08004938 <__cvt>:
 8004938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	ec57 6b10 	vmov	r6, r7, d0
 8004940:	2f00      	cmp	r7, #0
 8004942:	460c      	mov	r4, r1
 8004944:	4619      	mov	r1, r3
 8004946:	463b      	mov	r3, r7
 8004948:	bfbb      	ittet	lt
 800494a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800494e:	461f      	movlt	r7, r3
 8004950:	2300      	movge	r3, #0
 8004952:	232d      	movlt	r3, #45	@ 0x2d
 8004954:	700b      	strb	r3, [r1, #0]
 8004956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004958:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800495c:	4691      	mov	r9, r2
 800495e:	f023 0820 	bic.w	r8, r3, #32
 8004962:	bfbc      	itt	lt
 8004964:	4632      	movlt	r2, r6
 8004966:	4616      	movlt	r6, r2
 8004968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800496c:	d005      	beq.n	800497a <__cvt+0x42>
 800496e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004972:	d100      	bne.n	8004976 <__cvt+0x3e>
 8004974:	3401      	adds	r4, #1
 8004976:	2102      	movs	r1, #2
 8004978:	e000      	b.n	800497c <__cvt+0x44>
 800497a:	2103      	movs	r1, #3
 800497c:	ab03      	add	r3, sp, #12
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	ab02      	add	r3, sp, #8
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	ec47 6b10 	vmov	d0, r6, r7
 8004988:	4653      	mov	r3, sl
 800498a:	4622      	mov	r2, r4
 800498c:	f000 fe3c 	bl	8005608 <_dtoa_r>
 8004990:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004994:	4605      	mov	r5, r0
 8004996:	d119      	bne.n	80049cc <__cvt+0x94>
 8004998:	f019 0f01 	tst.w	r9, #1
 800499c:	d00e      	beq.n	80049bc <__cvt+0x84>
 800499e:	eb00 0904 	add.w	r9, r0, r4
 80049a2:	2200      	movs	r2, #0
 80049a4:	2300      	movs	r3, #0
 80049a6:	4630      	mov	r0, r6
 80049a8:	4639      	mov	r1, r7
 80049aa:	f7fc f895 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ae:	b108      	cbz	r0, 80049b4 <__cvt+0x7c>
 80049b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80049b4:	2230      	movs	r2, #48	@ 0x30
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	454b      	cmp	r3, r9
 80049ba:	d31e      	bcc.n	80049fa <__cvt+0xc2>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049c0:	1b5b      	subs	r3, r3, r5
 80049c2:	4628      	mov	r0, r5
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	b004      	add	sp, #16
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049d0:	eb00 0904 	add.w	r9, r0, r4
 80049d4:	d1e5      	bne.n	80049a2 <__cvt+0x6a>
 80049d6:	7803      	ldrb	r3, [r0, #0]
 80049d8:	2b30      	cmp	r3, #48	@ 0x30
 80049da:	d10a      	bne.n	80049f2 <__cvt+0xba>
 80049dc:	2200      	movs	r2, #0
 80049de:	2300      	movs	r3, #0
 80049e0:	4630      	mov	r0, r6
 80049e2:	4639      	mov	r1, r7
 80049e4:	f7fc f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80049e8:	b918      	cbnz	r0, 80049f2 <__cvt+0xba>
 80049ea:	f1c4 0401 	rsb	r4, r4, #1
 80049ee:	f8ca 4000 	str.w	r4, [sl]
 80049f2:	f8da 3000 	ldr.w	r3, [sl]
 80049f6:	4499      	add	r9, r3
 80049f8:	e7d3      	b.n	80049a2 <__cvt+0x6a>
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	9103      	str	r1, [sp, #12]
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e7d9      	b.n	80049b6 <__cvt+0x7e>

08004a02 <__exponent>:
 8004a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a04:	2900      	cmp	r1, #0
 8004a06:	bfba      	itte	lt
 8004a08:	4249      	neglt	r1, r1
 8004a0a:	232d      	movlt	r3, #45	@ 0x2d
 8004a0c:	232b      	movge	r3, #43	@ 0x2b
 8004a0e:	2909      	cmp	r1, #9
 8004a10:	7002      	strb	r2, [r0, #0]
 8004a12:	7043      	strb	r3, [r0, #1]
 8004a14:	dd29      	ble.n	8004a6a <__exponent+0x68>
 8004a16:	f10d 0307 	add.w	r3, sp, #7
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	270a      	movs	r7, #10
 8004a1e:	461a      	mov	r2, r3
 8004a20:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a24:	fb07 1416 	mls	r4, r7, r6, r1
 8004a28:	3430      	adds	r4, #48	@ 0x30
 8004a2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a2e:	460c      	mov	r4, r1
 8004a30:	2c63      	cmp	r4, #99	@ 0x63
 8004a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a36:	4631      	mov	r1, r6
 8004a38:	dcf1      	bgt.n	8004a1e <__exponent+0x1c>
 8004a3a:	3130      	adds	r1, #48	@ 0x30
 8004a3c:	1e94      	subs	r4, r2, #2
 8004a3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a42:	1c41      	adds	r1, r0, #1
 8004a44:	4623      	mov	r3, r4
 8004a46:	42ab      	cmp	r3, r5
 8004a48:	d30a      	bcc.n	8004a60 <__exponent+0x5e>
 8004a4a:	f10d 0309 	add.w	r3, sp, #9
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	42ac      	cmp	r4, r5
 8004a52:	bf88      	it	hi
 8004a54:	2300      	movhi	r3, #0
 8004a56:	3302      	adds	r3, #2
 8004a58:	4403      	add	r3, r0
 8004a5a:	1a18      	subs	r0, r3, r0
 8004a5c:	b003      	add	sp, #12
 8004a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a68:	e7ed      	b.n	8004a46 <__exponent+0x44>
 8004a6a:	2330      	movs	r3, #48	@ 0x30
 8004a6c:	3130      	adds	r1, #48	@ 0x30
 8004a6e:	7083      	strb	r3, [r0, #2]
 8004a70:	70c1      	strb	r1, [r0, #3]
 8004a72:	1d03      	adds	r3, r0, #4
 8004a74:	e7f1      	b.n	8004a5a <__exponent+0x58>
	...

08004a78 <_printf_float>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	b08d      	sub	sp, #52	@ 0x34
 8004a7e:	460c      	mov	r4, r1
 8004a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a84:	4616      	mov	r6, r2
 8004a86:	461f      	mov	r7, r3
 8004a88:	4605      	mov	r5, r0
 8004a8a:	f000 fcbb 	bl	8005404 <_localeconv_r>
 8004a8e:	6803      	ldr	r3, [r0, #0]
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb fbf4 	bl	8000280 <strlen>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa0:	9005      	str	r0, [sp, #20]
 8004aa2:	3307      	adds	r3, #7
 8004aa4:	f023 0307 	bic.w	r3, r3, #7
 8004aa8:	f103 0208 	add.w	r2, r3, #8
 8004aac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ab0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ab4:	f8c8 2000 	str.w	r2, [r8]
 8004ab8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004abc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ac0:	9307      	str	r3, [sp, #28]
 8004ac2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ac6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ace:	4b9c      	ldr	r3, [pc, #624]	@ (8004d40 <_printf_float+0x2c8>)
 8004ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad4:	f7fc f832 	bl	8000b3c <__aeabi_dcmpun>
 8004ad8:	bb70      	cbnz	r0, 8004b38 <_printf_float+0xc0>
 8004ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ade:	4b98      	ldr	r3, [pc, #608]	@ (8004d40 <_printf_float+0x2c8>)
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	f7fc f80c 	bl	8000b00 <__aeabi_dcmple>
 8004ae8:	bb30      	cbnz	r0, 8004b38 <_printf_float+0xc0>
 8004aea:	2200      	movs	r2, #0
 8004aec:	2300      	movs	r3, #0
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	f7fb fffb 	bl	8000aec <__aeabi_dcmplt>
 8004af6:	b110      	cbz	r0, 8004afe <_printf_float+0x86>
 8004af8:	232d      	movs	r3, #45	@ 0x2d
 8004afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004afe:	4a91      	ldr	r2, [pc, #580]	@ (8004d44 <_printf_float+0x2cc>)
 8004b00:	4b91      	ldr	r3, [pc, #580]	@ (8004d48 <_printf_float+0x2d0>)
 8004b02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b06:	bf94      	ite	ls
 8004b08:	4690      	movls	r8, r2
 8004b0a:	4698      	movhi	r8, r3
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	f02b 0304 	bic.w	r3, fp, #4
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	f04f 0900 	mov.w	r9, #0
 8004b1a:	9700      	str	r7, [sp, #0]
 8004b1c:	4633      	mov	r3, r6
 8004b1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 f9d2 	bl	8004ecc <_printf_common>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f040 808d 	bne.w	8004c48 <_printf_float+0x1d0>
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	b00d      	add	sp, #52	@ 0x34
 8004b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	4649      	mov	r1, r9
 8004b40:	f7fb fffc 	bl	8000b3c <__aeabi_dcmpun>
 8004b44:	b140      	cbz	r0, 8004b58 <_printf_float+0xe0>
 8004b46:	464b      	mov	r3, r9
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bfbc      	itt	lt
 8004b4c:	232d      	movlt	r3, #45	@ 0x2d
 8004b4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b52:	4a7e      	ldr	r2, [pc, #504]	@ (8004d4c <_printf_float+0x2d4>)
 8004b54:	4b7e      	ldr	r3, [pc, #504]	@ (8004d50 <_printf_float+0x2d8>)
 8004b56:	e7d4      	b.n	8004b02 <_printf_float+0x8a>
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b5e:	9206      	str	r2, [sp, #24]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	d13b      	bne.n	8004bdc <_printf_float+0x164>
 8004b64:	2306      	movs	r3, #6
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6022      	str	r2, [r4, #0]
 8004b70:	9303      	str	r3, [sp, #12]
 8004b72:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b78:	ab09      	add	r3, sp, #36	@ 0x24
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6861      	ldr	r1, [r4, #4]
 8004b7e:	ec49 8b10 	vmov	d0, r8, r9
 8004b82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7ff fed6 	bl	8004938 <__cvt>
 8004b8c:	9b06      	ldr	r3, [sp, #24]
 8004b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b90:	2b47      	cmp	r3, #71	@ 0x47
 8004b92:	4680      	mov	r8, r0
 8004b94:	d129      	bne.n	8004bea <_printf_float+0x172>
 8004b96:	1cc8      	adds	r0, r1, #3
 8004b98:	db02      	blt.n	8004ba0 <_printf_float+0x128>
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	dd41      	ble.n	8004c24 <_printf_float+0x1ac>
 8004ba0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ba8:	3901      	subs	r1, #1
 8004baa:	4652      	mov	r2, sl
 8004bac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bb2:	f7ff ff26 	bl	8004a02 <__exponent>
 8004bb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bb8:	1813      	adds	r3, r2, r0
 8004bba:	2a01      	cmp	r2, #1
 8004bbc:	4681      	mov	r9, r0
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	dc02      	bgt.n	8004bc8 <_printf_float+0x150>
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	07d2      	lsls	r2, r2, #31
 8004bc6:	d501      	bpl.n	8004bcc <_printf_float+0x154>
 8004bc8:	3301      	adds	r3, #1
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0a2      	beq.n	8004b1a <_printf_float+0xa2>
 8004bd4:	232d      	movs	r3, #45	@ 0x2d
 8004bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bda:	e79e      	b.n	8004b1a <_printf_float+0xa2>
 8004bdc:	9a06      	ldr	r2, [sp, #24]
 8004bde:	2a47      	cmp	r2, #71	@ 0x47
 8004be0:	d1c2      	bne.n	8004b68 <_printf_float+0xf0>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1c0      	bne.n	8004b68 <_printf_float+0xf0>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7bd      	b.n	8004b66 <_printf_float+0xee>
 8004bea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bee:	d9db      	bls.n	8004ba8 <_printf_float+0x130>
 8004bf0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bf4:	d118      	bne.n	8004c28 <_printf_float+0x1b0>
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	dd0b      	ble.n	8004c14 <_printf_float+0x19c>
 8004bfc:	6121      	str	r1, [r4, #16]
 8004bfe:	b913      	cbnz	r3, 8004c06 <_printf_float+0x18e>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	07d0      	lsls	r0, r2, #31
 8004c04:	d502      	bpl.n	8004c0c <_printf_float+0x194>
 8004c06:	3301      	adds	r3, #1
 8004c08:	440b      	add	r3, r1
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c0e:	f04f 0900 	mov.w	r9, #0
 8004c12:	e7db      	b.n	8004bcc <_printf_float+0x154>
 8004c14:	b913      	cbnz	r3, 8004c1c <_printf_float+0x1a4>
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	07d2      	lsls	r2, r2, #31
 8004c1a:	d501      	bpl.n	8004c20 <_printf_float+0x1a8>
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	e7f4      	b.n	8004c0a <_printf_float+0x192>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e7f2      	b.n	8004c0a <_printf_float+0x192>
 8004c24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	db05      	blt.n	8004c3a <_printf_float+0x1c2>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	6121      	str	r1, [r4, #16]
 8004c32:	07d8      	lsls	r0, r3, #31
 8004c34:	d5ea      	bpl.n	8004c0c <_printf_float+0x194>
 8004c36:	1c4b      	adds	r3, r1, #1
 8004c38:	e7e7      	b.n	8004c0a <_printf_float+0x192>
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	bfd4      	ite	le
 8004c3e:	f1c1 0202 	rsble	r2, r1, #2
 8004c42:	2201      	movgt	r2, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	e7e0      	b.n	8004c0a <_printf_float+0x192>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	055a      	lsls	r2, r3, #21
 8004c4c:	d407      	bmi.n	8004c5e <_printf_float+0x1e6>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	4642      	mov	r2, r8
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d12b      	bne.n	8004cb4 <_printf_float+0x23c>
 8004c5c:	e767      	b.n	8004b2e <_printf_float+0xb6>
 8004c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c62:	f240 80dd 	bls.w	8004e20 <_printf_float+0x3a8>
 8004c66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f7fb ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d033      	beq.n	8004cde <_printf_float+0x266>
 8004c76:	4a37      	ldr	r2, [pc, #220]	@ (8004d54 <_printf_float+0x2dc>)
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b8      	blx	r7
 8004c80:	3001      	adds	r0, #1
 8004c82:	f43f af54 	beq.w	8004b2e <_printf_float+0xb6>
 8004c86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c8a:	4543      	cmp	r3, r8
 8004c8c:	db02      	blt.n	8004c94 <_printf_float+0x21c>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	07d8      	lsls	r0, r3, #31
 8004c92:	d50f      	bpl.n	8004cb4 <_printf_float+0x23c>
 8004c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af45 	beq.w	8004b2e <_printf_float+0xb6>
 8004ca4:	f04f 0900 	mov.w	r9, #0
 8004ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cac:	f104 0a1a 	add.w	sl, r4, #26
 8004cb0:	45c8      	cmp	r8, r9
 8004cb2:	dc09      	bgt.n	8004cc8 <_printf_float+0x250>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	079b      	lsls	r3, r3, #30
 8004cb8:	f100 8103 	bmi.w	8004ec2 <_printf_float+0x44a>
 8004cbc:	68e0      	ldr	r0, [r4, #12]
 8004cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cc0:	4298      	cmp	r0, r3
 8004cc2:	bfb8      	it	lt
 8004cc4:	4618      	movlt	r0, r3
 8004cc6:	e734      	b.n	8004b32 <_printf_float+0xba>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4652      	mov	r2, sl
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f af2b 	beq.w	8004b2e <_printf_float+0xb6>
 8004cd8:	f109 0901 	add.w	r9, r9, #1
 8004cdc:	e7e8      	b.n	8004cb0 <_printf_float+0x238>
 8004cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dc39      	bgt.n	8004d58 <_printf_float+0x2e0>
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <_printf_float+0x2dc>)
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f af1d 	beq.w	8004b2e <_printf_float+0xb6>
 8004cf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004cf8:	ea59 0303 	orrs.w	r3, r9, r3
 8004cfc:	d102      	bne.n	8004d04 <_printf_float+0x28c>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	07d9      	lsls	r1, r3, #31
 8004d02:	d5d7      	bpl.n	8004cb4 <_printf_float+0x23c>
 8004d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f af0d 	beq.w	8004b2e <_printf_float+0xb6>
 8004d14:	f04f 0a00 	mov.w	sl, #0
 8004d18:	f104 0b1a 	add.w	fp, r4, #26
 8004d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1e:	425b      	negs	r3, r3
 8004d20:	4553      	cmp	r3, sl
 8004d22:	dc01      	bgt.n	8004d28 <_printf_float+0x2b0>
 8004d24:	464b      	mov	r3, r9
 8004d26:	e793      	b.n	8004c50 <_printf_float+0x1d8>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	465a      	mov	r2, fp
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f aefb 	beq.w	8004b2e <_printf_float+0xb6>
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	e7ee      	b.n	8004d1c <_printf_float+0x2a4>
 8004d3e:	bf00      	nop
 8004d40:	7fefffff 	.word	0x7fefffff
 8004d44:	08007950 	.word	0x08007950
 8004d48:	08007954 	.word	0x08007954
 8004d4c:	08007958 	.word	0x08007958
 8004d50:	0800795c 	.word	0x0800795c
 8004d54:	08007960 	.word	0x08007960
 8004d58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d5e:	4553      	cmp	r3, sl
 8004d60:	bfa8      	it	ge
 8004d62:	4653      	movge	r3, sl
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	4699      	mov	r9, r3
 8004d68:	dc36      	bgt.n	8004dd8 <_printf_float+0x360>
 8004d6a:	f04f 0b00 	mov.w	fp, #0
 8004d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d72:	f104 021a 	add.w	r2, r4, #26
 8004d76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d78:	9306      	str	r3, [sp, #24]
 8004d7a:	eba3 0309 	sub.w	r3, r3, r9
 8004d7e:	455b      	cmp	r3, fp
 8004d80:	dc31      	bgt.n	8004de6 <_printf_float+0x36e>
 8004d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d84:	459a      	cmp	sl, r3
 8004d86:	dc3a      	bgt.n	8004dfe <_printf_float+0x386>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07da      	lsls	r2, r3, #31
 8004d8c:	d437      	bmi.n	8004dfe <_printf_float+0x386>
 8004d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d90:	ebaa 0903 	sub.w	r9, sl, r3
 8004d94:	9b06      	ldr	r3, [sp, #24]
 8004d96:	ebaa 0303 	sub.w	r3, sl, r3
 8004d9a:	4599      	cmp	r9, r3
 8004d9c:	bfa8      	it	ge
 8004d9e:	4699      	movge	r9, r3
 8004da0:	f1b9 0f00 	cmp.w	r9, #0
 8004da4:	dc33      	bgt.n	8004e0e <_printf_float+0x396>
 8004da6:	f04f 0800 	mov.w	r8, #0
 8004daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dae:	f104 0b1a 	add.w	fp, r4, #26
 8004db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db4:	ebaa 0303 	sub.w	r3, sl, r3
 8004db8:	eba3 0309 	sub.w	r3, r3, r9
 8004dbc:	4543      	cmp	r3, r8
 8004dbe:	f77f af79 	ble.w	8004cb4 <_printf_float+0x23c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	465a      	mov	r2, fp
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f aeae 	beq.w	8004b2e <_printf_float+0xb6>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	e7ec      	b.n	8004db2 <_printf_float+0x33a>
 8004dd8:	4642      	mov	r2, r8
>>>>>>> Stashed changes
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
<<<<<<< Updated upstream
 8004de2:	f43f ae70 	beq.w	8004ac6 <_printf_float+0xb6>
 8004de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df2:	f7fb fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df6:	b9c0      	cbnz	r0, 8004e2a <_printf_float+0x41a>
 8004df8:	4653      	mov	r3, sl
 8004dfa:	f108 0201 	add.w	r2, r8, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d10c      	bne.n	8004e22 <_printf_float+0x412>
 8004e08:	e65d      	b.n	8004ac6 <_printf_float+0xb6>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	465a      	mov	r2, fp
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f ae56 	beq.w	8004ac6 <_printf_float+0xb6>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	45d0      	cmp	r8, sl
 8004e20:	dbf3      	blt.n	8004e0a <_printf_float+0x3fa>
 8004e22:	464b      	mov	r3, r9
 8004e24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e28:	e6df      	b.n	8004bea <_printf_float+0x1da>
 8004e2a:	f04f 0800 	mov.w	r8, #0
 8004e2e:	f104 0b1a 	add.w	fp, r4, #26
 8004e32:	e7f4      	b.n	8004e1e <_printf_float+0x40e>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4642      	mov	r2, r8
 8004e38:	e7e1      	b.n	8004dfe <_printf_float+0x3ee>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	f43f ae3e 	beq.w	8004ac6 <_printf_float+0xb6>
 8004e4a:	f108 0801 	add.w	r8, r8, #1
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e52:	1a5b      	subs	r3, r3, r1
 8004e54:	4543      	cmp	r3, r8
 8004e56:	dcf0      	bgt.n	8004e3a <_printf_float+0x42a>
 8004e58:	e6fc      	b.n	8004c54 <_printf_float+0x244>
 8004e5a:	f04f 0800 	mov.w	r8, #0
 8004e5e:	f104 0919 	add.w	r9, r4, #25
 8004e62:	e7f4      	b.n	8004e4e <_printf_float+0x43e>

08004e64 <_printf_common>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	4616      	mov	r6, r2
 8004e6a:	4698      	mov	r8, r3
 8004e6c:	688a      	ldr	r2, [r1, #8]
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bfb8      	it	lt
 8004e78:	4613      	movlt	r3, r2
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e80:	4607      	mov	r7, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b10a      	cbz	r2, 8004e8a <_printf_common+0x26>
 8004e86:	3301      	adds	r3, #1
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	0699      	lsls	r1, r3, #26
 8004e8e:	bf42      	ittt	mi
 8004e90:	6833      	ldrmi	r3, [r6, #0]
 8004e92:	3302      	addmi	r3, #2
 8004e94:	6033      	strmi	r3, [r6, #0]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d106      	bne.n	8004eac <_printf_common+0x48>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	6832      	ldr	r2, [r6, #0]
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dc26      	bgt.n	8004efa <_printf_common+0x96>
 8004eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	3b00      	subs	r3, #0
 8004eb4:	bf18      	it	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	0692      	lsls	r2, r2, #26
 8004eba:	d42b      	bmi.n	8004f14 <_printf_common+0xb0>
 8004ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c8      	blx	r9
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d01e      	beq.n	8004f08 <_printf_common+0xa4>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	f003 0306 	and.w	r3, r3, #6
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf02      	ittt	eq
 8004ed6:	68e5      	ldreq	r5, [r4, #12]
 8004ed8:	6833      	ldreq	r3, [r6, #0]
 8004eda:	1aed      	subeq	r5, r5, r3
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	bf0c      	ite	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	2500      	movne	r5, #0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bfc4      	itt	gt
 8004eea:	1a9b      	subgt	r3, r3, r2
 8004eec:	18ed      	addgt	r5, r5, r3
 8004eee:	2600      	movs	r6, #0
 8004ef0:	341a      	adds	r4, #26
 8004ef2:	42b5      	cmp	r5, r6
 8004ef4:	d11a      	bne.n	8004f2c <_printf_common+0xc8>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e008      	b.n	8004f0c <_printf_common+0xa8>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4641      	mov	r1, r8
 8004f00:	4638      	mov	r0, r7
 8004f02:	47c8      	blx	r9
 8004f04:	3001      	adds	r0, #1
 8004f06:	d103      	bne.n	8004f10 <_printf_common+0xac>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	3501      	adds	r5, #1
 8004f12:	e7c6      	b.n	8004ea2 <_printf_common+0x3e>
 8004f14:	18e1      	adds	r1, r4, r3
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	2030      	movs	r0, #48	@ 0x30
 8004f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f1e:	4422      	add	r2, r4
 8004f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f28:	3302      	adds	r3, #2
 8004f2a:	e7c7      	b.n	8004ebc <_printf_common+0x58>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4641      	mov	r1, r8
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c8      	blx	r9
 8004f36:	3001      	adds	r0, #1
 8004f38:	d0e6      	beq.n	8004f08 <_printf_common+0xa4>
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7d9      	b.n	8004ef2 <_printf_common+0x8e>
	...

08004f40 <_printf_i>:
 8004f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	7e0f      	ldrb	r7, [r1, #24]
 8004f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f48:	2f78      	cmp	r7, #120	@ 0x78
 8004f4a:	4691      	mov	r9, r2
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	469a      	mov	sl, r3
 8004f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f56:	d807      	bhi.n	8004f68 <_printf_i+0x28>
 8004f58:	2f62      	cmp	r7, #98	@ 0x62
 8004f5a:	d80a      	bhi.n	8004f72 <_printf_i+0x32>
 8004f5c:	2f00      	cmp	r7, #0
 8004f5e:	f000 80d2 	beq.w	8005106 <_printf_i+0x1c6>
 8004f62:	2f58      	cmp	r7, #88	@ 0x58
 8004f64:	f000 80b9 	beq.w	80050da <_printf_i+0x19a>
 8004f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f70:	e03a      	b.n	8004fe8 <_printf_i+0xa8>
 8004f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f76:	2b15      	cmp	r3, #21
 8004f78:	d8f6      	bhi.n	8004f68 <_printf_i+0x28>
 8004f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f80 <_printf_i+0x40>)
 8004f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004f69 	.word	0x08004f69
 8004f8c:	08004f69 	.word	0x08004f69
 8004f90:	08004f69 	.word	0x08004f69
 8004f94:	08004f69 	.word	0x08004f69
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004f69 	.word	0x08004f69
 8004fa0:	08004f69 	.word	0x08004f69
 8004fa4:	08004f69 	.word	0x08004f69
 8004fa8:	08004f69 	.word	0x08004f69
 8004fac:	080050ed 	.word	0x080050ed
 8004fb0:	08005017 	.word	0x08005017
 8004fb4:	080050a7 	.word	0x080050a7
 8004fb8:	08004f69 	.word	0x08004f69
 8004fbc:	08004f69 	.word	0x08004f69
 8004fc0:	0800510f 	.word	0x0800510f
 8004fc4:	08004f69 	.word	0x08004f69
 8004fc8:	08005017 	.word	0x08005017
 8004fcc:	08004f69 	.word	0x08004f69
 8004fd0:	08004f69 	.word	0x08004f69
 8004fd4:	080050af 	.word	0x080050af
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	1d1a      	adds	r2, r3, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6032      	str	r2, [r6, #0]
 8004fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e09d      	b.n	8005128 <_printf_i+0x1e8>
 8004fec:	6833      	ldr	r3, [r6, #0]
 8004fee:	6820      	ldr	r0, [r4, #0]
 8004ff0:	1d19      	adds	r1, r3, #4
 8004ff2:	6031      	str	r1, [r6, #0]
 8004ff4:	0606      	lsls	r6, r0, #24
 8004ff6:	d501      	bpl.n	8004ffc <_printf_i+0xbc>
 8004ff8:	681d      	ldr	r5, [r3, #0]
 8004ffa:	e003      	b.n	8005004 <_printf_i+0xc4>
 8004ffc:	0645      	lsls	r5, r0, #25
 8004ffe:	d5fb      	bpl.n	8004ff8 <_printf_i+0xb8>
 8005000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005004:	2d00      	cmp	r5, #0
 8005006:	da03      	bge.n	8005010 <_printf_i+0xd0>
 8005008:	232d      	movs	r3, #45	@ 0x2d
 800500a:	426d      	negs	r5, r5
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005010:	4859      	ldr	r0, [pc, #356]	@ (8005178 <_printf_i+0x238>)
 8005012:	230a      	movs	r3, #10
 8005014:	e011      	b.n	800503a <_printf_i+0xfa>
 8005016:	6821      	ldr	r1, [r4, #0]
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	0608      	lsls	r0, r1, #24
 800501c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005020:	d402      	bmi.n	8005028 <_printf_i+0xe8>
 8005022:	0649      	lsls	r1, r1, #25
 8005024:	bf48      	it	mi
 8005026:	b2ad      	uxthmi	r5, r5
 8005028:	2f6f      	cmp	r7, #111	@ 0x6f
 800502a:	4853      	ldr	r0, [pc, #332]	@ (8005178 <_printf_i+0x238>)
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	bf14      	ite	ne
 8005030:	230a      	movne	r3, #10
 8005032:	2308      	moveq	r3, #8
 8005034:	2100      	movs	r1, #0
 8005036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800503a:	6866      	ldr	r6, [r4, #4]
 800503c:	60a6      	str	r6, [r4, #8]
 800503e:	2e00      	cmp	r6, #0
 8005040:	bfa2      	ittt	ge
 8005042:	6821      	ldrge	r1, [r4, #0]
 8005044:	f021 0104 	bicge.w	r1, r1, #4
 8005048:	6021      	strge	r1, [r4, #0]
 800504a:	b90d      	cbnz	r5, 8005050 <_printf_i+0x110>
 800504c:	2e00      	cmp	r6, #0
 800504e:	d04b      	beq.n	80050e8 <_printf_i+0x1a8>
 8005050:	4616      	mov	r6, r2
 8005052:	fbb5 f1f3 	udiv	r1, r5, r3
 8005056:	fb03 5711 	mls	r7, r3, r1, r5
 800505a:	5dc7      	ldrb	r7, [r0, r7]
 800505c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005060:	462f      	mov	r7, r5
 8005062:	42bb      	cmp	r3, r7
 8005064:	460d      	mov	r5, r1
 8005066:	d9f4      	bls.n	8005052 <_printf_i+0x112>
 8005068:	2b08      	cmp	r3, #8
 800506a:	d10b      	bne.n	8005084 <_printf_i+0x144>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	07df      	lsls	r7, r3, #31
 8005070:	d508      	bpl.n	8005084 <_printf_i+0x144>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	6861      	ldr	r1, [r4, #4]
 8005076:	4299      	cmp	r1, r3
 8005078:	bfde      	ittt	le
 800507a:	2330      	movle	r3, #48	@ 0x30
 800507c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005084:	1b92      	subs	r2, r2, r6
 8005086:	6122      	str	r2, [r4, #16]
 8005088:	f8cd a000 	str.w	sl, [sp]
 800508c:	464b      	mov	r3, r9
 800508e:	aa03      	add	r2, sp, #12
 8005090:	4621      	mov	r1, r4
 8005092:	4640      	mov	r0, r8
 8005094:	f7ff fee6 	bl	8004e64 <_printf_common>
 8005098:	3001      	adds	r0, #1
 800509a:	d14a      	bne.n	8005132 <_printf_i+0x1f2>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	b004      	add	sp, #16
 80050a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f043 0320 	orr.w	r3, r3, #32
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	4833      	ldr	r0, [pc, #204]	@ (800517c <_printf_i+0x23c>)
 80050b0:	2778      	movs	r7, #120	@ 0x78
 80050b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	6831      	ldr	r1, [r6, #0]
 80050ba:	061f      	lsls	r7, r3, #24
 80050bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80050c0:	d402      	bmi.n	80050c8 <_printf_i+0x188>
 80050c2:	065f      	lsls	r7, r3, #25
 80050c4:	bf48      	it	mi
 80050c6:	b2ad      	uxthmi	r5, r5
 80050c8:	6031      	str	r1, [r6, #0]
 80050ca:	07d9      	lsls	r1, r3, #31
 80050cc:	bf44      	itt	mi
 80050ce:	f043 0320 	orrmi.w	r3, r3, #32
 80050d2:	6023      	strmi	r3, [r4, #0]
 80050d4:	b11d      	cbz	r5, 80050de <_printf_i+0x19e>
 80050d6:	2310      	movs	r3, #16
 80050d8:	e7ac      	b.n	8005034 <_printf_i+0xf4>
 80050da:	4827      	ldr	r0, [pc, #156]	@ (8005178 <_printf_i+0x238>)
 80050dc:	e7e9      	b.n	80050b2 <_printf_i+0x172>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f023 0320 	bic.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	e7f6      	b.n	80050d6 <_printf_i+0x196>
 80050e8:	4616      	mov	r6, r2
 80050ea:	e7bd      	b.n	8005068 <_printf_i+0x128>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	6961      	ldr	r1, [r4, #20]
 80050f2:	1d18      	adds	r0, r3, #4
 80050f4:	6030      	str	r0, [r6, #0]
 80050f6:	062e      	lsls	r6, r5, #24
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0x1c0>
 80050fc:	6019      	str	r1, [r3, #0]
 80050fe:	e002      	b.n	8005106 <_printf_i+0x1c6>
 8005100:	0668      	lsls	r0, r5, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0x1bc>
 8005104:	8019      	strh	r1, [r3, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	6123      	str	r3, [r4, #16]
 800510a:	4616      	mov	r6, r2
 800510c:	e7bc      	b.n	8005088 <_printf_i+0x148>
 800510e:	6833      	ldr	r3, [r6, #0]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	6032      	str	r2, [r6, #0]
 8005114:	681e      	ldr	r6, [r3, #0]
 8005116:	6862      	ldr	r2, [r4, #4]
 8005118:	2100      	movs	r1, #0
 800511a:	4630      	mov	r0, r6
 800511c:	f7fb f860 	bl	80001e0 <memchr>
 8005120:	b108      	cbz	r0, 8005126 <_printf_i+0x1e6>
 8005122:	1b80      	subs	r0, r0, r6
 8005124:	6060      	str	r0, [r4, #4]
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	2300      	movs	r3, #0
 800512c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005130:	e7aa      	b.n	8005088 <_printf_i+0x148>
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	4632      	mov	r2, r6
 8005136:	4649      	mov	r1, r9
 8005138:	4640      	mov	r0, r8
 800513a:	47d0      	blx	sl
 800513c:	3001      	adds	r0, #1
 800513e:	d0ad      	beq.n	800509c <_printf_i+0x15c>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	079b      	lsls	r3, r3, #30
 8005144:	d413      	bmi.n	800516e <_printf_i+0x22e>
 8005146:	68e0      	ldr	r0, [r4, #12]
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	4298      	cmp	r0, r3
 800514c:	bfb8      	it	lt
 800514e:	4618      	movlt	r0, r3
 8005150:	e7a6      	b.n	80050a0 <_printf_i+0x160>
 8005152:	2301      	movs	r3, #1
 8005154:	4632      	mov	r2, r6
 8005156:	4649      	mov	r1, r9
 8005158:	4640      	mov	r0, r8
 800515a:	47d0      	blx	sl
 800515c:	3001      	adds	r0, #1
 800515e:	d09d      	beq.n	800509c <_printf_i+0x15c>
 8005160:	3501      	adds	r5, #1
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	9903      	ldr	r1, [sp, #12]
 8005166:	1a5b      	subs	r3, r3, r1
 8005168:	42ab      	cmp	r3, r5
 800516a:	dcf2      	bgt.n	8005152 <_printf_i+0x212>
 800516c:	e7eb      	b.n	8005146 <_printf_i+0x206>
 800516e:	2500      	movs	r5, #0
 8005170:	f104 0619 	add.w	r6, r4, #25
 8005174:	e7f5      	b.n	8005162 <_printf_i+0x222>
 8005176:	bf00      	nop
 8005178:	080096fe 	.word	0x080096fe
 800517c:	0800970f 	.word	0x0800970f

08005180 <_scanf_float>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	b087      	sub	sp, #28
 8005186:	4617      	mov	r7, r2
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	688b      	ldr	r3, [r1, #8]
 800518c:	1e5a      	subs	r2, r3, #1
 800518e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005192:	bf81      	itttt	hi
 8005194:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005198:	eb03 0b05 	addhi.w	fp, r3, r5
 800519c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80051a0:	608b      	strhi	r3, [r1, #8]
 80051a2:	680b      	ldr	r3, [r1, #0]
 80051a4:	460a      	mov	r2, r1
 80051a6:	f04f 0500 	mov.w	r5, #0
 80051aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80051ae:	f842 3b1c 	str.w	r3, [r2], #28
 80051b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051b6:	4680      	mov	r8, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	bf98      	it	ls
 80051bc:	f04f 0b00 	movls.w	fp, #0
 80051c0:	9201      	str	r2, [sp, #4]
 80051c2:	4616      	mov	r6, r2
 80051c4:	46aa      	mov	sl, r5
 80051c6:	46a9      	mov	r9, r5
 80051c8:	9502      	str	r5, [sp, #8]
 80051ca:	68a2      	ldr	r2, [r4, #8]
 80051cc:	b152      	cbz	r2, 80051e4 <_scanf_float+0x64>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80051d4:	d864      	bhi.n	80052a0 <_scanf_float+0x120>
 80051d6:	2b40      	cmp	r3, #64	@ 0x40
 80051d8:	d83c      	bhi.n	8005254 <_scanf_float+0xd4>
 80051da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80051de:	b2c8      	uxtb	r0, r1
 80051e0:	280e      	cmp	r0, #14
 80051e2:	d93a      	bls.n	800525a <_scanf_float+0xda>
 80051e4:	f1b9 0f00 	cmp.w	r9, #0
 80051e8:	d003      	beq.n	80051f2 <_scanf_float+0x72>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051f6:	f1ba 0f01 	cmp.w	sl, #1
 80051fa:	f200 8117 	bhi.w	800542c <_scanf_float+0x2ac>
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	429e      	cmp	r6, r3
 8005202:	f200 8108 	bhi.w	8005416 <_scanf_float+0x296>
 8005206:	2001      	movs	r0, #1
 8005208:	b007      	add	sp, #28
 800520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005212:	2a0d      	cmp	r2, #13
 8005214:	d8e6      	bhi.n	80051e4 <_scanf_float+0x64>
 8005216:	a101      	add	r1, pc, #4	@ (adr r1, 800521c <_scanf_float+0x9c>)
 8005218:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800521c:	08005363 	.word	0x08005363
 8005220:	080051e5 	.word	0x080051e5
 8005224:	080051e5 	.word	0x080051e5
 8005228:	080051e5 	.word	0x080051e5
 800522c:	080053c3 	.word	0x080053c3
 8005230:	0800539b 	.word	0x0800539b
 8005234:	080051e5 	.word	0x080051e5
 8005238:	080051e5 	.word	0x080051e5
 800523c:	08005371 	.word	0x08005371
 8005240:	080051e5 	.word	0x080051e5
 8005244:	080051e5 	.word	0x080051e5
 8005248:	080051e5 	.word	0x080051e5
 800524c:	080051e5 	.word	0x080051e5
 8005250:	08005329 	.word	0x08005329
 8005254:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005258:	e7db      	b.n	8005212 <_scanf_float+0x92>
 800525a:	290e      	cmp	r1, #14
 800525c:	d8c2      	bhi.n	80051e4 <_scanf_float+0x64>
 800525e:	a001      	add	r0, pc, #4	@ (adr r0, 8005264 <_scanf_float+0xe4>)
 8005260:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005264:	08005319 	.word	0x08005319
 8005268:	080051e5 	.word	0x080051e5
 800526c:	08005319 	.word	0x08005319
 8005270:	080053af 	.word	0x080053af
 8005274:	080051e5 	.word	0x080051e5
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052ff 	.word	0x080052ff
 8005280:	080052ff 	.word	0x080052ff
 8005284:	080052ff 	.word	0x080052ff
 8005288:	080052ff 	.word	0x080052ff
 800528c:	080052ff 	.word	0x080052ff
 8005290:	080052ff 	.word	0x080052ff
 8005294:	080052ff 	.word	0x080052ff
 8005298:	080052ff 	.word	0x080052ff
 800529c:	080052ff 	.word	0x080052ff
 80052a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80052a2:	d809      	bhi.n	80052b8 <_scanf_float+0x138>
 80052a4:	2b60      	cmp	r3, #96	@ 0x60
 80052a6:	d8b2      	bhi.n	800520e <_scanf_float+0x8e>
 80052a8:	2b54      	cmp	r3, #84	@ 0x54
 80052aa:	d07b      	beq.n	80053a4 <_scanf_float+0x224>
 80052ac:	2b59      	cmp	r3, #89	@ 0x59
 80052ae:	d199      	bne.n	80051e4 <_scanf_float+0x64>
 80052b0:	2d07      	cmp	r5, #7
 80052b2:	d197      	bne.n	80051e4 <_scanf_float+0x64>
 80052b4:	2508      	movs	r5, #8
 80052b6:	e02c      	b.n	8005312 <_scanf_float+0x192>
 80052b8:	2b74      	cmp	r3, #116	@ 0x74
 80052ba:	d073      	beq.n	80053a4 <_scanf_float+0x224>
 80052bc:	2b79      	cmp	r3, #121	@ 0x79
 80052be:	e7f6      	b.n	80052ae <_scanf_float+0x12e>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	05c8      	lsls	r0, r1, #23
 80052c4:	d51b      	bpl.n	80052fe <_scanf_float+0x17e>
 80052c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80052ca:	6021      	str	r1, [r4, #0]
 80052cc:	f109 0901 	add.w	r9, r9, #1
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	d003      	beq.n	80052de <_scanf_float+0x15e>
 80052d6:	3201      	adds	r2, #1
 80052d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052dc:	60a2      	str	r2, [r4, #8]
 80052de:	68a3      	ldr	r3, [r4, #8]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	60a3      	str	r3, [r4, #8]
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	3301      	adds	r3, #1
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f340 8087 	ble.w	8005404 <_scanf_float+0x284>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	e765      	b.n	80051ca <_scanf_float+0x4a>
 80052fe:	eb1a 0105 	adds.w	r1, sl, r5
 8005302:	f47f af6f 	bne.w	80051e4 <_scanf_float+0x64>
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800530c:	6022      	str	r2, [r4, #0]
 800530e:	460d      	mov	r5, r1
 8005310:	468a      	mov	sl, r1
 8005312:	f806 3b01 	strb.w	r3, [r6], #1
 8005316:	e7e2      	b.n	80052de <_scanf_float+0x15e>
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	0610      	lsls	r0, r2, #24
 800531c:	f57f af62 	bpl.w	80051e4 <_scanf_float+0x64>
 8005320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005324:	6022      	str	r2, [r4, #0]
 8005326:	e7f4      	b.n	8005312 <_scanf_float+0x192>
 8005328:	f1ba 0f00 	cmp.w	sl, #0
 800532c:	d10e      	bne.n	800534c <_scanf_float+0x1cc>
 800532e:	f1b9 0f00 	cmp.w	r9, #0
 8005332:	d10e      	bne.n	8005352 <_scanf_float+0x1d2>
 8005334:	6822      	ldr	r2, [r4, #0]
 8005336:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800533a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800533e:	d108      	bne.n	8005352 <_scanf_float+0x1d2>
 8005340:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	f04f 0a01 	mov.w	sl, #1
 800534a:	e7e2      	b.n	8005312 <_scanf_float+0x192>
 800534c:	f1ba 0f02 	cmp.w	sl, #2
 8005350:	d055      	beq.n	80053fe <_scanf_float+0x27e>
 8005352:	2d01      	cmp	r5, #1
 8005354:	d002      	beq.n	800535c <_scanf_float+0x1dc>
 8005356:	2d04      	cmp	r5, #4
 8005358:	f47f af44 	bne.w	80051e4 <_scanf_float+0x64>
 800535c:	3501      	adds	r5, #1
 800535e:	b2ed      	uxtb	r5, r5
 8005360:	e7d7      	b.n	8005312 <_scanf_float+0x192>
 8005362:	f1ba 0f01 	cmp.w	sl, #1
 8005366:	f47f af3d 	bne.w	80051e4 <_scanf_float+0x64>
 800536a:	f04f 0a02 	mov.w	sl, #2
 800536e:	e7d0      	b.n	8005312 <_scanf_float+0x192>
 8005370:	b97d      	cbnz	r5, 8005392 <_scanf_float+0x212>
 8005372:	f1b9 0f00 	cmp.w	r9, #0
 8005376:	f47f af38 	bne.w	80051ea <_scanf_float+0x6a>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005384:	f040 8108 	bne.w	8005598 <_scanf_float+0x418>
 8005388:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	2501      	movs	r5, #1
 8005390:	e7bf      	b.n	8005312 <_scanf_float+0x192>
 8005392:	2d03      	cmp	r5, #3
 8005394:	d0e2      	beq.n	800535c <_scanf_float+0x1dc>
 8005396:	2d05      	cmp	r5, #5
 8005398:	e7de      	b.n	8005358 <_scanf_float+0x1d8>
 800539a:	2d02      	cmp	r5, #2
 800539c:	f47f af22 	bne.w	80051e4 <_scanf_float+0x64>
 80053a0:	2503      	movs	r5, #3
 80053a2:	e7b6      	b.n	8005312 <_scanf_float+0x192>
 80053a4:	2d06      	cmp	r5, #6
 80053a6:	f47f af1d 	bne.w	80051e4 <_scanf_float+0x64>
 80053aa:	2507      	movs	r5, #7
 80053ac:	e7b1      	b.n	8005312 <_scanf_float+0x192>
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	0591      	lsls	r1, r2, #22
 80053b2:	f57f af17 	bpl.w	80051e4 <_scanf_float+0x64>
 80053b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80053c0:	e7a7      	b.n	8005312 <_scanf_float+0x192>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80053c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053cc:	d006      	beq.n	80053dc <_scanf_float+0x25c>
 80053ce:	0550      	lsls	r0, r2, #21
 80053d0:	f57f af08 	bpl.w	80051e4 <_scanf_float+0x64>
 80053d4:	f1b9 0f00 	cmp.w	r9, #0
 80053d8:	f000 80de 	beq.w	8005598 <_scanf_float+0x418>
 80053dc:	0591      	lsls	r1, r2, #22
 80053de:	bf58      	it	pl
 80053e0:	9902      	ldrpl	r1, [sp, #8]
 80053e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053e6:	bf58      	it	pl
 80053e8:	eba9 0101 	subpl.w	r1, r9, r1
 80053ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80053f0:	bf58      	it	pl
 80053f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053f6:	6022      	str	r2, [r4, #0]
 80053f8:	f04f 0900 	mov.w	r9, #0
 80053fc:	e789      	b.n	8005312 <_scanf_float+0x192>
 80053fe:	f04f 0a03 	mov.w	sl, #3
 8005402:	e786      	b.n	8005312 <_scanf_float+0x192>
 8005404:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005408:	4639      	mov	r1, r7
 800540a:	4640      	mov	r0, r8
 800540c:	4798      	blx	r3
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f aedb 	beq.w	80051ca <_scanf_float+0x4a>
 8005414:	e6e6      	b.n	80051e4 <_scanf_float+0x64>
 8005416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800541a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800541e:	463a      	mov	r2, r7
 8005420:	4640      	mov	r0, r8
 8005422:	4798      	blx	r3
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	3b01      	subs	r3, #1
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	e6e8      	b.n	80051fe <_scanf_float+0x7e>
 800542c:	1e6b      	subs	r3, r5, #1
 800542e:	2b06      	cmp	r3, #6
 8005430:	d824      	bhi.n	800547c <_scanf_float+0x2fc>
 8005432:	2d02      	cmp	r5, #2
 8005434:	d836      	bhi.n	80054a4 <_scanf_float+0x324>
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	429e      	cmp	r6, r3
 800543a:	f67f aee4 	bls.w	8005206 <_scanf_float+0x86>
 800543e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005446:	463a      	mov	r2, r7
 8005448:	4640      	mov	r0, r8
 800544a:	4798      	blx	r3
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	3b01      	subs	r3, #1
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	e7f0      	b.n	8005436 <_scanf_float+0x2b6>
 8005454:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005458:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800545c:	463a      	mov	r2, r7
 800545e:	4640      	mov	r0, r8
 8005460:	4798      	blx	r3
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	3b01      	subs	r3, #1
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800546c:	fa5f fa8a 	uxtb.w	sl, sl
 8005470:	f1ba 0f02 	cmp.w	sl, #2
 8005474:	d1ee      	bne.n	8005454 <_scanf_float+0x2d4>
 8005476:	3d03      	subs	r5, #3
 8005478:	b2ed      	uxtb	r5, r5
 800547a:	1b76      	subs	r6, r6, r5
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	05da      	lsls	r2, r3, #23
 8005480:	d530      	bpl.n	80054e4 <_scanf_float+0x364>
 8005482:	055b      	lsls	r3, r3, #21
 8005484:	d511      	bpl.n	80054aa <_scanf_float+0x32a>
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	429e      	cmp	r6, r3
 800548a:	f67f aebc 	bls.w	8005206 <_scanf_float+0x86>
 800548e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005496:	463a      	mov	r2, r7
 8005498:	4640      	mov	r0, r8
 800549a:	4798      	blx	r3
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	3b01      	subs	r3, #1
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	e7f0      	b.n	8005486 <_scanf_float+0x306>
 80054a4:	46aa      	mov	sl, r5
 80054a6:	46b3      	mov	fp, r6
 80054a8:	e7de      	b.n	8005468 <_scanf_float+0x2e8>
 80054aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	2965      	cmp	r1, #101	@ 0x65
 80054b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	d00c      	beq.n	80054d8 <_scanf_float+0x358>
 80054be:	2945      	cmp	r1, #69	@ 0x45
 80054c0:	d00a      	beq.n	80054d8 <_scanf_float+0x358>
 80054c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054c6:	463a      	mov	r2, r7
 80054c8:	4640      	mov	r0, r8
 80054ca:	4798      	blx	r3
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	1eb5      	subs	r5, r6, #2
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054dc:	463a      	mov	r2, r7
 80054de:	4640      	mov	r0, r8
 80054e0:	4798      	blx	r3
 80054e2:	462e      	mov	r6, r5
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	f012 0210 	ands.w	r2, r2, #16
 80054ea:	d001      	beq.n	80054f0 <_scanf_float+0x370>
 80054ec:	2000      	movs	r0, #0
 80054ee:	e68b      	b.n	8005208 <_scanf_float+0x88>
 80054f0:	7032      	strb	r2, [r6, #0]
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fc:	d11c      	bne.n	8005538 <_scanf_float+0x3b8>
 80054fe:	9b02      	ldr	r3, [sp, #8]
 8005500:	454b      	cmp	r3, r9
 8005502:	eba3 0209 	sub.w	r2, r3, r9
 8005506:	d123      	bne.n	8005550 <_scanf_float+0x3d0>
 8005508:	9901      	ldr	r1, [sp, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	4640      	mov	r0, r8
 800550e:	f002 fc0b 	bl	8007d28 <_strtod_r>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	6821      	ldr	r1, [r4, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f011 0f02 	tst.w	r1, #2
 800551c:	ec57 6b10 	vmov	r6, r7, d0
 8005520:	f103 0204 	add.w	r2, r3, #4
 8005524:	d01f      	beq.n	8005566 <_scanf_float+0x3e6>
 8005526:	9903      	ldr	r1, [sp, #12]
 8005528:	600a      	str	r2, [r1, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	e9c3 6700 	strd	r6, r7, [r3]
 8005530:	68e3      	ldr	r3, [r4, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60e3      	str	r3, [r4, #12]
 8005536:	e7d9      	b.n	80054ec <_scanf_float+0x36c>
 8005538:	9b04      	ldr	r3, [sp, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0e4      	beq.n	8005508 <_scanf_float+0x388>
 800553e:	9905      	ldr	r1, [sp, #20]
 8005540:	230a      	movs	r3, #10
 8005542:	3101      	adds	r1, #1
 8005544:	4640      	mov	r0, r8
 8005546:	f002 fc6f 	bl	8007e28 <_strtol_r>
 800554a:	9b04      	ldr	r3, [sp, #16]
 800554c:	9e05      	ldr	r6, [sp, #20]
 800554e:	1ac2      	subs	r2, r0, r3
 8005550:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005554:	429e      	cmp	r6, r3
 8005556:	bf28      	it	cs
 8005558:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800555c:	4910      	ldr	r1, [pc, #64]	@ (80055a0 <_scanf_float+0x420>)
 800555e:	4630      	mov	r0, r6
 8005560:	f000 f8f6 	bl	8005750 <siprintf>
 8005564:	e7d0      	b.n	8005508 <_scanf_float+0x388>
 8005566:	f011 0f04 	tst.w	r1, #4
 800556a:	9903      	ldr	r1, [sp, #12]
 800556c:	600a      	str	r2, [r1, #0]
 800556e:	d1dc      	bne.n	800552a <_scanf_float+0x3aa>
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	4632      	mov	r2, r6
 8005574:	463b      	mov	r3, r7
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fb fadf 	bl	8000b3c <__aeabi_dcmpun>
 800557e:	b128      	cbz	r0, 800558c <_scanf_float+0x40c>
 8005580:	4808      	ldr	r0, [pc, #32]	@ (80055a4 <_scanf_float+0x424>)
 8005582:	f000 f9c9 	bl	8005918 <nanf>
 8005586:	ed85 0a00 	vstr	s0, [r5]
 800558a:	e7d1      	b.n	8005530 <_scanf_float+0x3b0>
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	f7fb fb32 	bl	8000bf8 <__aeabi_d2f>
 8005594:	6028      	str	r0, [r5, #0]
 8005596:	e7cb      	b.n	8005530 <_scanf_float+0x3b0>
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	e629      	b.n	80051f2 <_scanf_float+0x72>
 800559e:	bf00      	nop
 80055a0:	08009720 	.word	0x08009720
 80055a4:	08009ab5 	.word	0x08009ab5

080055a8 <std>:
 80055a8:	2300      	movs	r3, #0
 80055aa:	b510      	push	{r4, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	e9c0 3300 	strd	r3, r3, [r0]
 80055b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055b6:	6083      	str	r3, [r0, #8]
 80055b8:	8181      	strh	r1, [r0, #12]
 80055ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80055bc:	81c2      	strh	r2, [r0, #14]
 80055be:	6183      	str	r3, [r0, #24]
 80055c0:	4619      	mov	r1, r3
 80055c2:	2208      	movs	r2, #8
 80055c4:	305c      	adds	r0, #92	@ 0x5c
 80055c6:	f000 f926 	bl	8005816 <memset>
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <std+0x58>)
 80055cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <std+0x5c>)
 80055d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <std+0x60>)
 80055d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <std+0x64>)
 80055d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <std+0x68>)
 80055dc:	6224      	str	r4, [r4, #32]
 80055de:	429c      	cmp	r4, r3
 80055e0:	d006      	beq.n	80055f0 <std+0x48>
 80055e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055e6:	4294      	cmp	r4, r2
 80055e8:	d002      	beq.n	80055f0 <std+0x48>
 80055ea:	33d0      	adds	r3, #208	@ 0xd0
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d105      	bne.n	80055fc <std+0x54>
 80055f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f8:	f000 b98a 	b.w	8005910 <__retarget_lock_init_recursive>
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	bf00      	nop
 8005600:	08005791 	.word	0x08005791
 8005604:	080057b3 	.word	0x080057b3
 8005608:	080057eb 	.word	0x080057eb
 800560c:	0800580f 	.word	0x0800580f
 8005610:	20000714 	.word	0x20000714

08005614 <stdio_exit_handler>:
 8005614:	4a02      	ldr	r2, [pc, #8]	@ (8005620 <stdio_exit_handler+0xc>)
 8005616:	4903      	ldr	r1, [pc, #12]	@ (8005624 <stdio_exit_handler+0x10>)
 8005618:	4803      	ldr	r0, [pc, #12]	@ (8005628 <stdio_exit_handler+0x14>)
 800561a:	f000 b869 	b.w	80056f0 <_fwalk_sglue>
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c
 8005624:	08008469 	.word	0x08008469
 8005628:	2000001c 	.word	0x2000001c

0800562c <cleanup_stdio>:
 800562c:	6841      	ldr	r1, [r0, #4]
 800562e:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <cleanup_stdio+0x34>)
 8005630:	4299      	cmp	r1, r3
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	d001      	beq.n	800563c <cleanup_stdio+0x10>
 8005638:	f002 ff16 	bl	8008468 <_fflush_r>
 800563c:	68a1      	ldr	r1, [r4, #8]
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <cleanup_stdio+0x38>)
 8005640:	4299      	cmp	r1, r3
 8005642:	d002      	beq.n	800564a <cleanup_stdio+0x1e>
 8005644:	4620      	mov	r0, r4
 8005646:	f002 ff0f 	bl	8008468 <_fflush_r>
 800564a:	68e1      	ldr	r1, [r4, #12]
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <cleanup_stdio+0x3c>)
 800564e:	4299      	cmp	r1, r3
 8005650:	d004      	beq.n	800565c <cleanup_stdio+0x30>
 8005652:	4620      	mov	r0, r4
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f002 bf06 	b.w	8008468 <_fflush_r>
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop
 8005660:	20000714 	.word	0x20000714
 8005664:	2000077c 	.word	0x2000077c
 8005668:	200007e4 	.word	0x200007e4

0800566c <global_stdio_init.part.0>:
 800566c:	b510      	push	{r4, lr}
 800566e:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <global_stdio_init.part.0+0x30>)
 8005670:	4c0b      	ldr	r4, [pc, #44]	@ (80056a0 <global_stdio_init.part.0+0x34>)
 8005672:	4a0c      	ldr	r2, [pc, #48]	@ (80056a4 <global_stdio_init.part.0+0x38>)
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	4620      	mov	r0, r4
 8005678:	2200      	movs	r2, #0
 800567a:	2104      	movs	r1, #4
 800567c:	f7ff ff94 	bl	80055a8 <std>
 8005680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005684:	2201      	movs	r2, #1
 8005686:	2109      	movs	r1, #9
 8005688:	f7ff ff8e 	bl	80055a8 <std>
 800568c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005690:	2202      	movs	r2, #2
 8005692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005696:	2112      	movs	r1, #18
 8005698:	f7ff bf86 	b.w	80055a8 <std>
 800569c:	2000084c 	.word	0x2000084c
 80056a0:	20000714 	.word	0x20000714
 80056a4:	08005615 	.word	0x08005615

080056a8 <__sfp_lock_acquire>:
 80056a8:	4801      	ldr	r0, [pc, #4]	@ (80056b0 <__sfp_lock_acquire+0x8>)
 80056aa:	f000 b932 	b.w	8005912 <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20000855 	.word	0x20000855

080056b4 <__sfp_lock_release>:
 80056b4:	4801      	ldr	r0, [pc, #4]	@ (80056bc <__sfp_lock_release+0x8>)
 80056b6:	f000 b92d 	b.w	8005914 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000855 	.word	0x20000855

080056c0 <__sinit>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	4604      	mov	r4, r0
 80056c4:	f7ff fff0 	bl	80056a8 <__sfp_lock_acquire>
 80056c8:	6a23      	ldr	r3, [r4, #32]
 80056ca:	b11b      	cbz	r3, 80056d4 <__sinit+0x14>
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d0:	f7ff bff0 	b.w	80056b4 <__sfp_lock_release>
 80056d4:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <__sinit+0x28>)
 80056d6:	6223      	str	r3, [r4, #32]
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <__sinit+0x2c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f5      	bne.n	80056cc <__sinit+0xc>
 80056e0:	f7ff ffc4 	bl	800566c <global_stdio_init.part.0>
 80056e4:	e7f2      	b.n	80056cc <__sinit+0xc>
 80056e6:	bf00      	nop
 80056e8:	0800562d 	.word	0x0800562d
 80056ec:	2000084c 	.word	0x2000084c

080056f0 <_fwalk_sglue>:
 80056f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f4:	4607      	mov	r7, r0
 80056f6:	4688      	mov	r8, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	2600      	movs	r6, #0
 80056fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005700:	f1b9 0901 	subs.w	r9, r9, #1
 8005704:	d505      	bpl.n	8005712 <_fwalk_sglue+0x22>
 8005706:	6824      	ldr	r4, [r4, #0]
 8005708:	2c00      	cmp	r4, #0
 800570a:	d1f7      	bne.n	80056fc <_fwalk_sglue+0xc>
 800570c:	4630      	mov	r0, r6
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d907      	bls.n	8005728 <_fwalk_sglue+0x38>
 8005718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800571c:	3301      	adds	r3, #1
 800571e:	d003      	beq.n	8005728 <_fwalk_sglue+0x38>
 8005720:	4629      	mov	r1, r5
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	4306      	orrs	r6, r0
 8005728:	3568      	adds	r5, #104	@ 0x68
 800572a:	e7e9      	b.n	8005700 <_fwalk_sglue+0x10>

0800572c <iprintf>:
 800572c:	b40f      	push	{r0, r1, r2, r3}
 800572e:	b507      	push	{r0, r1, r2, lr}
 8005730:	4906      	ldr	r1, [pc, #24]	@ (800574c <iprintf+0x20>)
 8005732:	ab04      	add	r3, sp, #16
 8005734:	6808      	ldr	r0, [r1, #0]
 8005736:	f853 2b04 	ldr.w	r2, [r3], #4
 800573a:	6881      	ldr	r1, [r0, #8]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	f002 fcf7 	bl	8008130 <_vfiprintf_r>
 8005742:	b003      	add	sp, #12
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr
 800574c:	20000018 	.word	0x20000018

08005750 <siprintf>:
 8005750:	b40e      	push	{r1, r2, r3}
 8005752:	b500      	push	{lr}
 8005754:	b09c      	sub	sp, #112	@ 0x70
 8005756:	ab1d      	add	r3, sp, #116	@ 0x74
 8005758:	9002      	str	r0, [sp, #8]
 800575a:	9006      	str	r0, [sp, #24]
 800575c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005760:	4809      	ldr	r0, [pc, #36]	@ (8005788 <siprintf+0x38>)
 8005762:	9107      	str	r1, [sp, #28]
 8005764:	9104      	str	r1, [sp, #16]
 8005766:	4909      	ldr	r1, [pc, #36]	@ (800578c <siprintf+0x3c>)
 8005768:	f853 2b04 	ldr.w	r2, [r3], #4
 800576c:	9105      	str	r1, [sp, #20]
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	a902      	add	r1, sp, #8
 8005774:	f002 fbb6 	bl	8007ee4 <_svfiprintf_r>
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	b01c      	add	sp, #112	@ 0x70
 8005780:	f85d eb04 	ldr.w	lr, [sp], #4
 8005784:	b003      	add	sp, #12
 8005786:	4770      	bx	lr
 8005788:	20000018 	.word	0x20000018
 800578c:	ffff0208 	.word	0xffff0208

08005790 <__sread>:
 8005790:	b510      	push	{r4, lr}
 8005792:	460c      	mov	r4, r1
 8005794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005798:	f000 f86c 	bl	8005874 <_read_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	bfab      	itete	ge
 80057a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057a2:	89a3      	ldrhlt	r3, [r4, #12]
 80057a4:	181b      	addge	r3, r3, r0
 80057a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057aa:	bfac      	ite	ge
 80057ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057ae:	81a3      	strhlt	r3, [r4, #12]
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <__swrite>:
 80057b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	461f      	mov	r7, r3
 80057b8:	898b      	ldrh	r3, [r1, #12]
 80057ba:	05db      	lsls	r3, r3, #23
 80057bc:	4605      	mov	r5, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4616      	mov	r6, r2
 80057c2:	d505      	bpl.n	80057d0 <__swrite+0x1e>
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	2302      	movs	r3, #2
 80057ca:	2200      	movs	r2, #0
 80057cc:	f000 f840 	bl	8005850 <_lseek_r>
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	4632      	mov	r2, r6
 80057de:	463b      	mov	r3, r7
 80057e0:	4628      	mov	r0, r5
 80057e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	f000 b857 	b.w	8005898 <_write_r>

080057ea <__sseek>:
 80057ea:	b510      	push	{r4, lr}
 80057ec:	460c      	mov	r4, r1
 80057ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f2:	f000 f82d 	bl	8005850 <_lseek_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	bf15      	itete	ne
 80057fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005806:	81a3      	strheq	r3, [r4, #12]
 8005808:	bf18      	it	ne
 800580a:	81a3      	strhne	r3, [r4, #12]
 800580c:	bd10      	pop	{r4, pc}

0800580e <__sclose>:
 800580e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005812:	f000 b80d 	b.w	8005830 <_close_r>

08005816 <memset>:
 8005816:	4402      	add	r2, r0
 8005818:	4603      	mov	r3, r0
 800581a:	4293      	cmp	r3, r2
 800581c:	d100      	bne.n	8005820 <memset+0xa>
 800581e:	4770      	bx	lr
 8005820:	f803 1b01 	strb.w	r1, [r3], #1
 8005824:	e7f9      	b.n	800581a <memset+0x4>
	...

08005828 <_localeconv_r>:
 8005828:	4800      	ldr	r0, [pc, #0]	@ (800582c <_localeconv_r+0x4>)
 800582a:	4770      	bx	lr
 800582c:	20000158 	.word	0x20000158

08005830 <_close_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	@ (800584c <_close_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fc fb4d 	bl	8001eda <_close>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_close_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_close_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000850 	.word	0x20000850

08005850 <_lseek_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	@ (8005870 <_lseek_r+0x20>)
 8005854:	4604      	mov	r4, r0
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	2200      	movs	r2, #0
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fc fb62 	bl	8001f28 <_lseek>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_lseek_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_lseek_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	20000850 	.word	0x20000850

08005874 <_read_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d07      	ldr	r5, [pc, #28]	@ (8005894 <_read_r+0x20>)
 8005878:	4604      	mov	r4, r0
 800587a:	4608      	mov	r0, r1
 800587c:	4611      	mov	r1, r2
 800587e:	2200      	movs	r2, #0
 8005880:	602a      	str	r2, [r5, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fc faf0 	bl	8001e68 <_read>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_read_r+0x1e>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_read_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000850 	.word	0x20000850

08005898 <_write_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d07      	ldr	r5, [pc, #28]	@ (80058b8 <_write_r+0x20>)
 800589c:	4604      	mov	r4, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	2200      	movs	r2, #0
 80058a4:	602a      	str	r2, [r5, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f7fc fafb 	bl	8001ea2 <_write>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_write_r+0x1e>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_write_r+0x1e>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20000850 	.word	0x20000850

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	@ (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000018 	.word	0x20000018

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005900 <__libc_init_array+0x38>)
 80058cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005904 <__libc_init_array+0x3c>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	2600      	movs	r6, #0
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005908 <__libc_init_array+0x40>)
 80058da:	4c0c      	ldr	r4, [pc, #48]	@ (800590c <__libc_init_array+0x44>)
 80058dc:	f003 fee6 	bl	80096ac <_init>
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	2600      	movs	r6, #0
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08009b90 	.word	0x08009b90
 8005904:	08009b90 	.word	0x08009b90
 8005908:	08009b90 	.word	0x08009b90
 800590c:	08009b94 	.word	0x08009b94

08005910 <__retarget_lock_init_recursive>:
 8005910:	4770      	bx	lr

08005912 <__retarget_lock_acquire_recursive>:
 8005912:	4770      	bx	lr

08005914 <__retarget_lock_release_recursive>:
 8005914:	4770      	bx	lr
	...

08005918 <nanf>:
 8005918:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005920 <nanf+0x8>
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	7fc00000 	.word	0x7fc00000

08005924 <quorem>:
 8005924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	6903      	ldr	r3, [r0, #16]
 800592a:	690c      	ldr	r4, [r1, #16]
 800592c:	42a3      	cmp	r3, r4
 800592e:	4607      	mov	r7, r0
 8005930:	db7e      	blt.n	8005a30 <quorem+0x10c>
 8005932:	3c01      	subs	r4, #1
 8005934:	f101 0814 	add.w	r8, r1, #20
 8005938:	00a3      	lsls	r3, r4, #2
 800593a:	f100 0514 	add.w	r5, r0, #20
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800594a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800594e:	3301      	adds	r3, #1
 8005950:	429a      	cmp	r2, r3
 8005952:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005956:	fbb2 f6f3 	udiv	r6, r2, r3
 800595a:	d32e      	bcc.n	80059ba <quorem+0x96>
 800595c:	f04f 0a00 	mov.w	sl, #0
 8005960:	46c4      	mov	ip, r8
 8005962:	46ae      	mov	lr, r5
 8005964:	46d3      	mov	fp, sl
 8005966:	f85c 3b04 	ldr.w	r3, [ip], #4
 800596a:	b298      	uxth	r0, r3
 800596c:	fb06 a000 	mla	r0, r6, r0, sl
 8005970:	0c02      	lsrs	r2, r0, #16
 8005972:	0c1b      	lsrs	r3, r3, #16
 8005974:	fb06 2303 	mla	r3, r6, r3, r2
 8005978:	f8de 2000 	ldr.w	r2, [lr]
 800597c:	b280      	uxth	r0, r0
 800597e:	b292      	uxth	r2, r2
 8005980:	1a12      	subs	r2, r2, r0
 8005982:	445a      	add	r2, fp
 8005984:	f8de 0000 	ldr.w	r0, [lr]
 8005988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800598c:	b29b      	uxth	r3, r3
 800598e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005992:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005996:	b292      	uxth	r2, r2
 8005998:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800599c:	45e1      	cmp	r9, ip
 800599e:	f84e 2b04 	str.w	r2, [lr], #4
 80059a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059a6:	d2de      	bcs.n	8005966 <quorem+0x42>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	58eb      	ldr	r3, [r5, r3]
 80059ac:	b92b      	cbnz	r3, 80059ba <quorem+0x96>
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	3b04      	subs	r3, #4
 80059b2:	429d      	cmp	r5, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	d32f      	bcc.n	8005a18 <quorem+0xf4>
 80059b8:	613c      	str	r4, [r7, #16]
 80059ba:	4638      	mov	r0, r7
 80059bc:	f001 f9c4 	bl	8006d48 <__mcmp>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	db25      	blt.n	8005a10 <quorem+0xec>
 80059c4:	4629      	mov	r1, r5
 80059c6:	2000      	movs	r0, #0
 80059c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80059cc:	f8d1 c000 	ldr.w	ip, [r1]
 80059d0:	fa1f fe82 	uxth.w	lr, r2
 80059d4:	fa1f f38c 	uxth.w	r3, ip
 80059d8:	eba3 030e 	sub.w	r3, r3, lr
 80059dc:	4403      	add	r3, r0
 80059de:	0c12      	lsrs	r2, r2, #16
 80059e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ee:	45c1      	cmp	r9, r8
 80059f0:	f841 3b04 	str.w	r3, [r1], #4
 80059f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059f8:	d2e6      	bcs.n	80059c8 <quorem+0xa4>
 80059fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a02:	b922      	cbnz	r2, 8005a0e <quorem+0xea>
 8005a04:	3b04      	subs	r3, #4
 8005a06:	429d      	cmp	r5, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	d30b      	bcc.n	8005a24 <quorem+0x100>
 8005a0c:	613c      	str	r4, [r7, #16]
 8005a0e:	3601      	adds	r6, #1
 8005a10:	4630      	mov	r0, r6
 8005a12:	b003      	add	sp, #12
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	d1cb      	bne.n	80059b8 <quorem+0x94>
 8005a20:	3c01      	subs	r4, #1
 8005a22:	e7c6      	b.n	80059b2 <quorem+0x8e>
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	3b04      	subs	r3, #4
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d1ef      	bne.n	8005a0c <quorem+0xe8>
 8005a2c:	3c01      	subs	r4, #1
 8005a2e:	e7ea      	b.n	8005a06 <quorem+0xe2>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e7ee      	b.n	8005a12 <quorem+0xee>
 8005a34:	0000      	movs	r0, r0
	...

08005a38 <_dtoa_r>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	69c7      	ldr	r7, [r0, #28]
 8005a3e:	b099      	sub	sp, #100	@ 0x64
 8005a40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a44:	ec55 4b10 	vmov	r4, r5, d0
 8005a48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005a4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a4c:	4683      	mov	fp, r0
 8005a4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a52:	b97f      	cbnz	r7, 8005a74 <_dtoa_r+0x3c>
 8005a54:	2010      	movs	r0, #16
 8005a56:	f000 fdfd 	bl	8006654 <malloc>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005a60:	b920      	cbnz	r0, 8005a6c <_dtoa_r+0x34>
 8005a62:	4ba7      	ldr	r3, [pc, #668]	@ (8005d00 <_dtoa_r+0x2c8>)
 8005a64:	21ef      	movs	r1, #239	@ 0xef
 8005a66:	48a7      	ldr	r0, [pc, #668]	@ (8005d04 <_dtoa_r+0x2cc>)
 8005a68:	f002 fe0e 	bl	8008688 <__assert_func>
 8005a6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a70:	6007      	str	r7, [r0, #0]
 8005a72:	60c7      	str	r7, [r0, #12]
 8005a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a78:	6819      	ldr	r1, [r3, #0]
 8005a7a:	b159      	cbz	r1, 8005a94 <_dtoa_r+0x5c>
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	604a      	str	r2, [r1, #4]
 8005a80:	2301      	movs	r3, #1
 8005a82:	4093      	lsls	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	4658      	mov	r0, fp
 8005a88:	f000 feda 	bl	8006840 <_Bfree>
 8005a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	1e2b      	subs	r3, r5, #0
 8005a96:	bfb9      	ittee	lt
 8005a98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a9c:	9303      	strlt	r3, [sp, #12]
 8005a9e:	2300      	movge	r3, #0
 8005aa0:	6033      	strge	r3, [r6, #0]
 8005aa2:	9f03      	ldr	r7, [sp, #12]
 8005aa4:	4b98      	ldr	r3, [pc, #608]	@ (8005d08 <_dtoa_r+0x2d0>)
 8005aa6:	bfbc      	itt	lt
 8005aa8:	2201      	movlt	r2, #1
 8005aaa:	6032      	strlt	r2, [r6, #0]
 8005aac:	43bb      	bics	r3, r7
 8005aae:	d112      	bne.n	8005ad6 <_dtoa_r+0x9e>
 8005ab0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005abc:	4323      	orrs	r3, r4
 8005abe:	f000 854d 	beq.w	800655c <_dtoa_r+0xb24>
 8005ac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ac4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005d1c <_dtoa_r+0x2e4>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 854f 	beq.w	800656c <_dtoa_r+0xb34>
 8005ace:	f10a 0303 	add.w	r3, sl, #3
 8005ad2:	f000 bd49 	b.w	8006568 <_dtoa_r+0xb30>
 8005ad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	ec51 0b17 	vmov	r0, r1, d7
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005ae6:	f7fa fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aea:	4680      	mov	r8, r0
 8005aec:	b158      	cbz	r0, 8005b06 <_dtoa_r+0xce>
 8005aee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005af0:	2301      	movs	r3, #1
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005af6:	b113      	cbz	r3, 8005afe <_dtoa_r+0xc6>
 8005af8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005afa:	4b84      	ldr	r3, [pc, #528]	@ (8005d0c <_dtoa_r+0x2d4>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005d20 <_dtoa_r+0x2e8>
 8005b02:	f000 bd33 	b.w	800656c <_dtoa_r+0xb34>
 8005b06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005b0a:	aa16      	add	r2, sp, #88	@ 0x58
 8005b0c:	a917      	add	r1, sp, #92	@ 0x5c
 8005b0e:	4658      	mov	r0, fp
 8005b10:	f001 fa3a 	bl	8006f88 <__d2b>
 8005b14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b18:	4681      	mov	r9, r0
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	d077      	beq.n	8005c0e <_dtoa_r+0x1d6>
 8005b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b74      	ldr	r3, [pc, #464]	@ (8005d10 <_dtoa_r+0x2d8>)
 8005b3e:	f7fa fbab 	bl	8000298 <__aeabi_dsub>
 8005b42:	a369      	add	r3, pc, #420	@ (adr r3, 8005ce8 <_dtoa_r+0x2b0>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f7fa fd5e 	bl	8000608 <__aeabi_dmul>
 8005b4c:	a368      	add	r3, pc, #416	@ (adr r3, 8005cf0 <_dtoa_r+0x2b8>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fba3 	bl	800029c <__adddf3>
 8005b56:	4604      	mov	r4, r0
 8005b58:	4630      	mov	r0, r6
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	f7fa fcea 	bl	8000534 <__aeabi_i2d>
 8005b60:	a365      	add	r3, pc, #404	@ (adr r3, 8005cf8 <_dtoa_r+0x2c0>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fd4f 	bl	8000608 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa fb93 	bl	800029c <__adddf3>
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	f7fa fff5 	bl	8000b68 <__aeabi_d2iz>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4607      	mov	r7, r0
 8005b82:	2300      	movs	r3, #0
 8005b84:	4620      	mov	r0, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	f7fa ffb0 	bl	8000aec <__aeabi_dcmplt>
 8005b8c:	b140      	cbz	r0, 8005ba0 <_dtoa_r+0x168>
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f7fa fcd0 	bl	8000534 <__aeabi_i2d>
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	f7fa ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b9c:	b900      	cbnz	r0, 8005ba0 <_dtoa_r+0x168>
 8005b9e:	3f01      	subs	r7, #1
 8005ba0:	2f16      	cmp	r7, #22
 8005ba2:	d851      	bhi.n	8005c48 <_dtoa_r+0x210>
 8005ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d14 <_dtoa_r+0x2dc>)
 8005ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bb2:	f7fa ff9b 	bl	8000aec <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d048      	beq.n	8005c4c <_dtoa_r+0x214>
 8005bba:	3f01      	subs	r7, #1
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8005bc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005bc2:	1b9b      	subs	r3, r3, r6
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	bf44      	itt	mi
 8005bc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005bcc:	2300      	movmi	r3, #0
 8005bce:	9208      	str	r2, [sp, #32]
 8005bd0:	bf54      	ite	pl
 8005bd2:	f04f 0800 	movpl.w	r8, #0
 8005bd6:	9308      	strmi	r3, [sp, #32]
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	db39      	blt.n	8005c50 <_dtoa_r+0x218>
 8005bdc:	9b08      	ldr	r3, [sp, #32]
 8005bde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005be0:	443b      	add	r3, r7
 8005be2:	9308      	str	r3, [sp, #32]
 8005be4:	2300      	movs	r3, #0
 8005be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bea:	2b09      	cmp	r3, #9
 8005bec:	d864      	bhi.n	8005cb8 <_dtoa_r+0x280>
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	bfc4      	itt	gt
 8005bf2:	3b04      	subgt	r3, #4
 8005bf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8005bfc:	bfcc      	ite	gt
 8005bfe:	2400      	movgt	r4, #0
 8005c00:	2401      	movle	r4, #1
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d863      	bhi.n	8005cce <_dtoa_r+0x296>
 8005c06:	e8df f003 	tbb	[pc, r3]
 8005c0a:	372a      	.short	0x372a
 8005c0c:	5535      	.short	0x5535
 8005c0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005c12:	441e      	add	r6, r3
 8005c14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	bfc1      	itttt	gt
 8005c1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c20:	409f      	lslgt	r7, r3
 8005c22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c2a:	bfd6      	itet	le
 8005c2c:	f1c3 0320 	rsble	r3, r3, #32
 8005c30:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c34:	fa04 f003 	lslle.w	r0, r4, r3
 8005c38:	f7fa fc6c 	bl	8000514 <__aeabi_ui2d>
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c42:	3e01      	subs	r6, #1
 8005c44:	9214      	str	r2, [sp, #80]	@ 0x50
 8005c46:	e777      	b.n	8005b38 <_dtoa_r+0x100>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e7b8      	b.n	8005bbe <_dtoa_r+0x186>
 8005c4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005c4e:	e7b7      	b.n	8005bc0 <_dtoa_r+0x188>
 8005c50:	427b      	negs	r3, r7
 8005c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c54:	2300      	movs	r3, #0
 8005c56:	eba8 0807 	sub.w	r8, r8, r7
 8005c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c5c:	e7c4      	b.n	8005be8 <_dtoa_r+0x1b0>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dc35      	bgt.n	8005cd4 <_dtoa_r+0x29c>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c72:	e00b      	b.n	8005c8c <_dtoa_r+0x254>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e7f3      	b.n	8005c60 <_dtoa_r+0x228>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	3301      	adds	r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	bfb8      	it	lt
 8005c8a:	2301      	movlt	r3, #1
 8005c8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005c90:	2100      	movs	r1, #0
 8005c92:	2204      	movs	r2, #4
 8005c94:	f102 0514 	add.w	r5, r2, #20
 8005c98:	429d      	cmp	r5, r3
 8005c9a:	d91f      	bls.n	8005cdc <_dtoa_r+0x2a4>
 8005c9c:	6041      	str	r1, [r0, #4]
 8005c9e:	4658      	mov	r0, fp
 8005ca0:	f000 fd8e 	bl	80067c0 <_Balloc>
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d13c      	bne.n	8005d24 <_dtoa_r+0x2ec>
 8005caa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <_dtoa_r+0x2e0>)
 8005cac:	4602      	mov	r2, r0
 8005cae:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cb2:	e6d8      	b.n	8005a66 <_dtoa_r+0x2e>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e7e0      	b.n	8005c7a <_dtoa_r+0x242>
 8005cb8:	2401      	movs	r4, #1
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2312      	movs	r3, #18
 8005ccc:	e7d0      	b.n	8005c70 <_dtoa_r+0x238>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cd2:	e7f5      	b.n	8005cc0 <_dtoa_r+0x288>
 8005cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	9307      	str	r3, [sp, #28]
 8005cda:	e7d7      	b.n	8005c8c <_dtoa_r+0x254>
 8005cdc:	3101      	adds	r1, #1
 8005cde:	0052      	lsls	r2, r2, #1
 8005ce0:	e7d8      	b.n	8005c94 <_dtoa_r+0x25c>
 8005ce2:	bf00      	nop
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	636f4361 	.word	0x636f4361
 8005cec:	3fd287a7 	.word	0x3fd287a7
 8005cf0:	8b60c8b3 	.word	0x8b60c8b3
 8005cf4:	3fc68a28 	.word	0x3fc68a28
 8005cf8:	509f79fb 	.word	0x509f79fb
 8005cfc:	3fd34413 	.word	0x3fd34413
 8005d00:	08009732 	.word	0x08009732
 8005d04:	08009749 	.word	0x08009749
 8005d08:	7ff00000 	.word	0x7ff00000
 8005d0c:	080096fd 	.word	0x080096fd
 8005d10:	3ff80000 	.word	0x3ff80000
 8005d14:	08009840 	.word	0x08009840
 8005d18:	080097a1 	.word	0x080097a1
 8005d1c:	0800972e 	.word	0x0800972e
 8005d20:	080096fc 	.word	0x080096fc
 8005d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d28:	6018      	str	r0, [r3, #0]
 8005d2a:	9b07      	ldr	r3, [sp, #28]
 8005d2c:	2b0e      	cmp	r3, #14
 8005d2e:	f200 80a4 	bhi.w	8005e7a <_dtoa_r+0x442>
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	f000 80a1 	beq.w	8005e7a <_dtoa_r+0x442>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	dd33      	ble.n	8005da4 <_dtoa_r+0x36c>
 8005d3c:	4bad      	ldr	r3, [pc, #692]	@ (8005ff4 <_dtoa_r+0x5bc>)
 8005d3e:	f007 020f 	and.w	r2, r7, #15
 8005d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d46:	ed93 7b00 	vldr	d7, [r3]
 8005d4a:	05f8      	lsls	r0, r7, #23
 8005d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d54:	d516      	bpl.n	8005d84 <_dtoa_r+0x34c>
 8005d56:	4ba8      	ldr	r3, [pc, #672]	@ (8005ff8 <_dtoa_r+0x5c0>)
 8005d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d60:	f7fa fd7c 	bl	800085c <__aeabi_ddiv>
 8005d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d68:	f004 040f 	and.w	r4, r4, #15
 8005d6c:	2603      	movs	r6, #3
 8005d6e:	4da2      	ldr	r5, [pc, #648]	@ (8005ff8 <_dtoa_r+0x5c0>)
 8005d70:	b954      	cbnz	r4, 8005d88 <_dtoa_r+0x350>
 8005d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7a:	f7fa fd6f 	bl	800085c <__aeabi_ddiv>
 8005d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d82:	e028      	b.n	8005dd6 <_dtoa_r+0x39e>
 8005d84:	2602      	movs	r6, #2
 8005d86:	e7f2      	b.n	8005d6e <_dtoa_r+0x336>
 8005d88:	07e1      	lsls	r1, r4, #31
 8005d8a:	d508      	bpl.n	8005d9e <_dtoa_r+0x366>
 8005d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d94:	f7fa fc38 	bl	8000608 <__aeabi_dmul>
 8005d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d9c:	3601      	adds	r6, #1
 8005d9e:	1064      	asrs	r4, r4, #1
 8005da0:	3508      	adds	r5, #8
 8005da2:	e7e5      	b.n	8005d70 <_dtoa_r+0x338>
 8005da4:	f000 80d2 	beq.w	8005f4c <_dtoa_r+0x514>
 8005da8:	427c      	negs	r4, r7
 8005daa:	4b92      	ldr	r3, [pc, #584]	@ (8005ff4 <_dtoa_r+0x5bc>)
 8005dac:	4d92      	ldr	r5, [pc, #584]	@ (8005ff8 <_dtoa_r+0x5c0>)
 8005dae:	f004 020f 	and.w	r2, r4, #15
 8005db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dbe:	f7fa fc23 	bl	8000608 <__aeabi_dmul>
 8005dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc6:	1124      	asrs	r4, r4, #4
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2602      	movs	r6, #2
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	f040 80b2 	bne.w	8005f36 <_dtoa_r+0x4fe>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1d3      	bne.n	8005d7e <_dtoa_r+0x346>
 8005dd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005dd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80b7 	beq.w	8005f50 <_dtoa_r+0x518>
 8005de2:	4b86      	ldr	r3, [pc, #536]	@ (8005ffc <_dtoa_r+0x5c4>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa fe7f 	bl	8000aec <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f000 80ae 	beq.w	8005f50 <_dtoa_r+0x518>
 8005df4:	9b07      	ldr	r3, [sp, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80aa 	beq.w	8005f50 <_dtoa_r+0x518>
 8005dfc:	9b00      	ldr	r3, [sp, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	dd37      	ble.n	8005e72 <_dtoa_r+0x43a>
 8005e02:	1e7b      	subs	r3, r7, #1
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	4620      	mov	r0, r4
 8005e08:	4b7d      	ldr	r3, [pc, #500]	@ (8006000 <_dtoa_r+0x5c8>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fbfb 	bl	8000608 <__aeabi_dmul>
 8005e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e16:	9c00      	ldr	r4, [sp, #0]
 8005e18:	3601      	adds	r6, #1
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7fa fb8a 	bl	8000534 <__aeabi_i2d>
 8005e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e24:	f7fa fbf0 	bl	8000608 <__aeabi_dmul>
 8005e28:	4b76      	ldr	r3, [pc, #472]	@ (8006004 <_dtoa_r+0x5cc>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f7fa fa36 	bl	800029c <__adddf3>
 8005e30:	4605      	mov	r5, r0
 8005e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	f040 808d 	bne.w	8005f56 <_dtoa_r+0x51e>
 8005e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e40:	4b71      	ldr	r3, [pc, #452]	@ (8006008 <_dtoa_r+0x5d0>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	f7fa fa28 	bl	8000298 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e50:	462a      	mov	r2, r5
 8005e52:	4633      	mov	r3, r6
 8005e54:	f7fa fe68 	bl	8000b28 <__aeabi_dcmpgt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 828b 	bne.w	8006374 <_dtoa_r+0x93c>
 8005e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e62:	462a      	mov	r2, r5
 8005e64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e68:	f7fa fe40 	bl	8000aec <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f040 8128 	bne.w	80060c2 <_dtoa_r+0x68a>
 8005e72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005e76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f2c0 815a 	blt.w	8006136 <_dtoa_r+0x6fe>
 8005e82:	2f0e      	cmp	r7, #14
 8005e84:	f300 8157 	bgt.w	8006136 <_dtoa_r+0x6fe>
 8005e88:	4b5a      	ldr	r3, [pc, #360]	@ (8005ff4 <_dtoa_r+0x5bc>)
 8005e8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e8e:	ed93 7b00 	vldr	d7, [r3]
 8005e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	ed8d 7b00 	vstr	d7, [sp]
 8005e9a:	da03      	bge.n	8005ea4 <_dtoa_r+0x46c>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f340 8101 	ble.w	80060a6 <_dtoa_r+0x66e>
 8005ea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ea8:	4656      	mov	r6, sl
 8005eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7fa fcd3 	bl	800085c <__aeabi_ddiv>
 8005eb6:	f7fa fe57 	bl	8000b68 <__aeabi_d2iz>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	f7fa fb3a 	bl	8000534 <__aeabi_i2d>
 8005ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ec4:	f7fa fba0 	bl	8000608 <__aeabi_dmul>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ed4:	f7fa f9e0 	bl	8000298 <__aeabi_dsub>
 8005ed8:	f806 4b01 	strb.w	r4, [r6], #1
 8005edc:	9d07      	ldr	r5, [sp, #28]
 8005ede:	eba6 040a 	sub.w	r4, r6, sl
 8005ee2:	42a5      	cmp	r5, r4
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	f040 8117 	bne.w	800611a <_dtoa_r+0x6e2>
 8005eec:	f7fa f9d6 	bl	800029c <__adddf3>
 8005ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	f7fa fe16 	bl	8000b28 <__aeabi_dcmpgt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 80f9 	bne.w	80060f4 <_dtoa_r+0x6bc>
 8005f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa fde5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f0e:	b118      	cbz	r0, 8005f18 <_dtoa_r+0x4e0>
 8005f10:	f018 0f01 	tst.w	r8, #1
 8005f14:	f040 80ee 	bne.w	80060f4 <_dtoa_r+0x6bc>
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	f000 fc90 	bl	8006840 <_Bfree>
 8005f20:	2300      	movs	r3, #0
 8005f22:	7033      	strb	r3, [r6, #0]
 8005f24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f26:	3701      	adds	r7, #1
 8005f28:	601f      	str	r7, [r3, #0]
 8005f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 831d 	beq.w	800656c <_dtoa_r+0xb34>
 8005f32:	601e      	str	r6, [r3, #0]
 8005f34:	e31a      	b.n	800656c <_dtoa_r+0xb34>
 8005f36:	07e2      	lsls	r2, r4, #31
 8005f38:	d505      	bpl.n	8005f46 <_dtoa_r+0x50e>
 8005f3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f3e:	f7fa fb63 	bl	8000608 <__aeabi_dmul>
 8005f42:	3601      	adds	r6, #1
 8005f44:	2301      	movs	r3, #1
 8005f46:	1064      	asrs	r4, r4, #1
 8005f48:	3508      	adds	r5, #8
 8005f4a:	e73f      	b.n	8005dcc <_dtoa_r+0x394>
 8005f4c:	2602      	movs	r6, #2
 8005f4e:	e742      	b.n	8005dd6 <_dtoa_r+0x39e>
 8005f50:	9c07      	ldr	r4, [sp, #28]
 8005f52:	9704      	str	r7, [sp, #16]
 8005f54:	e761      	b.n	8005e1a <_dtoa_r+0x3e2>
 8005f56:	4b27      	ldr	r3, [pc, #156]	@ (8005ff4 <_dtoa_r+0x5bc>)
 8005f58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f62:	4454      	add	r4, sl
 8005f64:	2900      	cmp	r1, #0
 8005f66:	d053      	beq.n	8006010 <_dtoa_r+0x5d8>
 8005f68:	4928      	ldr	r1, [pc, #160]	@ (800600c <_dtoa_r+0x5d4>)
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f7fa fc76 	bl	800085c <__aeabi_ddiv>
 8005f70:	4633      	mov	r3, r6
 8005f72:	462a      	mov	r2, r5
 8005f74:	f7fa f990 	bl	8000298 <__aeabi_dsub>
 8005f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f7c:	4656      	mov	r6, sl
 8005f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f82:	f7fa fdf1 	bl	8000b68 <__aeabi_d2iz>
 8005f86:	4605      	mov	r5, r0
 8005f88:	f7fa fad4 	bl	8000534 <__aeabi_i2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f94:	f7fa f980 	bl	8000298 <__aeabi_dsub>
 8005f98:	3530      	adds	r5, #48	@ 0x30
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fa2:	f806 5b01 	strb.w	r5, [r6], #1
 8005fa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005faa:	f7fa fd9f 	bl	8000aec <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d171      	bne.n	8006096 <_dtoa_r+0x65e>
 8005fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fb6:	4911      	ldr	r1, [pc, #68]	@ (8005ffc <_dtoa_r+0x5c4>)
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f7fa f96d 	bl	8000298 <__aeabi_dsub>
 8005fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fc2:	f7fa fd93 	bl	8000aec <__aeabi_dcmplt>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f040 8095 	bne.w	80060f6 <_dtoa_r+0x6be>
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	f43f af50 	beq.w	8005e72 <_dtoa_r+0x43a>
 8005fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <_dtoa_r+0x5c8>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f7fa fb15 	bl	8000608 <__aeabi_dmul>
 8005fde:	4b08      	ldr	r3, [pc, #32]	@ (8006000 <_dtoa_r+0x5c8>)
 8005fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fea:	f7fa fb0d 	bl	8000608 <__aeabi_dmul>
 8005fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff2:	e7c4      	b.n	8005f7e <_dtoa_r+0x546>
 8005ff4:	08009840 	.word	0x08009840
 8005ff8:	08009818 	.word	0x08009818
 8005ffc:	3ff00000 	.word	0x3ff00000
 8006000:	40240000 	.word	0x40240000
 8006004:	401c0000 	.word	0x401c0000
 8006008:	40140000 	.word	0x40140000
 800600c:	3fe00000 	.word	0x3fe00000
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	f7fa faf8 	bl	8000608 <__aeabi_dmul>
 8006018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800601c:	9415      	str	r4, [sp, #84]	@ 0x54
 800601e:	4656      	mov	r6, sl
 8006020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006024:	f7fa fda0 	bl	8000b68 <__aeabi_d2iz>
 8006028:	4605      	mov	r5, r0
 800602a:	f7fa fa83 	bl	8000534 <__aeabi_i2d>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006036:	f7fa f92f 	bl	8000298 <__aeabi_dsub>
 800603a:	3530      	adds	r5, #48	@ 0x30
 800603c:	f806 5b01 	strb.w	r5, [r6], #1
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	42a6      	cmp	r6, r4
 8006046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	d124      	bne.n	800609a <_dtoa_r+0x662>
 8006050:	4bac      	ldr	r3, [pc, #688]	@ (8006304 <_dtoa_r+0x8cc>)
 8006052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006056:	f7fa f921 	bl	800029c <__adddf3>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006062:	f7fa fd61 	bl	8000b28 <__aeabi_dcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	d145      	bne.n	80060f6 <_dtoa_r+0x6be>
 800606a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800606e:	49a5      	ldr	r1, [pc, #660]	@ (8006304 <_dtoa_r+0x8cc>)
 8006070:	2000      	movs	r0, #0
 8006072:	f7fa f911 	bl	8000298 <__aeabi_dsub>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607e:	f7fa fd35 	bl	8000aec <__aeabi_dcmplt>
 8006082:	2800      	cmp	r0, #0
 8006084:	f43f aef5 	beq.w	8005e72 <_dtoa_r+0x43a>
 8006088:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800608a:	1e73      	subs	r3, r6, #1
 800608c:	9315      	str	r3, [sp, #84]	@ 0x54
 800608e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006092:	2b30      	cmp	r3, #48	@ 0x30
 8006094:	d0f8      	beq.n	8006088 <_dtoa_r+0x650>
 8006096:	9f04      	ldr	r7, [sp, #16]
 8006098:	e73e      	b.n	8005f18 <_dtoa_r+0x4e0>
 800609a:	4b9b      	ldr	r3, [pc, #620]	@ (8006308 <_dtoa_r+0x8d0>)
 800609c:	f7fa fab4 	bl	8000608 <__aeabi_dmul>
 80060a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a4:	e7bc      	b.n	8006020 <_dtoa_r+0x5e8>
 80060a6:	d10c      	bne.n	80060c2 <_dtoa_r+0x68a>
 80060a8:	4b98      	ldr	r3, [pc, #608]	@ (800630c <_dtoa_r+0x8d4>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b0:	f7fa faaa 	bl	8000608 <__aeabi_dmul>
 80060b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060b8:	f7fa fd2c 	bl	8000b14 <__aeabi_dcmpge>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f000 8157 	beq.w	8006370 <_dtoa_r+0x938>
 80060c2:	2400      	movs	r4, #0
 80060c4:	4625      	mov	r5, r4
 80060c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060c8:	43db      	mvns	r3, r3
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	4656      	mov	r6, sl
 80060ce:	2700      	movs	r7, #0
 80060d0:	4621      	mov	r1, r4
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fbb4 	bl	8006840 <_Bfree>
 80060d8:	2d00      	cmp	r5, #0
 80060da:	d0dc      	beq.n	8006096 <_dtoa_r+0x65e>
 80060dc:	b12f      	cbz	r7, 80060ea <_dtoa_r+0x6b2>
 80060de:	42af      	cmp	r7, r5
 80060e0:	d003      	beq.n	80060ea <_dtoa_r+0x6b2>
 80060e2:	4639      	mov	r1, r7
 80060e4:	4658      	mov	r0, fp
 80060e6:	f000 fbab 	bl	8006840 <_Bfree>
 80060ea:	4629      	mov	r1, r5
 80060ec:	4658      	mov	r0, fp
 80060ee:	f000 fba7 	bl	8006840 <_Bfree>
 80060f2:	e7d0      	b.n	8006096 <_dtoa_r+0x65e>
 80060f4:	9704      	str	r7, [sp, #16]
 80060f6:	4633      	mov	r3, r6
 80060f8:	461e      	mov	r6, r3
 80060fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060fe:	2a39      	cmp	r2, #57	@ 0x39
 8006100:	d107      	bne.n	8006112 <_dtoa_r+0x6da>
 8006102:	459a      	cmp	sl, r3
 8006104:	d1f8      	bne.n	80060f8 <_dtoa_r+0x6c0>
 8006106:	9a04      	ldr	r2, [sp, #16]
 8006108:	3201      	adds	r2, #1
 800610a:	9204      	str	r2, [sp, #16]
 800610c:	2230      	movs	r2, #48	@ 0x30
 800610e:	f88a 2000 	strb.w	r2, [sl]
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	3201      	adds	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e7bd      	b.n	8006096 <_dtoa_r+0x65e>
 800611a:	4b7b      	ldr	r3, [pc, #492]	@ (8006308 <_dtoa_r+0x8d0>)
 800611c:	2200      	movs	r2, #0
 800611e:	f7fa fa73 	bl	8000608 <__aeabi_dmul>
 8006122:	2200      	movs	r2, #0
 8006124:	2300      	movs	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	f7fa fcd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800612e:	2800      	cmp	r0, #0
 8006130:	f43f aebb 	beq.w	8005eaa <_dtoa_r+0x472>
 8006134:	e6f0      	b.n	8005f18 <_dtoa_r+0x4e0>
 8006136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006138:	2a00      	cmp	r2, #0
 800613a:	f000 80db 	beq.w	80062f4 <_dtoa_r+0x8bc>
 800613e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006140:	2a01      	cmp	r2, #1
 8006142:	f300 80bf 	bgt.w	80062c4 <_dtoa_r+0x88c>
 8006146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006148:	2a00      	cmp	r2, #0
 800614a:	f000 80b7 	beq.w	80062bc <_dtoa_r+0x884>
 800614e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006154:	4646      	mov	r6, r8
 8006156:	9a08      	ldr	r2, [sp, #32]
 8006158:	2101      	movs	r1, #1
 800615a:	441a      	add	r2, r3
 800615c:	4658      	mov	r0, fp
 800615e:	4498      	add	r8, r3
 8006160:	9208      	str	r2, [sp, #32]
 8006162:	f000 fc6b 	bl	8006a3c <__i2b>
 8006166:	4605      	mov	r5, r0
 8006168:	b15e      	cbz	r6, 8006182 <_dtoa_r+0x74a>
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dd08      	ble.n	8006182 <_dtoa_r+0x74a>
 8006170:	42b3      	cmp	r3, r6
 8006172:	9a08      	ldr	r2, [sp, #32]
 8006174:	bfa8      	it	ge
 8006176:	4633      	movge	r3, r6
 8006178:	eba8 0803 	sub.w	r8, r8, r3
 800617c:	1af6      	subs	r6, r6, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006184:	b1f3      	cbz	r3, 80061c4 <_dtoa_r+0x78c>
 8006186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80b7 	beq.w	80062fc <_dtoa_r+0x8c4>
 800618e:	b18c      	cbz	r4, 80061b4 <_dtoa_r+0x77c>
 8006190:	4629      	mov	r1, r5
 8006192:	4622      	mov	r2, r4
 8006194:	4658      	mov	r0, fp
 8006196:	f000 fd11 	bl	8006bbc <__pow5mult>
 800619a:	464a      	mov	r2, r9
 800619c:	4601      	mov	r1, r0
 800619e:	4605      	mov	r5, r0
 80061a0:	4658      	mov	r0, fp
 80061a2:	f000 fc61 	bl	8006a68 <__multiply>
 80061a6:	4649      	mov	r1, r9
 80061a8:	9004      	str	r0, [sp, #16]
 80061aa:	4658      	mov	r0, fp
 80061ac:	f000 fb48 	bl	8006840 <_Bfree>
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	4699      	mov	r9, r3
 80061b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061b6:	1b1a      	subs	r2, r3, r4
 80061b8:	d004      	beq.n	80061c4 <_dtoa_r+0x78c>
 80061ba:	4649      	mov	r1, r9
 80061bc:	4658      	mov	r0, fp
 80061be:	f000 fcfd 	bl	8006bbc <__pow5mult>
 80061c2:	4681      	mov	r9, r0
 80061c4:	2101      	movs	r1, #1
 80061c6:	4658      	mov	r0, fp
 80061c8:	f000 fc38 	bl	8006a3c <__i2b>
 80061cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ce:	4604      	mov	r4, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 81cf 	beq.w	8006574 <_dtoa_r+0xb3c>
 80061d6:	461a      	mov	r2, r3
 80061d8:	4601      	mov	r1, r0
 80061da:	4658      	mov	r0, fp
 80061dc:	f000 fcee 	bl	8006bbc <__pow5mult>
 80061e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	4604      	mov	r4, r0
 80061e6:	f300 8095 	bgt.w	8006314 <_dtoa_r+0x8dc>
 80061ea:	9b02      	ldr	r3, [sp, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8087 	bne.w	8006300 <_dtoa_r+0x8c8>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 8089 	bne.w	8006310 <_dtoa_r+0x8d8>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006204:	0d1b      	lsrs	r3, r3, #20
 8006206:	051b      	lsls	r3, r3, #20
 8006208:	b12b      	cbz	r3, 8006216 <_dtoa_r+0x7de>
 800620a:	9b08      	ldr	r3, [sp, #32]
 800620c:	3301      	adds	r3, #1
 800620e:	9308      	str	r3, [sp, #32]
 8006210:	f108 0801 	add.w	r8, r8, #1
 8006214:	2301      	movs	r3, #1
 8006216:	930a      	str	r3, [sp, #40]	@ 0x28
 8006218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 81b0 	beq.w	8006580 <_dtoa_r+0xb48>
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006226:	6918      	ldr	r0, [r3, #16]
 8006228:	f000 fbbc 	bl	80069a4 <__hi0bits>
 800622c:	f1c0 0020 	rsb	r0, r0, #32
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	4418      	add	r0, r3
 8006234:	f010 001f 	ands.w	r0, r0, #31
 8006238:	d077      	beq.n	800632a <_dtoa_r+0x8f2>
 800623a:	f1c0 0320 	rsb	r3, r0, #32
 800623e:	2b04      	cmp	r3, #4
 8006240:	dd6b      	ble.n	800631a <_dtoa_r+0x8e2>
 8006242:	9b08      	ldr	r3, [sp, #32]
 8006244:	f1c0 001c 	rsb	r0, r0, #28
 8006248:	4403      	add	r3, r0
 800624a:	4480      	add	r8, r0
 800624c:	4406      	add	r6, r0
 800624e:	9308      	str	r3, [sp, #32]
 8006250:	f1b8 0f00 	cmp.w	r8, #0
 8006254:	dd05      	ble.n	8006262 <_dtoa_r+0x82a>
 8006256:	4649      	mov	r1, r9
 8006258:	4642      	mov	r2, r8
 800625a:	4658      	mov	r0, fp
 800625c:	f000 fd08 	bl	8006c70 <__lshift>
 8006260:	4681      	mov	r9, r0
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd05      	ble.n	8006274 <_dtoa_r+0x83c>
 8006268:	4621      	mov	r1, r4
 800626a:	461a      	mov	r2, r3
 800626c:	4658      	mov	r0, fp
 800626e:	f000 fcff 	bl	8006c70 <__lshift>
 8006272:	4604      	mov	r4, r0
 8006274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006276:	2b00      	cmp	r3, #0
 8006278:	d059      	beq.n	800632e <_dtoa_r+0x8f6>
 800627a:	4621      	mov	r1, r4
 800627c:	4648      	mov	r0, r9
 800627e:	f000 fd63 	bl	8006d48 <__mcmp>
 8006282:	2800      	cmp	r0, #0
 8006284:	da53      	bge.n	800632e <_dtoa_r+0x8f6>
 8006286:	1e7b      	subs	r3, r7, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	4649      	mov	r1, r9
 800628c:	2300      	movs	r3, #0
 800628e:	220a      	movs	r2, #10
 8006290:	4658      	mov	r0, fp
 8006292:	f000 faf7 	bl	8006884 <__multadd>
 8006296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006298:	4681      	mov	r9, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8172 	beq.w	8006584 <_dtoa_r+0xb4c>
 80062a0:	2300      	movs	r3, #0
 80062a2:	4629      	mov	r1, r5
 80062a4:	220a      	movs	r2, #10
 80062a6:	4658      	mov	r0, fp
 80062a8:	f000 faec 	bl	8006884 <__multadd>
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	4605      	mov	r5, r0
 80062b2:	dc67      	bgt.n	8006384 <_dtoa_r+0x94c>
 80062b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	dc41      	bgt.n	800633e <_dtoa_r+0x906>
 80062ba:	e063      	b.n	8006384 <_dtoa_r+0x94c>
 80062bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80062be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062c2:	e746      	b.n	8006152 <_dtoa_r+0x71a>
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	1e5c      	subs	r4, r3, #1
 80062c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	bfbf      	itttt	lt
 80062ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80062d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80062d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80062d4:	1ae3      	sublt	r3, r4, r3
 80062d6:	bfb4      	ite	lt
 80062d8:	18d2      	addlt	r2, r2, r3
 80062da:	1b1c      	subge	r4, r3, r4
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	bfbc      	itt	lt
 80062e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80062e2:	2400      	movlt	r4, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bfb5      	itete	lt
 80062e8:	eba8 0603 	sublt.w	r6, r8, r3
 80062ec:	9b07      	ldrge	r3, [sp, #28]
 80062ee:	2300      	movlt	r3, #0
 80062f0:	4646      	movge	r6, r8
 80062f2:	e730      	b.n	8006156 <_dtoa_r+0x71e>
 80062f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80062f8:	4646      	mov	r6, r8
 80062fa:	e735      	b.n	8006168 <_dtoa_r+0x730>
 80062fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062fe:	e75c      	b.n	80061ba <_dtoa_r+0x782>
 8006300:	2300      	movs	r3, #0
 8006302:	e788      	b.n	8006216 <_dtoa_r+0x7de>
 8006304:	3fe00000 	.word	0x3fe00000
 8006308:	40240000 	.word	0x40240000
 800630c:	40140000 	.word	0x40140000
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	e780      	b.n	8006216 <_dtoa_r+0x7de>
 8006314:	2300      	movs	r3, #0
 8006316:	930a      	str	r3, [sp, #40]	@ 0x28
 8006318:	e782      	b.n	8006220 <_dtoa_r+0x7e8>
 800631a:	d099      	beq.n	8006250 <_dtoa_r+0x818>
 800631c:	9a08      	ldr	r2, [sp, #32]
 800631e:	331c      	adds	r3, #28
 8006320:	441a      	add	r2, r3
 8006322:	4498      	add	r8, r3
 8006324:	441e      	add	r6, r3
 8006326:	9208      	str	r2, [sp, #32]
 8006328:	e792      	b.n	8006250 <_dtoa_r+0x818>
 800632a:	4603      	mov	r3, r0
 800632c:	e7f6      	b.n	800631c <_dtoa_r+0x8e4>
 800632e:	9b07      	ldr	r3, [sp, #28]
 8006330:	9704      	str	r7, [sp, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dc20      	bgt.n	8006378 <_dtoa_r+0x940>
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633a:	2b02      	cmp	r3, #2
 800633c:	dd1e      	ble.n	800637c <_dtoa_r+0x944>
 800633e:	9b00      	ldr	r3, [sp, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f47f aec0 	bne.w	80060c6 <_dtoa_r+0x68e>
 8006346:	4621      	mov	r1, r4
 8006348:	2205      	movs	r2, #5
 800634a:	4658      	mov	r0, fp
 800634c:	f000 fa9a 	bl	8006884 <__multadd>
 8006350:	4601      	mov	r1, r0
 8006352:	4604      	mov	r4, r0
 8006354:	4648      	mov	r0, r9
 8006356:	f000 fcf7 	bl	8006d48 <__mcmp>
 800635a:	2800      	cmp	r0, #0
 800635c:	f77f aeb3 	ble.w	80060c6 <_dtoa_r+0x68e>
 8006360:	4656      	mov	r6, sl
 8006362:	2331      	movs	r3, #49	@ 0x31
 8006364:	f806 3b01 	strb.w	r3, [r6], #1
 8006368:	9b04      	ldr	r3, [sp, #16]
 800636a:	3301      	adds	r3, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	e6ae      	b.n	80060ce <_dtoa_r+0x696>
 8006370:	9c07      	ldr	r4, [sp, #28]
 8006372:	9704      	str	r7, [sp, #16]
 8006374:	4625      	mov	r5, r4
 8006376:	e7f3      	b.n	8006360 <_dtoa_r+0x928>
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8104 	beq.w	800658c <_dtoa_r+0xb54>
 8006384:	2e00      	cmp	r6, #0
 8006386:	dd05      	ble.n	8006394 <_dtoa_r+0x95c>
 8006388:	4629      	mov	r1, r5
 800638a:	4632      	mov	r2, r6
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fc6f 	bl	8006c70 <__lshift>
 8006392:	4605      	mov	r5, r0
 8006394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d05a      	beq.n	8006450 <_dtoa_r+0xa18>
 800639a:	6869      	ldr	r1, [r5, #4]
 800639c:	4658      	mov	r0, fp
 800639e:	f000 fa0f 	bl	80067c0 <_Balloc>
 80063a2:	4606      	mov	r6, r0
 80063a4:	b928      	cbnz	r0, 80063b2 <_dtoa_r+0x97a>
 80063a6:	4b84      	ldr	r3, [pc, #528]	@ (80065b8 <_dtoa_r+0xb80>)
 80063a8:	4602      	mov	r2, r0
 80063aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063ae:	f7ff bb5a 	b.w	8005a66 <_dtoa_r+0x2e>
 80063b2:	692a      	ldr	r2, [r5, #16]
 80063b4:	3202      	adds	r2, #2
 80063b6:	0092      	lsls	r2, r2, #2
 80063b8:	f105 010c 	add.w	r1, r5, #12
 80063bc:	300c      	adds	r0, #12
 80063be:	f002 f94b 	bl	8008658 <memcpy>
 80063c2:	2201      	movs	r2, #1
 80063c4:	4631      	mov	r1, r6
 80063c6:	4658      	mov	r0, fp
 80063c8:	f000 fc52 	bl	8006c70 <__lshift>
 80063cc:	f10a 0301 	add.w	r3, sl, #1
 80063d0:	9307      	str	r3, [sp, #28]
 80063d2:	9b00      	ldr	r3, [sp, #0]
 80063d4:	4453      	add	r3, sl
 80063d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	462f      	mov	r7, r5
 80063e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063e2:	4605      	mov	r5, r0
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	4621      	mov	r1, r4
 80063e8:	3b01      	subs	r3, #1
 80063ea:	4648      	mov	r0, r9
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	f7ff fa99 	bl	8005924 <quorem>
 80063f2:	4639      	mov	r1, r7
 80063f4:	9002      	str	r0, [sp, #8]
 80063f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80063fa:	4648      	mov	r0, r9
 80063fc:	f000 fca4 	bl	8006d48 <__mcmp>
 8006400:	462a      	mov	r2, r5
 8006402:	9008      	str	r0, [sp, #32]
 8006404:	4621      	mov	r1, r4
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fcba 	bl	8006d80 <__mdiff>
 800640c:	68c2      	ldr	r2, [r0, #12]
 800640e:	4606      	mov	r6, r0
 8006410:	bb02      	cbnz	r2, 8006454 <_dtoa_r+0xa1c>
 8006412:	4601      	mov	r1, r0
 8006414:	4648      	mov	r0, r9
 8006416:	f000 fc97 	bl	8006d48 <__mcmp>
 800641a:	4602      	mov	r2, r0
 800641c:	4631      	mov	r1, r6
 800641e:	4658      	mov	r0, fp
 8006420:	920e      	str	r2, [sp, #56]	@ 0x38
 8006422:	f000 fa0d 	bl	8006840 <_Bfree>
 8006426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800642a:	9e07      	ldr	r6, [sp, #28]
 800642c:	ea43 0102 	orr.w	r1, r3, r2
 8006430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006432:	4319      	orrs	r1, r3
 8006434:	d110      	bne.n	8006458 <_dtoa_r+0xa20>
 8006436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800643a:	d029      	beq.n	8006490 <_dtoa_r+0xa58>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	dd02      	ble.n	8006448 <_dtoa_r+0xa10>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006448:	9b00      	ldr	r3, [sp, #0]
 800644a:	f883 8000 	strb.w	r8, [r3]
 800644e:	e63f      	b.n	80060d0 <_dtoa_r+0x698>
 8006450:	4628      	mov	r0, r5
 8006452:	e7bb      	b.n	80063cc <_dtoa_r+0x994>
 8006454:	2201      	movs	r2, #1
 8006456:	e7e1      	b.n	800641c <_dtoa_r+0x9e4>
 8006458:	9b08      	ldr	r3, [sp, #32]
 800645a:	2b00      	cmp	r3, #0
 800645c:	db04      	blt.n	8006468 <_dtoa_r+0xa30>
 800645e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006460:	430b      	orrs	r3, r1
 8006462:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006464:	430b      	orrs	r3, r1
 8006466:	d120      	bne.n	80064aa <_dtoa_r+0xa72>
 8006468:	2a00      	cmp	r2, #0
 800646a:	dded      	ble.n	8006448 <_dtoa_r+0xa10>
 800646c:	4649      	mov	r1, r9
 800646e:	2201      	movs	r2, #1
 8006470:	4658      	mov	r0, fp
 8006472:	f000 fbfd 	bl	8006c70 <__lshift>
 8006476:	4621      	mov	r1, r4
 8006478:	4681      	mov	r9, r0
 800647a:	f000 fc65 	bl	8006d48 <__mcmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	dc03      	bgt.n	800648a <_dtoa_r+0xa52>
 8006482:	d1e1      	bne.n	8006448 <_dtoa_r+0xa10>
 8006484:	f018 0f01 	tst.w	r8, #1
 8006488:	d0de      	beq.n	8006448 <_dtoa_r+0xa10>
 800648a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800648e:	d1d8      	bne.n	8006442 <_dtoa_r+0xa0a>
 8006490:	9a00      	ldr	r2, [sp, #0]
 8006492:	2339      	movs	r3, #57	@ 0x39
 8006494:	7013      	strb	r3, [r2, #0]
 8006496:	4633      	mov	r3, r6
 8006498:	461e      	mov	r6, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064a0:	2a39      	cmp	r2, #57	@ 0x39
 80064a2:	d052      	beq.n	800654a <_dtoa_r+0xb12>
 80064a4:	3201      	adds	r2, #1
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e612      	b.n	80060d0 <_dtoa_r+0x698>
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	dd07      	ble.n	80064be <_dtoa_r+0xa86>
 80064ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064b2:	d0ed      	beq.n	8006490 <_dtoa_r+0xa58>
 80064b4:	9a00      	ldr	r2, [sp, #0]
 80064b6:	f108 0301 	add.w	r3, r8, #1
 80064ba:	7013      	strb	r3, [r2, #0]
 80064bc:	e608      	b.n	80060d0 <_dtoa_r+0x698>
 80064be:	9b07      	ldr	r3, [sp, #28]
 80064c0:	9a07      	ldr	r2, [sp, #28]
 80064c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80064c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d028      	beq.n	800651e <_dtoa_r+0xae6>
 80064cc:	4649      	mov	r1, r9
 80064ce:	2300      	movs	r3, #0
 80064d0:	220a      	movs	r2, #10
 80064d2:	4658      	mov	r0, fp
 80064d4:	f000 f9d6 	bl	8006884 <__multadd>
 80064d8:	42af      	cmp	r7, r5
 80064da:	4681      	mov	r9, r0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	f04f 020a 	mov.w	r2, #10
 80064e4:	4639      	mov	r1, r7
 80064e6:	4658      	mov	r0, fp
 80064e8:	d107      	bne.n	80064fa <_dtoa_r+0xac2>
 80064ea:	f000 f9cb 	bl	8006884 <__multadd>
 80064ee:	4607      	mov	r7, r0
 80064f0:	4605      	mov	r5, r0
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	3301      	adds	r3, #1
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	e774      	b.n	80063e4 <_dtoa_r+0x9ac>
 80064fa:	f000 f9c3 	bl	8006884 <__multadd>
 80064fe:	4629      	mov	r1, r5
 8006500:	4607      	mov	r7, r0
 8006502:	2300      	movs	r3, #0
 8006504:	220a      	movs	r2, #10
 8006506:	4658      	mov	r0, fp
 8006508:	f000 f9bc 	bl	8006884 <__multadd>
 800650c:	4605      	mov	r5, r0
 800650e:	e7f0      	b.n	80064f2 <_dtoa_r+0xaba>
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	bfcc      	ite	gt
 8006516:	461e      	movgt	r6, r3
 8006518:	2601      	movle	r6, #1
 800651a:	4456      	add	r6, sl
 800651c:	2700      	movs	r7, #0
 800651e:	4649      	mov	r1, r9
 8006520:	2201      	movs	r2, #1
 8006522:	4658      	mov	r0, fp
 8006524:	f000 fba4 	bl	8006c70 <__lshift>
 8006528:	4621      	mov	r1, r4
 800652a:	4681      	mov	r9, r0
 800652c:	f000 fc0c 	bl	8006d48 <__mcmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	dcb0      	bgt.n	8006496 <_dtoa_r+0xa5e>
 8006534:	d102      	bne.n	800653c <_dtoa_r+0xb04>
 8006536:	f018 0f01 	tst.w	r8, #1
 800653a:	d1ac      	bne.n	8006496 <_dtoa_r+0xa5e>
 800653c:	4633      	mov	r3, r6
 800653e:	461e      	mov	r6, r3
 8006540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006544:	2a30      	cmp	r2, #48	@ 0x30
 8006546:	d0fa      	beq.n	800653e <_dtoa_r+0xb06>
 8006548:	e5c2      	b.n	80060d0 <_dtoa_r+0x698>
 800654a:	459a      	cmp	sl, r3
 800654c:	d1a4      	bne.n	8006498 <_dtoa_r+0xa60>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	3301      	adds	r3, #1
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	2331      	movs	r3, #49	@ 0x31
 8006556:	f88a 3000 	strb.w	r3, [sl]
 800655a:	e5b9      	b.n	80060d0 <_dtoa_r+0x698>
 800655c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800655e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80065bc <_dtoa_r+0xb84>
 8006562:	b11b      	cbz	r3, 800656c <_dtoa_r+0xb34>
 8006564:	f10a 0308 	add.w	r3, sl, #8
 8006568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	4650      	mov	r0, sl
 800656e:	b019      	add	sp, #100	@ 0x64
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006576:	2b01      	cmp	r3, #1
 8006578:	f77f ae37 	ble.w	80061ea <_dtoa_r+0x7b2>
 800657c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006580:	2001      	movs	r0, #1
 8006582:	e655      	b.n	8006230 <_dtoa_r+0x7f8>
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f77f aed6 	ble.w	8006338 <_dtoa_r+0x900>
 800658c:	4656      	mov	r6, sl
 800658e:	4621      	mov	r1, r4
 8006590:	4648      	mov	r0, r9
 8006592:	f7ff f9c7 	bl	8005924 <quorem>
 8006596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800659a:	f806 8b01 	strb.w	r8, [r6], #1
 800659e:	9b00      	ldr	r3, [sp, #0]
 80065a0:	eba6 020a 	sub.w	r2, r6, sl
 80065a4:	4293      	cmp	r3, r2
 80065a6:	ddb3      	ble.n	8006510 <_dtoa_r+0xad8>
 80065a8:	4649      	mov	r1, r9
 80065aa:	2300      	movs	r3, #0
 80065ac:	220a      	movs	r2, #10
 80065ae:	4658      	mov	r0, fp
 80065b0:	f000 f968 	bl	8006884 <__multadd>
 80065b4:	4681      	mov	r9, r0
 80065b6:	e7ea      	b.n	800658e <_dtoa_r+0xb56>
 80065b8:	080097a1 	.word	0x080097a1
 80065bc:	08009725 	.word	0x08009725

080065c0 <_free_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4605      	mov	r5, r0
 80065c4:	2900      	cmp	r1, #0
 80065c6:	d041      	beq.n	800664c <_free_r+0x8c>
 80065c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065cc:	1f0c      	subs	r4, r1, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfb8      	it	lt
 80065d2:	18e4      	addlt	r4, r4, r3
 80065d4:	f000 f8e8 	bl	80067a8 <__malloc_lock>
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <_free_r+0x90>)
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	b933      	cbnz	r3, 80065ec <_free_r+0x2c>
 80065de:	6063      	str	r3, [r4, #4]
 80065e0:	6014      	str	r4, [r2, #0]
 80065e2:	4628      	mov	r0, r5
 80065e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e8:	f000 b8e4 	b.w	80067b4 <__malloc_unlock>
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d908      	bls.n	8006602 <_free_r+0x42>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	1821      	adds	r1, r4, r0
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf01      	itttt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	1809      	addeq	r1, r1, r0
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	e7ed      	b.n	80065de <_free_r+0x1e>
 8006602:	461a      	mov	r2, r3
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b10b      	cbz	r3, 800660c <_free_r+0x4c>
 8006608:	42a3      	cmp	r3, r4
 800660a:	d9fa      	bls.n	8006602 <_free_r+0x42>
 800660c:	6811      	ldr	r1, [r2, #0]
 800660e:	1850      	adds	r0, r2, r1
 8006610:	42a0      	cmp	r0, r4
 8006612:	d10b      	bne.n	800662c <_free_r+0x6c>
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	4401      	add	r1, r0
 8006618:	1850      	adds	r0, r2, r1
 800661a:	4283      	cmp	r3, r0
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	d1e0      	bne.n	80065e2 <_free_r+0x22>
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	6053      	str	r3, [r2, #4]
 8006626:	4408      	add	r0, r1
 8006628:	6010      	str	r0, [r2, #0]
 800662a:	e7da      	b.n	80065e2 <_free_r+0x22>
 800662c:	d902      	bls.n	8006634 <_free_r+0x74>
 800662e:	230c      	movs	r3, #12
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	e7d6      	b.n	80065e2 <_free_r+0x22>
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	1821      	adds	r1, r4, r0
 8006638:	428b      	cmp	r3, r1
 800663a:	bf04      	itt	eq
 800663c:	6819      	ldreq	r1, [r3, #0]
 800663e:	685b      	ldreq	r3, [r3, #4]
 8006640:	6063      	str	r3, [r4, #4]
 8006642:	bf04      	itt	eq
 8006644:	1809      	addeq	r1, r1, r0
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	6054      	str	r4, [r2, #4]
 800664a:	e7ca      	b.n	80065e2 <_free_r+0x22>
 800664c:	bd38      	pop	{r3, r4, r5, pc}
 800664e:	bf00      	nop
 8006650:	2000085c 	.word	0x2000085c

08006654 <malloc>:
 8006654:	4b02      	ldr	r3, [pc, #8]	@ (8006660 <malloc+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f000 b825 	b.w	80066a8 <_malloc_r>
 800665e:	bf00      	nop
 8006660:	20000018 	.word	0x20000018

08006664 <sbrk_aligned>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4e0f      	ldr	r6, [pc, #60]	@ (80066a4 <sbrk_aligned+0x40>)
 8006668:	460c      	mov	r4, r1
 800666a:	6831      	ldr	r1, [r6, #0]
 800666c:	4605      	mov	r5, r0
 800666e:	b911      	cbnz	r1, 8006676 <sbrk_aligned+0x12>
 8006670:	f001 ffe2 	bl	8008638 <_sbrk_r>
 8006674:	6030      	str	r0, [r6, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f001 ffdd 	bl	8008638 <_sbrk_r>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d103      	bne.n	800668a <sbrk_aligned+0x26>
 8006682:	f04f 34ff 	mov.w	r4, #4294967295
 8006686:	4620      	mov	r0, r4
 8006688:	bd70      	pop	{r4, r5, r6, pc}
 800668a:	1cc4      	adds	r4, r0, #3
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d0f8      	beq.n	8006686 <sbrk_aligned+0x22>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	4628      	mov	r0, r5
 8006698:	f001 ffce 	bl	8008638 <_sbrk_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d1f2      	bne.n	8006686 <sbrk_aligned+0x22>
 80066a0:	e7ef      	b.n	8006682 <sbrk_aligned+0x1e>
 80066a2:	bf00      	nop
 80066a4:	20000858 	.word	0x20000858

080066a8 <_malloc_r>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	4606      	mov	r6, r0
 80066be:	db01      	blt.n	80066c4 <_malloc_r+0x1c>
 80066c0:	42a9      	cmp	r1, r5
 80066c2:	d904      	bls.n	80066ce <_malloc_r+0x26>
 80066c4:	230c      	movs	r3, #12
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067a4 <_malloc_r+0xfc>
 80066d2:	f000 f869 	bl	80067a8 <__malloc_lock>
 80066d6:	f8d8 3000 	ldr.w	r3, [r8]
 80066da:	461c      	mov	r4, r3
 80066dc:	bb44      	cbnz	r4, 8006730 <_malloc_r+0x88>
 80066de:	4629      	mov	r1, r5
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff ffbf 	bl	8006664 <sbrk_aligned>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	4604      	mov	r4, r0
 80066ea:	d158      	bne.n	800679e <_malloc_r+0xf6>
 80066ec:	f8d8 4000 	ldr.w	r4, [r8]
 80066f0:	4627      	mov	r7, r4
 80066f2:	2f00      	cmp	r7, #0
 80066f4:	d143      	bne.n	800677e <_malloc_r+0xd6>
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d04b      	beq.n	8006792 <_malloc_r+0xea>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	4639      	mov	r1, r7
 80066fe:	4630      	mov	r0, r6
 8006700:	eb04 0903 	add.w	r9, r4, r3
 8006704:	f001 ff98 	bl	8008638 <_sbrk_r>
 8006708:	4581      	cmp	r9, r0
 800670a:	d142      	bne.n	8006792 <_malloc_r+0xea>
 800670c:	6821      	ldr	r1, [r4, #0]
 800670e:	1a6d      	subs	r5, r5, r1
 8006710:	4629      	mov	r1, r5
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ffa6 	bl	8006664 <sbrk_aligned>
 8006718:	3001      	adds	r0, #1
 800671a:	d03a      	beq.n	8006792 <_malloc_r+0xea>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	442b      	add	r3, r5
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	f8d8 3000 	ldr.w	r3, [r8]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	bb62      	cbnz	r2, 8006784 <_malloc_r+0xdc>
 800672a:	f8c8 7000 	str.w	r7, [r8]
 800672e:	e00f      	b.n	8006750 <_malloc_r+0xa8>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	1b52      	subs	r2, r2, r5
 8006734:	d420      	bmi.n	8006778 <_malloc_r+0xd0>
 8006736:	2a0b      	cmp	r2, #11
 8006738:	d917      	bls.n	800676a <_malloc_r+0xc2>
 800673a:	1961      	adds	r1, r4, r5
 800673c:	42a3      	cmp	r3, r4
 800673e:	6025      	str	r5, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	6059      	strne	r1, [r3, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	bf08      	it	eq
 8006748:	f8c8 1000 	streq.w	r1, [r8]
 800674c:	5162      	str	r2, [r4, r5]
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f82f 	bl	80067b4 <__malloc_unlock>
 8006756:	f104 000b 	add.w	r0, r4, #11
 800675a:	1d23      	adds	r3, r4, #4
 800675c:	f020 0007 	bic.w	r0, r0, #7
 8006760:	1ac2      	subs	r2, r0, r3
 8006762:	bf1c      	itt	ne
 8006764:	1a1b      	subne	r3, r3, r0
 8006766:	50a3      	strne	r3, [r4, r2]
 8006768:	e7af      	b.n	80066ca <_malloc_r+0x22>
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	42a3      	cmp	r3, r4
 800676e:	bf0c      	ite	eq
 8006770:	f8c8 2000 	streq.w	r2, [r8]
 8006774:	605a      	strne	r2, [r3, #4]
 8006776:	e7eb      	b.n	8006750 <_malloc_r+0xa8>
 8006778:	4623      	mov	r3, r4
 800677a:	6864      	ldr	r4, [r4, #4]
 800677c:	e7ae      	b.n	80066dc <_malloc_r+0x34>
 800677e:	463c      	mov	r4, r7
 8006780:	687f      	ldr	r7, [r7, #4]
 8006782:	e7b6      	b.n	80066f2 <_malloc_r+0x4a>
 8006784:	461a      	mov	r2, r3
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	42a3      	cmp	r3, r4
 800678a:	d1fb      	bne.n	8006784 <_malloc_r+0xdc>
 800678c:	2300      	movs	r3, #0
 800678e:	6053      	str	r3, [r2, #4]
 8006790:	e7de      	b.n	8006750 <_malloc_r+0xa8>
 8006792:	230c      	movs	r3, #12
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f80c 	bl	80067b4 <__malloc_unlock>
 800679c:	e794      	b.n	80066c8 <_malloc_r+0x20>
 800679e:	6005      	str	r5, [r0, #0]
 80067a0:	e7d6      	b.n	8006750 <_malloc_r+0xa8>
 80067a2:	bf00      	nop
 80067a4:	2000085c 	.word	0x2000085c

080067a8 <__malloc_lock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__malloc_lock+0x8>)
 80067aa:	f7ff b8b2 	b.w	8005912 <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	20000854 	.word	0x20000854

080067b4 <__malloc_unlock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__malloc_unlock+0x8>)
 80067b6:	f7ff b8ad 	b.w	8005914 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	20000854 	.word	0x20000854

080067c0 <_Balloc>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	69c6      	ldr	r6, [r0, #28]
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	b976      	cbnz	r6, 80067e8 <_Balloc+0x28>
 80067ca:	2010      	movs	r0, #16
 80067cc:	f7ff ff42 	bl	8006654 <malloc>
 80067d0:	4602      	mov	r2, r0
 80067d2:	61e0      	str	r0, [r4, #28]
 80067d4:	b920      	cbnz	r0, 80067e0 <_Balloc+0x20>
 80067d6:	4b18      	ldr	r3, [pc, #96]	@ (8006838 <_Balloc+0x78>)
 80067d8:	4818      	ldr	r0, [pc, #96]	@ (800683c <_Balloc+0x7c>)
 80067da:	216b      	movs	r1, #107	@ 0x6b
 80067dc:	f001 ff54 	bl	8008688 <__assert_func>
 80067e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067e4:	6006      	str	r6, [r0, #0]
 80067e6:	60c6      	str	r6, [r0, #12]
 80067e8:	69e6      	ldr	r6, [r4, #28]
 80067ea:	68f3      	ldr	r3, [r6, #12]
 80067ec:	b183      	cbz	r3, 8006810 <_Balloc+0x50>
 80067ee:	69e3      	ldr	r3, [r4, #28]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067f6:	b9b8      	cbnz	r0, 8006828 <_Balloc+0x68>
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f605 	lsl.w	r6, r1, r5
 80067fe:	1d72      	adds	r2, r6, #5
 8006800:	0092      	lsls	r2, r2, #2
 8006802:	4620      	mov	r0, r4
 8006804:	f001 ff5e 	bl	80086c4 <_calloc_r>
 8006808:	b160      	cbz	r0, 8006824 <_Balloc+0x64>
 800680a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800680e:	e00e      	b.n	800682e <_Balloc+0x6e>
 8006810:	2221      	movs	r2, #33	@ 0x21
 8006812:	2104      	movs	r1, #4
 8006814:	4620      	mov	r0, r4
 8006816:	f001 ff55 	bl	80086c4 <_calloc_r>
 800681a:	69e3      	ldr	r3, [r4, #28]
 800681c:	60f0      	str	r0, [r6, #12]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e4      	bne.n	80067ee <_Balloc+0x2e>
 8006824:	2000      	movs	r0, #0
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	6802      	ldr	r2, [r0, #0]
 800682a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800682e:	2300      	movs	r3, #0
 8006830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006834:	e7f7      	b.n	8006826 <_Balloc+0x66>
 8006836:	bf00      	nop
 8006838:	08009732 	.word	0x08009732
 800683c:	080097b2 	.word	0x080097b2

08006840 <_Bfree>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	69c6      	ldr	r6, [r0, #28]
 8006844:	4605      	mov	r5, r0
 8006846:	460c      	mov	r4, r1
 8006848:	b976      	cbnz	r6, 8006868 <_Bfree+0x28>
 800684a:	2010      	movs	r0, #16
 800684c:	f7ff ff02 	bl	8006654 <malloc>
 8006850:	4602      	mov	r2, r0
 8006852:	61e8      	str	r0, [r5, #28]
 8006854:	b920      	cbnz	r0, 8006860 <_Bfree+0x20>
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <_Bfree+0x3c>)
 8006858:	4809      	ldr	r0, [pc, #36]	@ (8006880 <_Bfree+0x40>)
 800685a:	218f      	movs	r1, #143	@ 0x8f
 800685c:	f001 ff14 	bl	8008688 <__assert_func>
 8006860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006864:	6006      	str	r6, [r0, #0]
 8006866:	60c6      	str	r6, [r0, #12]
 8006868:	b13c      	cbz	r4, 800687a <_Bfree+0x3a>
 800686a:	69eb      	ldr	r3, [r5, #28]
 800686c:	6862      	ldr	r2, [r4, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006874:	6021      	str	r1, [r4, #0]
 8006876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	08009732 	.word	0x08009732
 8006880:	080097b2 	.word	0x080097b2

08006884 <__multadd>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	690d      	ldr	r5, [r1, #16]
 800688a:	4607      	mov	r7, r0
 800688c:	460c      	mov	r4, r1
 800688e:	461e      	mov	r6, r3
 8006890:	f101 0c14 	add.w	ip, r1, #20
 8006894:	2000      	movs	r0, #0
 8006896:	f8dc 3000 	ldr.w	r3, [ip]
 800689a:	b299      	uxth	r1, r3
 800689c:	fb02 6101 	mla	r1, r2, r1, r6
 80068a0:	0c1e      	lsrs	r6, r3, #16
 80068a2:	0c0b      	lsrs	r3, r1, #16
 80068a4:	fb02 3306 	mla	r3, r2, r6, r3
 80068a8:	b289      	uxth	r1, r1
 80068aa:	3001      	adds	r0, #1
 80068ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068b0:	4285      	cmp	r5, r0
 80068b2:	f84c 1b04 	str.w	r1, [ip], #4
 80068b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ba:	dcec      	bgt.n	8006896 <__multadd+0x12>
 80068bc:	b30e      	cbz	r6, 8006902 <__multadd+0x7e>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc19      	bgt.n	80068f8 <__multadd+0x74>
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	4638      	mov	r0, r7
 80068c8:	3101      	adds	r1, #1
 80068ca:	f7ff ff79 	bl	80067c0 <_Balloc>
 80068ce:	4680      	mov	r8, r0
 80068d0:	b928      	cbnz	r0, 80068de <__multadd+0x5a>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006908 <__multadd+0x84>)
 80068d6:	480d      	ldr	r0, [pc, #52]	@ (800690c <__multadd+0x88>)
 80068d8:	21ba      	movs	r1, #186	@ 0xba
 80068da:	f001 fed5 	bl	8008688 <__assert_func>
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	3202      	adds	r2, #2
 80068e2:	f104 010c 	add.w	r1, r4, #12
 80068e6:	0092      	lsls	r2, r2, #2
 80068e8:	300c      	adds	r0, #12
 80068ea:	f001 feb5 	bl	8008658 <memcpy>
 80068ee:	4621      	mov	r1, r4
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ffa5 	bl	8006840 <_Bfree>
 80068f6:	4644      	mov	r4, r8
 80068f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068fc:	3501      	adds	r5, #1
 80068fe:	615e      	str	r6, [r3, #20]
 8006900:	6125      	str	r5, [r4, #16]
 8006902:	4620      	mov	r0, r4
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	080097a1 	.word	0x080097a1
 800690c:	080097b2 	.word	0x080097b2

08006910 <__s2b>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	4615      	mov	r5, r2
 8006918:	461f      	mov	r7, r3
 800691a:	2209      	movs	r2, #9
 800691c:	3308      	adds	r3, #8
 800691e:	4606      	mov	r6, r0
 8006920:	fb93 f3f2 	sdiv	r3, r3, r2
 8006924:	2100      	movs	r1, #0
 8006926:	2201      	movs	r2, #1
 8006928:	429a      	cmp	r2, r3
 800692a:	db09      	blt.n	8006940 <__s2b+0x30>
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ff47 	bl	80067c0 <_Balloc>
 8006932:	b940      	cbnz	r0, 8006946 <__s2b+0x36>
 8006934:	4602      	mov	r2, r0
 8006936:	4b19      	ldr	r3, [pc, #100]	@ (800699c <__s2b+0x8c>)
 8006938:	4819      	ldr	r0, [pc, #100]	@ (80069a0 <__s2b+0x90>)
 800693a:	21d3      	movs	r1, #211	@ 0xd3
 800693c:	f001 fea4 	bl	8008688 <__assert_func>
 8006940:	0052      	lsls	r2, r2, #1
 8006942:	3101      	adds	r1, #1
 8006944:	e7f0      	b.n	8006928 <__s2b+0x18>
 8006946:	9b08      	ldr	r3, [sp, #32]
 8006948:	6143      	str	r3, [r0, #20]
 800694a:	2d09      	cmp	r5, #9
 800694c:	f04f 0301 	mov.w	r3, #1
 8006950:	6103      	str	r3, [r0, #16]
 8006952:	dd16      	ble.n	8006982 <__s2b+0x72>
 8006954:	f104 0909 	add.w	r9, r4, #9
 8006958:	46c8      	mov	r8, r9
 800695a:	442c      	add	r4, r5
 800695c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006960:	4601      	mov	r1, r0
 8006962:	3b30      	subs	r3, #48	@ 0x30
 8006964:	220a      	movs	r2, #10
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ff8c 	bl	8006884 <__multadd>
 800696c:	45a0      	cmp	r8, r4
 800696e:	d1f5      	bne.n	800695c <__s2b+0x4c>
 8006970:	f1a5 0408 	sub.w	r4, r5, #8
 8006974:	444c      	add	r4, r9
 8006976:	1b2d      	subs	r5, r5, r4
 8006978:	1963      	adds	r3, r4, r5
 800697a:	42bb      	cmp	r3, r7
 800697c:	db04      	blt.n	8006988 <__s2b+0x78>
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	340a      	adds	r4, #10
 8006984:	2509      	movs	r5, #9
 8006986:	e7f6      	b.n	8006976 <__s2b+0x66>
 8006988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800698c:	4601      	mov	r1, r0
 800698e:	3b30      	subs	r3, #48	@ 0x30
 8006990:	220a      	movs	r2, #10
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ff76 	bl	8006884 <__multadd>
 8006998:	e7ee      	b.n	8006978 <__s2b+0x68>
 800699a:	bf00      	nop
 800699c:	080097a1 	.word	0x080097a1
 80069a0:	080097b2 	.word	0x080097b2

080069a4 <__hi0bits>:
 80069a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069a8:	4603      	mov	r3, r0
 80069aa:	bf36      	itet	cc
 80069ac:	0403      	lslcc	r3, r0, #16
 80069ae:	2000      	movcs	r0, #0
 80069b0:	2010      	movcc	r0, #16
 80069b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069b6:	bf3c      	itt	cc
 80069b8:	021b      	lslcc	r3, r3, #8
 80069ba:	3008      	addcc	r0, #8
 80069bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c0:	bf3c      	itt	cc
 80069c2:	011b      	lslcc	r3, r3, #4
 80069c4:	3004      	addcc	r0, #4
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	bf3c      	itt	cc
 80069cc:	009b      	lslcc	r3, r3, #2
 80069ce:	3002      	addcc	r0, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db05      	blt.n	80069e0 <__hi0bits+0x3c>
 80069d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069d8:	f100 0001 	add.w	r0, r0, #1
 80069dc:	bf08      	it	eq
 80069de:	2020      	moveq	r0, #32
 80069e0:	4770      	bx	lr

080069e2 <__lo0bits>:
 80069e2:	6803      	ldr	r3, [r0, #0]
 80069e4:	4602      	mov	r2, r0
 80069e6:	f013 0007 	ands.w	r0, r3, #7
 80069ea:	d00b      	beq.n	8006a04 <__lo0bits+0x22>
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	d421      	bmi.n	8006a34 <__lo0bits+0x52>
 80069f0:	0798      	lsls	r0, r3, #30
 80069f2:	bf49      	itett	mi
 80069f4:	085b      	lsrmi	r3, r3, #1
 80069f6:	089b      	lsrpl	r3, r3, #2
 80069f8:	2001      	movmi	r0, #1
 80069fa:	6013      	strmi	r3, [r2, #0]
 80069fc:	bf5c      	itt	pl
 80069fe:	6013      	strpl	r3, [r2, #0]
 8006a00:	2002      	movpl	r0, #2
 8006a02:	4770      	bx	lr
 8006a04:	b299      	uxth	r1, r3
 8006a06:	b909      	cbnz	r1, 8006a0c <__lo0bits+0x2a>
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	2010      	movs	r0, #16
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	b909      	cbnz	r1, 8006a14 <__lo0bits+0x32>
 8006a10:	3008      	adds	r0, #8
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	bf04      	itt	eq
 8006a18:	091b      	lsreq	r3, r3, #4
 8006a1a:	3004      	addeq	r0, #4
 8006a1c:	0799      	lsls	r1, r3, #30
 8006a1e:	bf04      	itt	eq
 8006a20:	089b      	lsreq	r3, r3, #2
 8006a22:	3002      	addeq	r0, #2
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d403      	bmi.n	8006a30 <__lo0bits+0x4e>
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	f100 0001 	add.w	r0, r0, #1
 8006a2e:	d003      	beq.n	8006a38 <__lo0bits+0x56>
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4770      	bx	lr
 8006a34:	2000      	movs	r0, #0
 8006a36:	4770      	bx	lr
 8006a38:	2020      	movs	r0, #32
 8006a3a:	4770      	bx	lr

08006a3c <__i2b>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	460c      	mov	r4, r1
 8006a40:	2101      	movs	r1, #1
 8006a42:	f7ff febd 	bl	80067c0 <_Balloc>
 8006a46:	4602      	mov	r2, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__i2b+0x1a>
 8006a4a:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <__i2b+0x24>)
 8006a4c:	4805      	ldr	r0, [pc, #20]	@ (8006a64 <__i2b+0x28>)
 8006a4e:	f240 1145 	movw	r1, #325	@ 0x145
 8006a52:	f001 fe19 	bl	8008688 <__assert_func>
 8006a56:	2301      	movs	r3, #1
 8006a58:	6144      	str	r4, [r0, #20]
 8006a5a:	6103      	str	r3, [r0, #16]
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	080097a1 	.word	0x080097a1
 8006a64:	080097b2 	.word	0x080097b2

08006a68 <__multiply>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	690a      	ldr	r2, [r1, #16]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	bfa8      	it	ge
 8006a76:	4623      	movge	r3, r4
 8006a78:	460f      	mov	r7, r1
 8006a7a:	bfa4      	itt	ge
 8006a7c:	460c      	movge	r4, r1
 8006a7e:	461f      	movge	r7, r3
 8006a80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a88:	68a3      	ldr	r3, [r4, #8]
 8006a8a:	6861      	ldr	r1, [r4, #4]
 8006a8c:	eb0a 0609 	add.w	r6, sl, r9
 8006a90:	42b3      	cmp	r3, r6
 8006a92:	b085      	sub	sp, #20
 8006a94:	bfb8      	it	lt
 8006a96:	3101      	addlt	r1, #1
 8006a98:	f7ff fe92 	bl	80067c0 <_Balloc>
 8006a9c:	b930      	cbnz	r0, 8006aac <__multiply+0x44>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	4b44      	ldr	r3, [pc, #272]	@ (8006bb4 <__multiply+0x14c>)
 8006aa2:	4845      	ldr	r0, [pc, #276]	@ (8006bb8 <__multiply+0x150>)
 8006aa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006aa8:	f001 fdee 	bl	8008688 <__assert_func>
 8006aac:	f100 0514 	add.w	r5, r0, #20
 8006ab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4543      	cmp	r3, r8
 8006aba:	d321      	bcc.n	8006b00 <__multiply+0x98>
 8006abc:	f107 0114 	add.w	r1, r7, #20
 8006ac0:	f104 0214 	add.w	r2, r4, #20
 8006ac4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ac8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006acc:	9302      	str	r3, [sp, #8]
 8006ace:	1b13      	subs	r3, r2, r4
 8006ad0:	3b15      	subs	r3, #21
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	f104 0715 	add.w	r7, r4, #21
 8006adc:	42ba      	cmp	r2, r7
 8006ade:	bf38      	it	cc
 8006ae0:	2304      	movcc	r3, #4
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	9103      	str	r1, [sp, #12]
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	d80c      	bhi.n	8006b06 <__multiply+0x9e>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd03      	ble.n	8006af8 <__multiply+0x90>
 8006af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d05b      	beq.n	8006bb0 <__multiply+0x148>
 8006af8:	6106      	str	r6, [r0, #16]
 8006afa:	b005      	add	sp, #20
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	f843 2b04 	str.w	r2, [r3], #4
 8006b04:	e7d8      	b.n	8006ab8 <__multiply+0x50>
 8006b06:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b0a:	f1ba 0f00 	cmp.w	sl, #0
 8006b0e:	d024      	beq.n	8006b5a <__multiply+0xf2>
 8006b10:	f104 0e14 	add.w	lr, r4, #20
 8006b14:	46a9      	mov	r9, r5
 8006b16:	f04f 0c00 	mov.w	ip, #0
 8006b1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b1e:	f8d9 3000 	ldr.w	r3, [r9]
 8006b22:	fa1f fb87 	uxth.w	fp, r7
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b30:	f8d9 7000 	ldr.w	r7, [r9]
 8006b34:	4463      	add	r3, ip
 8006b36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b48:	4572      	cmp	r2, lr
 8006b4a:	f849 3b04 	str.w	r3, [r9], #4
 8006b4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b52:	d8e2      	bhi.n	8006b1a <__multiply+0xb2>
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	f845 c003 	str.w	ip, [r5, r3]
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b60:	3104      	adds	r1, #4
 8006b62:	f1b9 0f00 	cmp.w	r9, #0
 8006b66:	d021      	beq.n	8006bac <__multiply+0x144>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	f104 0c14 	add.w	ip, r4, #20
 8006b6e:	46ae      	mov	lr, r5
 8006b70:	f04f 0a00 	mov.w	sl, #0
 8006b74:	f8bc b000 	ldrh.w	fp, [ip]
 8006b78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b7c:	fb09 770b 	mla	r7, r9, fp, r7
 8006b80:	4457      	add	r7, sl
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b88:	f84e 3b04 	str.w	r3, [lr], #4
 8006b8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b94:	f8be 3000 	ldrh.w	r3, [lr]
 8006b98:	fb09 330a 	mla	r3, r9, sl, r3
 8006b9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ba0:	4562      	cmp	r2, ip
 8006ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ba6:	d8e5      	bhi.n	8006b74 <__multiply+0x10c>
 8006ba8:	9f01      	ldr	r7, [sp, #4]
 8006baa:	51eb      	str	r3, [r5, r7]
 8006bac:	3504      	adds	r5, #4
 8006bae:	e799      	b.n	8006ae4 <__multiply+0x7c>
 8006bb0:	3e01      	subs	r6, #1
 8006bb2:	e79b      	b.n	8006aec <__multiply+0x84>
 8006bb4:	080097a1 	.word	0x080097a1
 8006bb8:	080097b2 	.word	0x080097b2

08006bbc <__pow5mult>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	f012 0203 	ands.w	r2, r2, #3
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	460e      	mov	r6, r1
 8006bca:	d007      	beq.n	8006bdc <__pow5mult+0x20>
 8006bcc:	4c25      	ldr	r4, [pc, #148]	@ (8006c64 <__pow5mult+0xa8>)
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bd6:	f7ff fe55 	bl	8006884 <__multadd>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	10ad      	asrs	r5, r5, #2
 8006bde:	d03d      	beq.n	8006c5c <__pow5mult+0xa0>
 8006be0:	69fc      	ldr	r4, [r7, #28]
 8006be2:	b97c      	cbnz	r4, 8006c04 <__pow5mult+0x48>
 8006be4:	2010      	movs	r0, #16
 8006be6:	f7ff fd35 	bl	8006654 <malloc>
 8006bea:	4602      	mov	r2, r0
 8006bec:	61f8      	str	r0, [r7, #28]
 8006bee:	b928      	cbnz	r0, 8006bfc <__pow5mult+0x40>
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <__pow5mult+0xac>)
 8006bf2:	481e      	ldr	r0, [pc, #120]	@ (8006c6c <__pow5mult+0xb0>)
 8006bf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006bf8:	f001 fd46 	bl	8008688 <__assert_func>
 8006bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c00:	6004      	str	r4, [r0, #0]
 8006c02:	60c4      	str	r4, [r0, #12]
 8006c04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c0c:	b94c      	cbnz	r4, 8006c22 <__pow5mult+0x66>
 8006c0e:	f240 2171 	movw	r1, #625	@ 0x271
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff ff12 	bl	8006a3c <__i2b>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c1e:	4604      	mov	r4, r0
 8006c20:	6003      	str	r3, [r0, #0]
 8006c22:	f04f 0900 	mov.w	r9, #0
 8006c26:	07eb      	lsls	r3, r5, #31
 8006c28:	d50a      	bpl.n	8006c40 <__pow5mult+0x84>
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ff1a 	bl	8006a68 <__multiply>
 8006c34:	4631      	mov	r1, r6
 8006c36:	4680      	mov	r8, r0
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff fe01 	bl	8006840 <_Bfree>
 8006c3e:	4646      	mov	r6, r8
 8006c40:	106d      	asrs	r5, r5, #1
 8006c42:	d00b      	beq.n	8006c5c <__pow5mult+0xa0>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	b938      	cbnz	r0, 8006c58 <__pow5mult+0x9c>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff ff0b 	bl	8006a68 <__multiply>
 8006c52:	6020      	str	r0, [r4, #0]
 8006c54:	f8c0 9000 	str.w	r9, [r0]
 8006c58:	4604      	mov	r4, r0
 8006c5a:	e7e4      	b.n	8006c26 <__pow5mult+0x6a>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c62:	bf00      	nop
 8006c64:	0800980c 	.word	0x0800980c
 8006c68:	08009732 	.word	0x08009732
 8006c6c:	080097b2 	.word	0x080097b2

08006c70 <__lshift>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	6849      	ldr	r1, [r1, #4]
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	4607      	mov	r7, r0
 8006c82:	4691      	mov	r9, r2
 8006c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c88:	f108 0601 	add.w	r6, r8, #1
 8006c8c:	42b3      	cmp	r3, r6
 8006c8e:	db0b      	blt.n	8006ca8 <__lshift+0x38>
 8006c90:	4638      	mov	r0, r7
 8006c92:	f7ff fd95 	bl	80067c0 <_Balloc>
 8006c96:	4605      	mov	r5, r0
 8006c98:	b948      	cbnz	r0, 8006cae <__lshift+0x3e>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <__lshift+0xd0>)
 8006c9e:	4829      	ldr	r0, [pc, #164]	@ (8006d44 <__lshift+0xd4>)
 8006ca0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ca4:	f001 fcf0 	bl	8008688 <__assert_func>
 8006ca8:	3101      	adds	r1, #1
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	e7ee      	b.n	8006c8c <__lshift+0x1c>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f100 0114 	add.w	r1, r0, #20
 8006cb4:	f100 0210 	add.w	r2, r0, #16
 8006cb8:	4618      	mov	r0, r3
 8006cba:	4553      	cmp	r3, sl
 8006cbc:	db33      	blt.n	8006d26 <__lshift+0xb6>
 8006cbe:	6920      	ldr	r0, [r4, #16]
 8006cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cc4:	f104 0314 	add.w	r3, r4, #20
 8006cc8:	f019 091f 	ands.w	r9, r9, #31
 8006ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cd4:	d02b      	beq.n	8006d2e <__lshift+0xbe>
 8006cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cda:	468a      	mov	sl, r1
 8006cdc:	2200      	movs	r2, #0
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ce4:	4310      	orrs	r0, r2
 8006ce6:	f84a 0b04 	str.w	r0, [sl], #4
 8006cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cee:	459c      	cmp	ip, r3
 8006cf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cf4:	d8f3      	bhi.n	8006cde <__lshift+0x6e>
 8006cf6:	ebac 0304 	sub.w	r3, ip, r4
 8006cfa:	3b15      	subs	r3, #21
 8006cfc:	f023 0303 	bic.w	r3, r3, #3
 8006d00:	3304      	adds	r3, #4
 8006d02:	f104 0015 	add.w	r0, r4, #21
 8006d06:	4584      	cmp	ip, r0
 8006d08:	bf38      	it	cc
 8006d0a:	2304      	movcc	r3, #4
 8006d0c:	50ca      	str	r2, [r1, r3]
 8006d0e:	b10a      	cbz	r2, 8006d14 <__lshift+0xa4>
 8006d10:	f108 0602 	add.w	r6, r8, #2
 8006d14:	3e01      	subs	r6, #1
 8006d16:	4638      	mov	r0, r7
 8006d18:	612e      	str	r6, [r5, #16]
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	f7ff fd90 	bl	8006840 <_Bfree>
 8006d20:	4628      	mov	r0, r5
 8006d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	e7c5      	b.n	8006cba <__lshift+0x4a>
 8006d2e:	3904      	subs	r1, #4
 8006d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d38:	459c      	cmp	ip, r3
 8006d3a:	d8f9      	bhi.n	8006d30 <__lshift+0xc0>
 8006d3c:	e7ea      	b.n	8006d14 <__lshift+0xa4>
 8006d3e:	bf00      	nop
 8006d40:	080097a1 	.word	0x080097a1
 8006d44:	080097b2 	.word	0x080097b2

08006d48 <__mcmp>:
 8006d48:	690a      	ldr	r2, [r1, #16]
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	6900      	ldr	r0, [r0, #16]
 8006d4e:	1a80      	subs	r0, r0, r2
 8006d50:	b530      	push	{r4, r5, lr}
 8006d52:	d10e      	bne.n	8006d72 <__mcmp+0x2a>
 8006d54:	3314      	adds	r3, #20
 8006d56:	3114      	adds	r1, #20
 8006d58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d68:	4295      	cmp	r5, r2
 8006d6a:	d003      	beq.n	8006d74 <__mcmp+0x2c>
 8006d6c:	d205      	bcs.n	8006d7a <__mcmp+0x32>
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	bd30      	pop	{r4, r5, pc}
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d3f3      	bcc.n	8006d60 <__mcmp+0x18>
 8006d78:	e7fb      	b.n	8006d72 <__mcmp+0x2a>
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	e7f9      	b.n	8006d72 <__mcmp+0x2a>
	...

08006d80 <__mdiff>:
 8006d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	4689      	mov	r9, r1
 8006d86:	4606      	mov	r6, r0
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	f7ff ffdb 	bl	8006d48 <__mcmp>
 8006d92:	1e05      	subs	r5, r0, #0
 8006d94:	d112      	bne.n	8006dbc <__mdiff+0x3c>
 8006d96:	4629      	mov	r1, r5
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7ff fd11 	bl	80067c0 <_Balloc>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	b928      	cbnz	r0, 8006dae <__mdiff+0x2e>
 8006da2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ea0 <__mdiff+0x120>)
 8006da4:	f240 2137 	movw	r1, #567	@ 0x237
 8006da8:	483e      	ldr	r0, [pc, #248]	@ (8006ea4 <__mdiff+0x124>)
 8006daa:	f001 fc6d 	bl	8008688 <__assert_func>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006db4:	4610      	mov	r0, r2
 8006db6:	b003      	add	sp, #12
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	bfbc      	itt	lt
 8006dbe:	464b      	movlt	r3, r9
 8006dc0:	46a1      	movlt	r9, r4
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006dc8:	bfba      	itte	lt
 8006dca:	461c      	movlt	r4, r3
 8006dcc:	2501      	movlt	r5, #1
 8006dce:	2500      	movge	r5, #0
 8006dd0:	f7ff fcf6 	bl	80067c0 <_Balloc>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	b918      	cbnz	r0, 8006de0 <__mdiff+0x60>
 8006dd8:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <__mdiff+0x120>)
 8006dda:	f240 2145 	movw	r1, #581	@ 0x245
 8006dde:	e7e3      	b.n	8006da8 <__mdiff+0x28>
 8006de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006de4:	6926      	ldr	r6, [r4, #16]
 8006de6:	60c5      	str	r5, [r0, #12]
 8006de8:	f109 0310 	add.w	r3, r9, #16
 8006dec:	f109 0514 	add.w	r5, r9, #20
 8006df0:	f104 0e14 	add.w	lr, r4, #20
 8006df4:	f100 0b14 	add.w	fp, r0, #20
 8006df8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006dfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	46d9      	mov	r9, fp
 8006e04:	f04f 0c00 	mov.w	ip, #0
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	fa1f f38a 	uxth.w	r3, sl
 8006e18:	4619      	mov	r1, r3
 8006e1a:	b283      	uxth	r3, r0
 8006e1c:	1acb      	subs	r3, r1, r3
 8006e1e:	0c00      	lsrs	r0, r0, #16
 8006e20:	4463      	add	r3, ip
 8006e22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e30:	4576      	cmp	r6, lr
 8006e32:	f849 3b04 	str.w	r3, [r9], #4
 8006e36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e3a:	d8e5      	bhi.n	8006e08 <__mdiff+0x88>
 8006e3c:	1b33      	subs	r3, r6, r4
 8006e3e:	3b15      	subs	r3, #21
 8006e40:	f023 0303 	bic.w	r3, r3, #3
 8006e44:	3415      	adds	r4, #21
 8006e46:	3304      	adds	r3, #4
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	bf38      	it	cc
 8006e4c:	2304      	movcc	r3, #4
 8006e4e:	441d      	add	r5, r3
 8006e50:	445b      	add	r3, fp
 8006e52:	461e      	mov	r6, r3
 8006e54:	462c      	mov	r4, r5
 8006e56:	4544      	cmp	r4, r8
 8006e58:	d30e      	bcc.n	8006e78 <__mdiff+0xf8>
 8006e5a:	f108 0103 	add.w	r1, r8, #3
 8006e5e:	1b49      	subs	r1, r1, r5
 8006e60:	f021 0103 	bic.w	r1, r1, #3
 8006e64:	3d03      	subs	r5, #3
 8006e66:	45a8      	cmp	r8, r5
 8006e68:	bf38      	it	cc
 8006e6a:	2100      	movcc	r1, #0
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e72:	b191      	cbz	r1, 8006e9a <__mdiff+0x11a>
 8006e74:	6117      	str	r7, [r2, #16]
 8006e76:	e79d      	b.n	8006db4 <__mdiff+0x34>
 8006e78:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e7c:	46e6      	mov	lr, ip
 8006e7e:	0c08      	lsrs	r0, r1, #16
 8006e80:	fa1c fc81 	uxtah	ip, ip, r1
 8006e84:	4471      	add	r1, lr
 8006e86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e8a:	b289      	uxth	r1, r1
 8006e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e90:	f846 1b04 	str.w	r1, [r6], #4
 8006e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e98:	e7dd      	b.n	8006e56 <__mdiff+0xd6>
 8006e9a:	3f01      	subs	r7, #1
 8006e9c:	e7e7      	b.n	8006e6e <__mdiff+0xee>
 8006e9e:	bf00      	nop
 8006ea0:	080097a1 	.word	0x080097a1
 8006ea4:	080097b2 	.word	0x080097b2

08006ea8 <__ulp>:
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	ed8d 0b00 	vstr	d0, [sp]
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <__ulp+0x48>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc08      	bgt.n	8006ece <__ulp+0x26>
 8006ebc:	425b      	negs	r3, r3
 8006ebe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006ec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ec6:	da04      	bge.n	8006ed2 <__ulp+0x2a>
 8006ec8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006ecc:	4113      	asrs	r3, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	e008      	b.n	8006ee4 <__ulp+0x3c>
 8006ed2:	f1a2 0314 	sub.w	r3, r2, #20
 8006ed6:	2b1e      	cmp	r3, #30
 8006ed8:	bfda      	itte	le
 8006eda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006ede:	40da      	lsrle	r2, r3
 8006ee0:	2201      	movgt	r2, #1
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	ec41 0b10 	vmov	d0, r0, r1
 8006eec:	b002      	add	sp, #8
 8006eee:	4770      	bx	lr
 8006ef0:	7ff00000 	.word	0x7ff00000

08006ef4 <__b2d>:
 8006ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef8:	6906      	ldr	r6, [r0, #16]
 8006efa:	f100 0814 	add.w	r8, r0, #20
 8006efe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006f02:	1f37      	subs	r7, r6, #4
 8006f04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7ff fd4b 	bl	80069a4 <__hi0bits>
 8006f0e:	f1c0 0320 	rsb	r3, r0, #32
 8006f12:	280a      	cmp	r0, #10
 8006f14:	600b      	str	r3, [r1, #0]
 8006f16:	491b      	ldr	r1, [pc, #108]	@ (8006f84 <__b2d+0x90>)
 8006f18:	dc15      	bgt.n	8006f46 <__b2d+0x52>
 8006f1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006f22:	45b8      	cmp	r8, r7
 8006f24:	ea43 0501 	orr.w	r5, r3, r1
 8006f28:	bf34      	ite	cc
 8006f2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f2e:	2300      	movcs	r3, #0
 8006f30:	3015      	adds	r0, #21
 8006f32:	fa02 f000 	lsl.w	r0, r2, r0
 8006f36:	fa23 f30c 	lsr.w	r3, r3, ip
 8006f3a:	4303      	orrs	r3, r0
 8006f3c:	461c      	mov	r4, r3
 8006f3e:	ec45 4b10 	vmov	d0, r4, r5
 8006f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f46:	45b8      	cmp	r8, r7
 8006f48:	bf3a      	itte	cc
 8006f4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006f52:	2300      	movcs	r3, #0
 8006f54:	380b      	subs	r0, #11
 8006f56:	d012      	beq.n	8006f7e <__b2d+0x8a>
 8006f58:	f1c0 0120 	rsb	r1, r0, #32
 8006f5c:	fa23 f401 	lsr.w	r4, r3, r1
 8006f60:	4082      	lsls	r2, r0
 8006f62:	4322      	orrs	r2, r4
 8006f64:	4547      	cmp	r7, r8
 8006f66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006f6a:	bf8c      	ite	hi
 8006f6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006f70:	2200      	movls	r2, #0
 8006f72:	4083      	lsls	r3, r0
 8006f74:	40ca      	lsrs	r2, r1
 8006f76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	e7de      	b.n	8006f3c <__b2d+0x48>
 8006f7e:	ea42 0501 	orr.w	r5, r2, r1
 8006f82:	e7db      	b.n	8006f3c <__b2d+0x48>
 8006f84:	3ff00000 	.word	0x3ff00000

08006f88 <__d2b>:
 8006f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	2101      	movs	r1, #1
 8006f90:	ec59 8b10 	vmov	r8, r9, d0
 8006f94:	4616      	mov	r6, r2
 8006f96:	f7ff fc13 	bl	80067c0 <_Balloc>
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	b930      	cbnz	r0, 8006fac <__d2b+0x24>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4b23      	ldr	r3, [pc, #140]	@ (8007030 <__d2b+0xa8>)
 8006fa2:	4824      	ldr	r0, [pc, #144]	@ (8007034 <__d2b+0xac>)
 8006fa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fa8:	f001 fb6e 	bl	8008688 <__assert_func>
 8006fac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fb4:	b10d      	cbz	r5, 8006fba <__d2b+0x32>
 8006fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8006fc0:	d023      	beq.n	800700a <__d2b+0x82>
 8006fc2:	4668      	mov	r0, sp
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	f7ff fd0c 	bl	80069e2 <__lo0bits>
 8006fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fce:	b1d0      	cbz	r0, 8007006 <__d2b+0x7e>
 8006fd0:	f1c0 0320 	rsb	r3, r0, #32
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	40c2      	lsrs	r2, r0
 8006fdc:	6163      	str	r3, [r4, #20]
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	61a3      	str	r3, [r4, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bf0c      	ite	eq
 8006fe8:	2201      	moveq	r2, #1
 8006fea:	2202      	movne	r2, #2
 8006fec:	6122      	str	r2, [r4, #16]
 8006fee:	b1a5      	cbz	r5, 800701a <__d2b+0x92>
 8006ff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ff4:	4405      	add	r5, r0
 8006ff6:	603d      	str	r5, [r7, #0]
 8006ff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ffc:	6030      	str	r0, [r6, #0]
 8006ffe:	4620      	mov	r0, r4
 8007000:	b003      	add	sp, #12
 8007002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007006:	6161      	str	r1, [r4, #20]
 8007008:	e7ea      	b.n	8006fe0 <__d2b+0x58>
 800700a:	a801      	add	r0, sp, #4
 800700c:	f7ff fce9 	bl	80069e2 <__lo0bits>
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	6163      	str	r3, [r4, #20]
 8007014:	3020      	adds	r0, #32
 8007016:	2201      	movs	r2, #1
 8007018:	e7e8      	b.n	8006fec <__d2b+0x64>
 800701a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800701e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007022:	6038      	str	r0, [r7, #0]
 8007024:	6918      	ldr	r0, [r3, #16]
 8007026:	f7ff fcbd 	bl	80069a4 <__hi0bits>
 800702a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800702e:	e7e5      	b.n	8006ffc <__d2b+0x74>
 8007030:	080097a1 	.word	0x080097a1
 8007034:	080097b2 	.word	0x080097b2

08007038 <__ratio>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	b085      	sub	sp, #20
 800703e:	e9cd 1000 	strd	r1, r0, [sp]
 8007042:	a902      	add	r1, sp, #8
 8007044:	f7ff ff56 	bl	8006ef4 <__b2d>
 8007048:	9800      	ldr	r0, [sp, #0]
 800704a:	a903      	add	r1, sp, #12
 800704c:	ec55 4b10 	vmov	r4, r5, d0
 8007050:	f7ff ff50 	bl	8006ef4 <__b2d>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	6919      	ldr	r1, [r3, #16]
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	1ac9      	subs	r1, r1, r3
 800705e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	ec5b ab10 	vmov	sl, fp, d0
 8007068:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800706c:	2b00      	cmp	r3, #0
 800706e:	bfce      	itee	gt
 8007070:	462a      	movgt	r2, r5
 8007072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007076:	465a      	movle	r2, fp
 8007078:	462f      	mov	r7, r5
 800707a:	46d9      	mov	r9, fp
 800707c:	bfcc      	ite	gt
 800707e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007082:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007086:	464b      	mov	r3, r9
 8007088:	4652      	mov	r2, sl
 800708a:	4620      	mov	r0, r4
 800708c:	4639      	mov	r1, r7
 800708e:	f7f9 fbe5 	bl	800085c <__aeabi_ddiv>
 8007092:	ec41 0b10 	vmov	d0, r0, r1
 8007096:	b005      	add	sp, #20
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800709c <__copybits>:
 800709c:	3901      	subs	r1, #1
 800709e:	b570      	push	{r4, r5, r6, lr}
 80070a0:	1149      	asrs	r1, r1, #5
 80070a2:	6914      	ldr	r4, [r2, #16]
 80070a4:	3101      	adds	r1, #1
 80070a6:	f102 0314 	add.w	r3, r2, #20
 80070aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070b2:	1f05      	subs	r5, r0, #4
 80070b4:	42a3      	cmp	r3, r4
 80070b6:	d30c      	bcc.n	80070d2 <__copybits+0x36>
 80070b8:	1aa3      	subs	r3, r4, r2
 80070ba:	3b11      	subs	r3, #17
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	3211      	adds	r2, #17
 80070c2:	42a2      	cmp	r2, r4
 80070c4:	bf88      	it	hi
 80070c6:	2300      	movhi	r3, #0
 80070c8:	4418      	add	r0, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	4288      	cmp	r0, r1
 80070ce:	d305      	bcc.n	80070dc <__copybits+0x40>
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80070d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80070da:	e7eb      	b.n	80070b4 <__copybits+0x18>
 80070dc:	f840 3b04 	str.w	r3, [r0], #4
 80070e0:	e7f4      	b.n	80070cc <__copybits+0x30>

080070e2 <__any_on>:
 80070e2:	f100 0214 	add.w	r2, r0, #20
 80070e6:	6900      	ldr	r0, [r0, #16]
 80070e8:	114b      	asrs	r3, r1, #5
 80070ea:	4298      	cmp	r0, r3
 80070ec:	b510      	push	{r4, lr}
 80070ee:	db11      	blt.n	8007114 <__any_on+0x32>
 80070f0:	dd0a      	ble.n	8007108 <__any_on+0x26>
 80070f2:	f011 011f 	ands.w	r1, r1, #31
 80070f6:	d007      	beq.n	8007108 <__any_on+0x26>
 80070f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070fc:	fa24 f001 	lsr.w	r0, r4, r1
 8007100:	fa00 f101 	lsl.w	r1, r0, r1
 8007104:	428c      	cmp	r4, r1
 8007106:	d10b      	bne.n	8007120 <__any_on+0x3e>
 8007108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800710c:	4293      	cmp	r3, r2
 800710e:	d803      	bhi.n	8007118 <__any_on+0x36>
 8007110:	2000      	movs	r0, #0
 8007112:	bd10      	pop	{r4, pc}
 8007114:	4603      	mov	r3, r0
 8007116:	e7f7      	b.n	8007108 <__any_on+0x26>
 8007118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800711c:	2900      	cmp	r1, #0
 800711e:	d0f5      	beq.n	800710c <__any_on+0x2a>
 8007120:	2001      	movs	r0, #1
 8007122:	e7f6      	b.n	8007112 <__any_on+0x30>

08007124 <sulp>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4604      	mov	r4, r0
 8007128:	460d      	mov	r5, r1
 800712a:	ec45 4b10 	vmov	d0, r4, r5
 800712e:	4616      	mov	r6, r2
 8007130:	f7ff feba 	bl	8006ea8 <__ulp>
 8007134:	ec51 0b10 	vmov	r0, r1, d0
 8007138:	b17e      	cbz	r6, 800715a <sulp+0x36>
 800713a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800713e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007142:	2b00      	cmp	r3, #0
 8007144:	dd09      	ble.n	800715a <sulp+0x36>
 8007146:	051b      	lsls	r3, r3, #20
 8007148:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800714c:	2400      	movs	r4, #0
 800714e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	f7f9 fa57 	bl	8000608 <__aeabi_dmul>
 800715a:	ec41 0b10 	vmov	d0, r0, r1
 800715e:	bd70      	pop	{r4, r5, r6, pc}

08007160 <_strtod_l>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	b09f      	sub	sp, #124	@ 0x7c
 8007166:	460c      	mov	r4, r1
 8007168:	9217      	str	r2, [sp, #92]	@ 0x5c
 800716a:	2200      	movs	r2, #0
 800716c:	921a      	str	r2, [sp, #104]	@ 0x68
 800716e:	9005      	str	r0, [sp, #20]
 8007170:	f04f 0a00 	mov.w	sl, #0
 8007174:	f04f 0b00 	mov.w	fp, #0
 8007178:	460a      	mov	r2, r1
 800717a:	9219      	str	r2, [sp, #100]	@ 0x64
 800717c:	7811      	ldrb	r1, [r2, #0]
 800717e:	292b      	cmp	r1, #43	@ 0x2b
 8007180:	d04a      	beq.n	8007218 <_strtod_l+0xb8>
 8007182:	d838      	bhi.n	80071f6 <_strtod_l+0x96>
 8007184:	290d      	cmp	r1, #13
 8007186:	d832      	bhi.n	80071ee <_strtod_l+0x8e>
 8007188:	2908      	cmp	r1, #8
 800718a:	d832      	bhi.n	80071f2 <_strtod_l+0x92>
 800718c:	2900      	cmp	r1, #0
 800718e:	d03b      	beq.n	8007208 <_strtod_l+0xa8>
 8007190:	2200      	movs	r2, #0
 8007192:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007194:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007196:	782a      	ldrb	r2, [r5, #0]
 8007198:	2a30      	cmp	r2, #48	@ 0x30
 800719a:	f040 80b3 	bne.w	8007304 <_strtod_l+0x1a4>
 800719e:	786a      	ldrb	r2, [r5, #1]
 80071a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071a4:	2a58      	cmp	r2, #88	@ 0x58
 80071a6:	d16e      	bne.n	8007286 <_strtod_l+0x126>
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4a8e      	ldr	r2, [pc, #568]	@ (80073ec <_strtod_l+0x28c>)
 80071b4:	9805      	ldr	r0, [sp, #20]
 80071b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80071b8:	a919      	add	r1, sp, #100	@ 0x64
 80071ba:	f001 faff 	bl	80087bc <__gethex>
 80071be:	f010 060f 	ands.w	r6, r0, #15
 80071c2:	4604      	mov	r4, r0
 80071c4:	d005      	beq.n	80071d2 <_strtod_l+0x72>
 80071c6:	2e06      	cmp	r6, #6
 80071c8:	d128      	bne.n	800721c <_strtod_l+0xbc>
 80071ca:	3501      	adds	r5, #1
 80071cc:	2300      	movs	r3, #0
 80071ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80071d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 858e 	bne.w	8007cf6 <_strtod_l+0xb96>
 80071da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071dc:	b1cb      	cbz	r3, 8007212 <_strtod_l+0xb2>
 80071de:	4652      	mov	r2, sl
 80071e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80071e4:	ec43 2b10 	vmov	d0, r2, r3
 80071e8:	b01f      	add	sp, #124	@ 0x7c
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	2920      	cmp	r1, #32
 80071f0:	d1ce      	bne.n	8007190 <_strtod_l+0x30>
 80071f2:	3201      	adds	r2, #1
 80071f4:	e7c1      	b.n	800717a <_strtod_l+0x1a>
 80071f6:	292d      	cmp	r1, #45	@ 0x2d
 80071f8:	d1ca      	bne.n	8007190 <_strtod_l+0x30>
 80071fa:	2101      	movs	r1, #1
 80071fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071fe:	1c51      	adds	r1, r2, #1
 8007200:	9119      	str	r1, [sp, #100]	@ 0x64
 8007202:	7852      	ldrb	r2, [r2, #1]
 8007204:	2a00      	cmp	r2, #0
 8007206:	d1c5      	bne.n	8007194 <_strtod_l+0x34>
 8007208:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800720a:	9419      	str	r4, [sp, #100]	@ 0x64
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 8570 	bne.w	8007cf2 <_strtod_l+0xb92>
 8007212:	4652      	mov	r2, sl
 8007214:	465b      	mov	r3, fp
 8007216:	e7e5      	b.n	80071e4 <_strtod_l+0x84>
 8007218:	2100      	movs	r1, #0
 800721a:	e7ef      	b.n	80071fc <_strtod_l+0x9c>
 800721c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800721e:	b13a      	cbz	r2, 8007230 <_strtod_l+0xd0>
 8007220:	2135      	movs	r1, #53	@ 0x35
 8007222:	a81c      	add	r0, sp, #112	@ 0x70
 8007224:	f7ff ff3a 	bl	800709c <__copybits>
 8007228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800722a:	9805      	ldr	r0, [sp, #20]
 800722c:	f7ff fb08 	bl	8006840 <_Bfree>
 8007230:	3e01      	subs	r6, #1
 8007232:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007234:	2e04      	cmp	r6, #4
 8007236:	d806      	bhi.n	8007246 <_strtod_l+0xe6>
 8007238:	e8df f006 	tbb	[pc, r6]
 800723c:	201d0314 	.word	0x201d0314
 8007240:	14          	.byte	0x14
 8007241:	00          	.byte	0x00
 8007242:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007246:	05e1      	lsls	r1, r4, #23
 8007248:	bf48      	it	mi
 800724a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800724e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007252:	0d1b      	lsrs	r3, r3, #20
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1bb      	bne.n	80071d2 <_strtod_l+0x72>
 800725a:	f7fe fb2f 	bl	80058bc <__errno>
 800725e:	2322      	movs	r3, #34	@ 0x22
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	e7b6      	b.n	80071d2 <_strtod_l+0x72>
 8007264:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800726c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007270:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007274:	e7e7      	b.n	8007246 <_strtod_l+0xe6>
 8007276:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80073f4 <_strtod_l+0x294>
 800727a:	e7e4      	b.n	8007246 <_strtod_l+0xe6>
 800727c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007280:	f04f 3aff 	mov.w	sl, #4294967295
 8007284:	e7df      	b.n	8007246 <_strtod_l+0xe6>
 8007286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	9219      	str	r2, [sp, #100]	@ 0x64
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b30      	cmp	r3, #48	@ 0x30
 8007290:	d0f9      	beq.n	8007286 <_strtod_l+0x126>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d09d      	beq.n	80071d2 <_strtod_l+0x72>
 8007296:	2301      	movs	r3, #1
 8007298:	9309      	str	r3, [sp, #36]	@ 0x24
 800729a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800729c:	930c      	str	r3, [sp, #48]	@ 0x30
 800729e:	2300      	movs	r3, #0
 80072a0:	9308      	str	r3, [sp, #32]
 80072a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a4:	461f      	mov	r7, r3
 80072a6:	220a      	movs	r2, #10
 80072a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80072aa:	7805      	ldrb	r5, [r0, #0]
 80072ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80072b0:	b2d9      	uxtb	r1, r3
 80072b2:	2909      	cmp	r1, #9
 80072b4:	d928      	bls.n	8007308 <_strtod_l+0x1a8>
 80072b6:	494e      	ldr	r1, [pc, #312]	@ (80073f0 <_strtod_l+0x290>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	f001 f9ab 	bl	8008614 <strncmp>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d032      	beq.n	8007328 <_strtod_l+0x1c8>
 80072c2:	2000      	movs	r0, #0
 80072c4:	462a      	mov	r2, r5
 80072c6:	4681      	mov	r9, r0
 80072c8:	463d      	mov	r5, r7
 80072ca:	4603      	mov	r3, r0
 80072cc:	2a65      	cmp	r2, #101	@ 0x65
 80072ce:	d001      	beq.n	80072d4 <_strtod_l+0x174>
 80072d0:	2a45      	cmp	r2, #69	@ 0x45
 80072d2:	d114      	bne.n	80072fe <_strtod_l+0x19e>
 80072d4:	b91d      	cbnz	r5, 80072de <_strtod_l+0x17e>
 80072d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d8:	4302      	orrs	r2, r0
 80072da:	d095      	beq.n	8007208 <_strtod_l+0xa8>
 80072dc:	2500      	movs	r5, #0
 80072de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80072e0:	1c62      	adds	r2, r4, #1
 80072e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80072e4:	7862      	ldrb	r2, [r4, #1]
 80072e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80072e8:	d077      	beq.n	80073da <_strtod_l+0x27a>
 80072ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80072ec:	d07b      	beq.n	80073e6 <_strtod_l+0x286>
 80072ee:	f04f 0c00 	mov.w	ip, #0
 80072f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80072f6:	2909      	cmp	r1, #9
 80072f8:	f240 8082 	bls.w	8007400 <_strtod_l+0x2a0>
 80072fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	e0a2      	b.n	800744a <_strtod_l+0x2ea>
 8007304:	2300      	movs	r3, #0
 8007306:	e7c7      	b.n	8007298 <_strtod_l+0x138>
 8007308:	2f08      	cmp	r7, #8
 800730a:	bfd5      	itete	le
 800730c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800730e:	9908      	ldrgt	r1, [sp, #32]
 8007310:	fb02 3301 	mlale	r3, r2, r1, r3
 8007314:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007318:	f100 0001 	add.w	r0, r0, #1
 800731c:	bfd4      	ite	le
 800731e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007320:	9308      	strgt	r3, [sp, #32]
 8007322:	3701      	adds	r7, #1
 8007324:	9019      	str	r0, [sp, #100]	@ 0x64
 8007326:	e7bf      	b.n	80072a8 <_strtod_l+0x148>
 8007328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	9219      	str	r2, [sp, #100]	@ 0x64
 800732e:	785a      	ldrb	r2, [r3, #1]
 8007330:	b37f      	cbz	r7, 8007392 <_strtod_l+0x232>
 8007332:	4681      	mov	r9, r0
 8007334:	463d      	mov	r5, r7
 8007336:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800733a:	2b09      	cmp	r3, #9
 800733c:	d912      	bls.n	8007364 <_strtod_l+0x204>
 800733e:	2301      	movs	r3, #1
 8007340:	e7c4      	b.n	80072cc <_strtod_l+0x16c>
 8007342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	9219      	str	r2, [sp, #100]	@ 0x64
 8007348:	785a      	ldrb	r2, [r3, #1]
 800734a:	3001      	adds	r0, #1
 800734c:	2a30      	cmp	r2, #48	@ 0x30
 800734e:	d0f8      	beq.n	8007342 <_strtod_l+0x1e2>
 8007350:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007354:	2b08      	cmp	r3, #8
 8007356:	f200 84d3 	bhi.w	8007d00 <_strtod_l+0xba0>
 800735a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800735c:	930c      	str	r3, [sp, #48]	@ 0x30
 800735e:	4681      	mov	r9, r0
 8007360:	2000      	movs	r0, #0
 8007362:	4605      	mov	r5, r0
 8007364:	3a30      	subs	r2, #48	@ 0x30
 8007366:	f100 0301 	add.w	r3, r0, #1
 800736a:	d02a      	beq.n	80073c2 <_strtod_l+0x262>
 800736c:	4499      	add	r9, r3
 800736e:	eb00 0c05 	add.w	ip, r0, r5
 8007372:	462b      	mov	r3, r5
 8007374:	210a      	movs	r1, #10
 8007376:	4563      	cmp	r3, ip
 8007378:	d10d      	bne.n	8007396 <_strtod_l+0x236>
 800737a:	1c69      	adds	r1, r5, #1
 800737c:	4401      	add	r1, r0
 800737e:	4428      	add	r0, r5
 8007380:	2808      	cmp	r0, #8
 8007382:	dc16      	bgt.n	80073b2 <_strtod_l+0x252>
 8007384:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007386:	230a      	movs	r3, #10
 8007388:	fb03 2300 	mla	r3, r3, r0, r2
 800738c:	930a      	str	r3, [sp, #40]	@ 0x28
 800738e:	2300      	movs	r3, #0
 8007390:	e018      	b.n	80073c4 <_strtod_l+0x264>
 8007392:	4638      	mov	r0, r7
 8007394:	e7da      	b.n	800734c <_strtod_l+0x1ec>
 8007396:	2b08      	cmp	r3, #8
 8007398:	f103 0301 	add.w	r3, r3, #1
 800739c:	dc03      	bgt.n	80073a6 <_strtod_l+0x246>
 800739e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80073a0:	434e      	muls	r6, r1
 80073a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80073a4:	e7e7      	b.n	8007376 <_strtod_l+0x216>
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	bfde      	ittt	le
 80073aa:	9e08      	ldrle	r6, [sp, #32]
 80073ac:	434e      	mulle	r6, r1
 80073ae:	9608      	strle	r6, [sp, #32]
 80073b0:	e7e1      	b.n	8007376 <_strtod_l+0x216>
 80073b2:	280f      	cmp	r0, #15
 80073b4:	dceb      	bgt.n	800738e <_strtod_l+0x22e>
 80073b6:	9808      	ldr	r0, [sp, #32]
 80073b8:	230a      	movs	r3, #10
 80073ba:	fb03 2300 	mla	r3, r3, r0, r2
 80073be:	9308      	str	r3, [sp, #32]
 80073c0:	e7e5      	b.n	800738e <_strtod_l+0x22e>
 80073c2:	4629      	mov	r1, r5
 80073c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073c6:	1c50      	adds	r0, r2, #1
 80073c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80073ca:	7852      	ldrb	r2, [r2, #1]
 80073cc:	4618      	mov	r0, r3
 80073ce:	460d      	mov	r5, r1
 80073d0:	e7b1      	b.n	8007336 <_strtod_l+0x1d6>
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	2301      	movs	r3, #1
 80073d8:	e77d      	b.n	80072d6 <_strtod_l+0x176>
 80073da:	f04f 0c00 	mov.w	ip, #0
 80073de:	1ca2      	adds	r2, r4, #2
 80073e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80073e2:	78a2      	ldrb	r2, [r4, #2]
 80073e4:	e785      	b.n	80072f2 <_strtod_l+0x192>
 80073e6:	f04f 0c01 	mov.w	ip, #1
 80073ea:	e7f8      	b.n	80073de <_strtod_l+0x27e>
 80073ec:	08009920 	.word	0x08009920
 80073f0:	08009908 	.word	0x08009908
 80073f4:	7ff00000 	.word	0x7ff00000
 80073f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073fa:	1c51      	adds	r1, r2, #1
 80073fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80073fe:	7852      	ldrb	r2, [r2, #1]
 8007400:	2a30      	cmp	r2, #48	@ 0x30
 8007402:	d0f9      	beq.n	80073f8 <_strtod_l+0x298>
 8007404:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007408:	2908      	cmp	r1, #8
 800740a:	f63f af78 	bhi.w	80072fe <_strtod_l+0x19e>
 800740e:	3a30      	subs	r2, #48	@ 0x30
 8007410:	920e      	str	r2, [sp, #56]	@ 0x38
 8007412:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007414:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007416:	f04f 080a 	mov.w	r8, #10
 800741a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800741c:	1c56      	adds	r6, r2, #1
 800741e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007420:	7852      	ldrb	r2, [r2, #1]
 8007422:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007426:	f1be 0f09 	cmp.w	lr, #9
 800742a:	d939      	bls.n	80074a0 <_strtod_l+0x340>
 800742c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800742e:	1a76      	subs	r6, r6, r1
 8007430:	2e08      	cmp	r6, #8
 8007432:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007436:	dc03      	bgt.n	8007440 <_strtod_l+0x2e0>
 8007438:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800743a:	4588      	cmp	r8, r1
 800743c:	bfa8      	it	ge
 800743e:	4688      	movge	r8, r1
 8007440:	f1bc 0f00 	cmp.w	ip, #0
 8007444:	d001      	beq.n	800744a <_strtod_l+0x2ea>
 8007446:	f1c8 0800 	rsb	r8, r8, #0
 800744a:	2d00      	cmp	r5, #0
 800744c:	d14e      	bne.n	80074ec <_strtod_l+0x38c>
 800744e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007450:	4308      	orrs	r0, r1
 8007452:	f47f aebe 	bne.w	80071d2 <_strtod_l+0x72>
 8007456:	2b00      	cmp	r3, #0
 8007458:	f47f aed6 	bne.w	8007208 <_strtod_l+0xa8>
 800745c:	2a69      	cmp	r2, #105	@ 0x69
 800745e:	d028      	beq.n	80074b2 <_strtod_l+0x352>
 8007460:	dc25      	bgt.n	80074ae <_strtod_l+0x34e>
 8007462:	2a49      	cmp	r2, #73	@ 0x49
 8007464:	d025      	beq.n	80074b2 <_strtod_l+0x352>
 8007466:	2a4e      	cmp	r2, #78	@ 0x4e
 8007468:	f47f aece 	bne.w	8007208 <_strtod_l+0xa8>
 800746c:	499b      	ldr	r1, [pc, #620]	@ (80076dc <_strtod_l+0x57c>)
 800746e:	a819      	add	r0, sp, #100	@ 0x64
 8007470:	f001 fbc6 	bl	8008c00 <__match>
 8007474:	2800      	cmp	r0, #0
 8007476:	f43f aec7 	beq.w	8007208 <_strtod_l+0xa8>
 800747a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b28      	cmp	r3, #40	@ 0x28
 8007480:	d12e      	bne.n	80074e0 <_strtod_l+0x380>
 8007482:	4997      	ldr	r1, [pc, #604]	@ (80076e0 <_strtod_l+0x580>)
 8007484:	aa1c      	add	r2, sp, #112	@ 0x70
 8007486:	a819      	add	r0, sp, #100	@ 0x64
 8007488:	f001 fbce 	bl	8008c28 <__hexnan>
 800748c:	2805      	cmp	r0, #5
 800748e:	d127      	bne.n	80074e0 <_strtod_l+0x380>
 8007490:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007492:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007496:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800749a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800749e:	e698      	b.n	80071d2 <_strtod_l+0x72>
 80074a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80074a2:	fb08 2101 	mla	r1, r8, r1, r2
 80074a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80074aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ac:	e7b5      	b.n	800741a <_strtod_l+0x2ba>
 80074ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80074b0:	e7da      	b.n	8007468 <_strtod_l+0x308>
 80074b2:	498c      	ldr	r1, [pc, #560]	@ (80076e4 <_strtod_l+0x584>)
 80074b4:	a819      	add	r0, sp, #100	@ 0x64
 80074b6:	f001 fba3 	bl	8008c00 <__match>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aea4 	beq.w	8007208 <_strtod_l+0xa8>
 80074c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074c2:	4989      	ldr	r1, [pc, #548]	@ (80076e8 <_strtod_l+0x588>)
 80074c4:	3b01      	subs	r3, #1
 80074c6:	a819      	add	r0, sp, #100	@ 0x64
 80074c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80074ca:	f001 fb99 	bl	8008c00 <__match>
 80074ce:	b910      	cbnz	r0, 80074d6 <_strtod_l+0x376>
 80074d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074d2:	3301      	adds	r3, #1
 80074d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80074d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80076f8 <_strtod_l+0x598>
 80074da:	f04f 0a00 	mov.w	sl, #0
 80074de:	e678      	b.n	80071d2 <_strtod_l+0x72>
 80074e0:	4882      	ldr	r0, [pc, #520]	@ (80076ec <_strtod_l+0x58c>)
 80074e2:	f001 f8c9 	bl	8008678 <nan>
 80074e6:	ec5b ab10 	vmov	sl, fp, d0
 80074ea:	e672      	b.n	80071d2 <_strtod_l+0x72>
 80074ec:	eba8 0309 	sub.w	r3, r8, r9
 80074f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f4:	2f00      	cmp	r7, #0
 80074f6:	bf08      	it	eq
 80074f8:	462f      	moveq	r7, r5
 80074fa:	2d10      	cmp	r5, #16
 80074fc:	462c      	mov	r4, r5
 80074fe:	bfa8      	it	ge
 8007500:	2410      	movge	r4, #16
 8007502:	f7f9 f807 	bl	8000514 <__aeabi_ui2d>
 8007506:	2d09      	cmp	r5, #9
 8007508:	4682      	mov	sl, r0
 800750a:	468b      	mov	fp, r1
 800750c:	dc13      	bgt.n	8007536 <_strtod_l+0x3d6>
 800750e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	f43f ae5e 	beq.w	80071d2 <_strtod_l+0x72>
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	dd78      	ble.n	800760c <_strtod_l+0x4ac>
 800751a:	2b16      	cmp	r3, #22
 800751c:	dc5f      	bgt.n	80075de <_strtod_l+0x47e>
 800751e:	4974      	ldr	r1, [pc, #464]	@ (80076f0 <_strtod_l+0x590>)
 8007520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	4652      	mov	r2, sl
 800752a:	465b      	mov	r3, fp
 800752c:	f7f9 f86c 	bl	8000608 <__aeabi_dmul>
 8007530:	4682      	mov	sl, r0
 8007532:	468b      	mov	fp, r1
 8007534:	e64d      	b.n	80071d2 <_strtod_l+0x72>
 8007536:	4b6e      	ldr	r3, [pc, #440]	@ (80076f0 <_strtod_l+0x590>)
 8007538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800753c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007540:	f7f9 f862 	bl	8000608 <__aeabi_dmul>
 8007544:	4682      	mov	sl, r0
 8007546:	9808      	ldr	r0, [sp, #32]
 8007548:	468b      	mov	fp, r1
 800754a:	f7f8 ffe3 	bl	8000514 <__aeabi_ui2d>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4650      	mov	r0, sl
 8007554:	4659      	mov	r1, fp
 8007556:	f7f8 fea1 	bl	800029c <__adddf3>
 800755a:	2d0f      	cmp	r5, #15
 800755c:	4682      	mov	sl, r0
 800755e:	468b      	mov	fp, r1
 8007560:	ddd5      	ble.n	800750e <_strtod_l+0x3ae>
 8007562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007564:	1b2c      	subs	r4, r5, r4
 8007566:	441c      	add	r4, r3
 8007568:	2c00      	cmp	r4, #0
 800756a:	f340 8096 	ble.w	800769a <_strtod_l+0x53a>
 800756e:	f014 030f 	ands.w	r3, r4, #15
 8007572:	d00a      	beq.n	800758a <_strtod_l+0x42a>
 8007574:	495e      	ldr	r1, [pc, #376]	@ (80076f0 <_strtod_l+0x590>)
 8007576:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007582:	f7f9 f841 	bl	8000608 <__aeabi_dmul>
 8007586:	4682      	mov	sl, r0
 8007588:	468b      	mov	fp, r1
 800758a:	f034 040f 	bics.w	r4, r4, #15
 800758e:	d073      	beq.n	8007678 <_strtod_l+0x518>
 8007590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007594:	dd48      	ble.n	8007628 <_strtod_l+0x4c8>
 8007596:	2400      	movs	r4, #0
 8007598:	46a0      	mov	r8, r4
 800759a:	940a      	str	r4, [sp, #40]	@ 0x28
 800759c:	46a1      	mov	r9, r4
 800759e:	9a05      	ldr	r2, [sp, #20]
 80075a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80076f8 <_strtod_l+0x598>
 80075a4:	2322      	movs	r3, #34	@ 0x22
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	f04f 0a00 	mov.w	sl, #0
 80075ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f ae0f 	beq.w	80071d2 <_strtod_l+0x72>
 80075b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075b6:	9805      	ldr	r0, [sp, #20]
 80075b8:	f7ff f942 	bl	8006840 <_Bfree>
 80075bc:	9805      	ldr	r0, [sp, #20]
 80075be:	4649      	mov	r1, r9
 80075c0:	f7ff f93e 	bl	8006840 <_Bfree>
 80075c4:	9805      	ldr	r0, [sp, #20]
 80075c6:	4641      	mov	r1, r8
 80075c8:	f7ff f93a 	bl	8006840 <_Bfree>
 80075cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075ce:	9805      	ldr	r0, [sp, #20]
 80075d0:	f7ff f936 	bl	8006840 <_Bfree>
 80075d4:	9805      	ldr	r0, [sp, #20]
 80075d6:	4621      	mov	r1, r4
 80075d8:	f7ff f932 	bl	8006840 <_Bfree>
 80075dc:	e5f9      	b.n	80071d2 <_strtod_l+0x72>
 80075de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80075e4:	4293      	cmp	r3, r2
 80075e6:	dbbc      	blt.n	8007562 <_strtod_l+0x402>
 80075e8:	4c41      	ldr	r4, [pc, #260]	@ (80076f0 <_strtod_l+0x590>)
 80075ea:	f1c5 050f 	rsb	r5, r5, #15
 80075ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80075f2:	4652      	mov	r2, sl
 80075f4:	465b      	mov	r3, fp
 80075f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075fa:	f7f9 f805 	bl	8000608 <__aeabi_dmul>
 80075fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007600:	1b5d      	subs	r5, r3, r5
 8007602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800760a:	e78f      	b.n	800752c <_strtod_l+0x3cc>
 800760c:	3316      	adds	r3, #22
 800760e:	dba8      	blt.n	8007562 <_strtod_l+0x402>
 8007610:	4b37      	ldr	r3, [pc, #220]	@ (80076f0 <_strtod_l+0x590>)
 8007612:	eba9 0808 	sub.w	r8, r9, r8
 8007616:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800761a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800761e:	4650      	mov	r0, sl
 8007620:	4659      	mov	r1, fp
 8007622:	f7f9 f91b 	bl	800085c <__aeabi_ddiv>
 8007626:	e783      	b.n	8007530 <_strtod_l+0x3d0>
 8007628:	4b32      	ldr	r3, [pc, #200]	@ (80076f4 <_strtod_l+0x594>)
 800762a:	9308      	str	r3, [sp, #32]
 800762c:	2300      	movs	r3, #0
 800762e:	1124      	asrs	r4, r4, #4
 8007630:	4650      	mov	r0, sl
 8007632:	4659      	mov	r1, fp
 8007634:	461e      	mov	r6, r3
 8007636:	2c01      	cmp	r4, #1
 8007638:	dc21      	bgt.n	800767e <_strtod_l+0x51e>
 800763a:	b10b      	cbz	r3, 8007640 <_strtod_l+0x4e0>
 800763c:	4682      	mov	sl, r0
 800763e:	468b      	mov	fp, r1
 8007640:	492c      	ldr	r1, [pc, #176]	@ (80076f4 <_strtod_l+0x594>)
 8007642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800764a:	4652      	mov	r2, sl
 800764c:	465b      	mov	r3, fp
 800764e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007652:	f7f8 ffd9 	bl	8000608 <__aeabi_dmul>
 8007656:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <_strtod_l+0x598>)
 8007658:	460a      	mov	r2, r1
 800765a:	400b      	ands	r3, r1
 800765c:	4927      	ldr	r1, [pc, #156]	@ (80076fc <_strtod_l+0x59c>)
 800765e:	428b      	cmp	r3, r1
 8007660:	4682      	mov	sl, r0
 8007662:	d898      	bhi.n	8007596 <_strtod_l+0x436>
 8007664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007668:	428b      	cmp	r3, r1
 800766a:	bf86      	itte	hi
 800766c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007700 <_strtod_l+0x5a0>
 8007670:	f04f 3aff 	movhi.w	sl, #4294967295
 8007674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007678:	2300      	movs	r3, #0
 800767a:	9308      	str	r3, [sp, #32]
 800767c:	e07a      	b.n	8007774 <_strtod_l+0x614>
 800767e:	07e2      	lsls	r2, r4, #31
 8007680:	d505      	bpl.n	800768e <_strtod_l+0x52e>
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f8 ffbe 	bl	8000608 <__aeabi_dmul>
 800768c:	2301      	movs	r3, #1
 800768e:	9a08      	ldr	r2, [sp, #32]
 8007690:	3208      	adds	r2, #8
 8007692:	3601      	adds	r6, #1
 8007694:	1064      	asrs	r4, r4, #1
 8007696:	9208      	str	r2, [sp, #32]
 8007698:	e7cd      	b.n	8007636 <_strtod_l+0x4d6>
 800769a:	d0ed      	beq.n	8007678 <_strtod_l+0x518>
 800769c:	4264      	negs	r4, r4
 800769e:	f014 020f 	ands.w	r2, r4, #15
 80076a2:	d00a      	beq.n	80076ba <_strtod_l+0x55a>
 80076a4:	4b12      	ldr	r3, [pc, #72]	@ (80076f0 <_strtod_l+0x590>)
 80076a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076aa:	4650      	mov	r0, sl
 80076ac:	4659      	mov	r1, fp
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f9 f8d3 	bl	800085c <__aeabi_ddiv>
 80076b6:	4682      	mov	sl, r0
 80076b8:	468b      	mov	fp, r1
 80076ba:	1124      	asrs	r4, r4, #4
 80076bc:	d0dc      	beq.n	8007678 <_strtod_l+0x518>
 80076be:	2c1f      	cmp	r4, #31
 80076c0:	dd20      	ble.n	8007704 <_strtod_l+0x5a4>
 80076c2:	2400      	movs	r4, #0
 80076c4:	46a0      	mov	r8, r4
 80076c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80076c8:	46a1      	mov	r9, r4
 80076ca:	9a05      	ldr	r2, [sp, #20]
 80076cc:	2322      	movs	r3, #34	@ 0x22
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	f04f 0b00 	mov.w	fp, #0
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	e768      	b.n	80075ac <_strtod_l+0x44c>
 80076da:	bf00      	nop
 80076dc:	080096f9 	.word	0x080096f9
 80076e0:	0800990c 	.word	0x0800990c
 80076e4:	080096f1 	.word	0x080096f1
 80076e8:	08009728 	.word	0x08009728
 80076ec:	08009ab5 	.word	0x08009ab5
 80076f0:	08009840 	.word	0x08009840
 80076f4:	08009818 	.word	0x08009818
 80076f8:	7ff00000 	.word	0x7ff00000
 80076fc:	7ca00000 	.word	0x7ca00000
 8007700:	7fefffff 	.word	0x7fefffff
 8007704:	f014 0310 	ands.w	r3, r4, #16
 8007708:	bf18      	it	ne
 800770a:	236a      	movne	r3, #106	@ 0x6a
 800770c:	4ea9      	ldr	r6, [pc, #676]	@ (80079b4 <_strtod_l+0x854>)
 800770e:	9308      	str	r3, [sp, #32]
 8007710:	4650      	mov	r0, sl
 8007712:	4659      	mov	r1, fp
 8007714:	2300      	movs	r3, #0
 8007716:	07e2      	lsls	r2, r4, #31
 8007718:	d504      	bpl.n	8007724 <_strtod_l+0x5c4>
 800771a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800771e:	f7f8 ff73 	bl	8000608 <__aeabi_dmul>
 8007722:	2301      	movs	r3, #1
 8007724:	1064      	asrs	r4, r4, #1
 8007726:	f106 0608 	add.w	r6, r6, #8
 800772a:	d1f4      	bne.n	8007716 <_strtod_l+0x5b6>
 800772c:	b10b      	cbz	r3, 8007732 <_strtod_l+0x5d2>
 800772e:	4682      	mov	sl, r0
 8007730:	468b      	mov	fp, r1
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	b1b3      	cbz	r3, 8007764 <_strtod_l+0x604>
 8007736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800773a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800773e:	2b00      	cmp	r3, #0
 8007740:	4659      	mov	r1, fp
 8007742:	dd0f      	ble.n	8007764 <_strtod_l+0x604>
 8007744:	2b1f      	cmp	r3, #31
 8007746:	dd55      	ble.n	80077f4 <_strtod_l+0x694>
 8007748:	2b34      	cmp	r3, #52	@ 0x34
 800774a:	bfde      	ittt	le
 800774c:	f04f 33ff 	movle.w	r3, #4294967295
 8007750:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007754:	4093      	lslle	r3, r2
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	bfcc      	ite	gt
 800775c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007760:	ea03 0b01 	andle.w	fp, r3, r1
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4650      	mov	r0, sl
 800776a:	4659      	mov	r1, fp
 800776c:	f7f9 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1a6      	bne.n	80076c2 <_strtod_l+0x562>
 8007774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800777a:	9805      	ldr	r0, [sp, #20]
 800777c:	462b      	mov	r3, r5
 800777e:	463a      	mov	r2, r7
 8007780:	f7ff f8c6 	bl	8006910 <__s2b>
 8007784:	900a      	str	r0, [sp, #40]	@ 0x28
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f af05 	beq.w	8007596 <_strtod_l+0x436>
 800778c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800778e:	2a00      	cmp	r2, #0
 8007790:	eba9 0308 	sub.w	r3, r9, r8
 8007794:	bfa8      	it	ge
 8007796:	2300      	movge	r3, #0
 8007798:	9312      	str	r3, [sp, #72]	@ 0x48
 800779a:	2400      	movs	r4, #0
 800779c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80077a2:	46a0      	mov	r8, r4
 80077a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a6:	9805      	ldr	r0, [sp, #20]
 80077a8:	6859      	ldr	r1, [r3, #4]
 80077aa:	f7ff f809 	bl	80067c0 <_Balloc>
 80077ae:	4681      	mov	r9, r0
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f43f aef4 	beq.w	800759e <_strtod_l+0x43e>
 80077b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	3202      	adds	r2, #2
 80077bc:	f103 010c 	add.w	r1, r3, #12
 80077c0:	0092      	lsls	r2, r2, #2
 80077c2:	300c      	adds	r0, #12
 80077c4:	f000 ff48 	bl	8008658 <memcpy>
 80077c8:	ec4b ab10 	vmov	d0, sl, fp
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80077d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80077d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80077d6:	f7ff fbd7 	bl	8006f88 <__d2b>
 80077da:	901a      	str	r0, [sp, #104]	@ 0x68
 80077dc:	2800      	cmp	r0, #0
 80077de:	f43f aede 	beq.w	800759e <_strtod_l+0x43e>
 80077e2:	9805      	ldr	r0, [sp, #20]
 80077e4:	2101      	movs	r1, #1
 80077e6:	f7ff f929 	bl	8006a3c <__i2b>
 80077ea:	4680      	mov	r8, r0
 80077ec:	b948      	cbnz	r0, 8007802 <_strtod_l+0x6a2>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	e6d4      	b.n	800759e <_strtod_l+0x43e>
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	ea03 0a0a 	and.w	sl, r3, sl
 8007800:	e7b0      	b.n	8007764 <_strtod_l+0x604>
 8007802:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007804:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007806:	2d00      	cmp	r5, #0
 8007808:	bfab      	itete	ge
 800780a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800780c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800780e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007810:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007812:	bfac      	ite	ge
 8007814:	18ef      	addge	r7, r5, r3
 8007816:	1b5e      	sublt	r6, r3, r5
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	1aed      	subs	r5, r5, r3
 800781c:	4415      	add	r5, r2
 800781e:	4b66      	ldr	r3, [pc, #408]	@ (80079b8 <_strtod_l+0x858>)
 8007820:	3d01      	subs	r5, #1
 8007822:	429d      	cmp	r5, r3
 8007824:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007828:	da50      	bge.n	80078cc <_strtod_l+0x76c>
 800782a:	1b5b      	subs	r3, r3, r5
 800782c:	2b1f      	cmp	r3, #31
 800782e:	eba2 0203 	sub.w	r2, r2, r3
 8007832:	f04f 0101 	mov.w	r1, #1
 8007836:	dc3d      	bgt.n	80078b4 <_strtod_l+0x754>
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800783e:	2300      	movs	r3, #0
 8007840:	9310      	str	r3, [sp, #64]	@ 0x40
 8007842:	18bd      	adds	r5, r7, r2
 8007844:	9b08      	ldr	r3, [sp, #32]
 8007846:	42af      	cmp	r7, r5
 8007848:	4416      	add	r6, r2
 800784a:	441e      	add	r6, r3
 800784c:	463b      	mov	r3, r7
 800784e:	bfa8      	it	ge
 8007850:	462b      	movge	r3, r5
 8007852:	42b3      	cmp	r3, r6
 8007854:	bfa8      	it	ge
 8007856:	4633      	movge	r3, r6
 8007858:	2b00      	cmp	r3, #0
 800785a:	bfc2      	ittt	gt
 800785c:	1aed      	subgt	r5, r5, r3
 800785e:	1af6      	subgt	r6, r6, r3
 8007860:	1aff      	subgt	r7, r7, r3
 8007862:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd16      	ble.n	8007896 <_strtod_l+0x736>
 8007868:	4641      	mov	r1, r8
 800786a:	9805      	ldr	r0, [sp, #20]
 800786c:	461a      	mov	r2, r3
 800786e:	f7ff f9a5 	bl	8006bbc <__pow5mult>
 8007872:	4680      	mov	r8, r0
 8007874:	2800      	cmp	r0, #0
 8007876:	d0ba      	beq.n	80077ee <_strtod_l+0x68e>
 8007878:	4601      	mov	r1, r0
 800787a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800787c:	9805      	ldr	r0, [sp, #20]
 800787e:	f7ff f8f3 	bl	8006a68 <__multiply>
 8007882:	900e      	str	r0, [sp, #56]	@ 0x38
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f ae8a 	beq.w	800759e <_strtod_l+0x43e>
 800788a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800788c:	9805      	ldr	r0, [sp, #20]
 800788e:	f7fe ffd7 	bl	8006840 <_Bfree>
 8007892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007894:	931a      	str	r3, [sp, #104]	@ 0x68
 8007896:	2d00      	cmp	r5, #0
 8007898:	dc1d      	bgt.n	80078d6 <_strtod_l+0x776>
 800789a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	dd23      	ble.n	80078e8 <_strtod_l+0x788>
 80078a0:	4649      	mov	r1, r9
 80078a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80078a4:	9805      	ldr	r0, [sp, #20]
 80078a6:	f7ff f989 	bl	8006bbc <__pow5mult>
 80078aa:	4681      	mov	r9, r0
 80078ac:	b9e0      	cbnz	r0, 80078e8 <_strtod_l+0x788>
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	e674      	b.n	800759e <_strtod_l+0x43e>
 80078b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80078b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80078bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80078c0:	35e2      	adds	r5, #226	@ 0xe2
 80078c2:	fa01 f305 	lsl.w	r3, r1, r5
 80078c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078ca:	e7ba      	b.n	8007842 <_strtod_l+0x6e2>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80078d0:	2301      	movs	r3, #1
 80078d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078d4:	e7b5      	b.n	8007842 <_strtod_l+0x6e2>
 80078d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078d8:	9805      	ldr	r0, [sp, #20]
 80078da:	462a      	mov	r2, r5
 80078dc:	f7ff f9c8 	bl	8006c70 <__lshift>
 80078e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1d9      	bne.n	800789a <_strtod_l+0x73a>
 80078e6:	e65a      	b.n	800759e <_strtod_l+0x43e>
 80078e8:	2e00      	cmp	r6, #0
 80078ea:	dd07      	ble.n	80078fc <_strtod_l+0x79c>
 80078ec:	4649      	mov	r1, r9
 80078ee:	9805      	ldr	r0, [sp, #20]
 80078f0:	4632      	mov	r2, r6
 80078f2:	f7ff f9bd 	bl	8006c70 <__lshift>
 80078f6:	4681      	mov	r9, r0
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d0d8      	beq.n	80078ae <_strtod_l+0x74e>
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	dd08      	ble.n	8007912 <_strtod_l+0x7b2>
 8007900:	4641      	mov	r1, r8
 8007902:	9805      	ldr	r0, [sp, #20]
 8007904:	463a      	mov	r2, r7
 8007906:	f7ff f9b3 	bl	8006c70 <__lshift>
 800790a:	4680      	mov	r8, r0
 800790c:	2800      	cmp	r0, #0
 800790e:	f43f ae46 	beq.w	800759e <_strtod_l+0x43e>
 8007912:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007914:	9805      	ldr	r0, [sp, #20]
 8007916:	464a      	mov	r2, r9
 8007918:	f7ff fa32 	bl	8006d80 <__mdiff>
 800791c:	4604      	mov	r4, r0
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f ae3d 	beq.w	800759e <_strtod_l+0x43e>
 8007924:	68c3      	ldr	r3, [r0, #12]
 8007926:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007928:	2300      	movs	r3, #0
 800792a:	60c3      	str	r3, [r0, #12]
 800792c:	4641      	mov	r1, r8
 800792e:	f7ff fa0b 	bl	8006d48 <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	da46      	bge.n	80079c4 <_strtod_l+0x864>
 8007936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007938:	ea53 030a 	orrs.w	r3, r3, sl
 800793c:	d16c      	bne.n	8007a18 <_strtod_l+0x8b8>
 800793e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007942:	2b00      	cmp	r3, #0
 8007944:	d168      	bne.n	8007a18 <_strtod_l+0x8b8>
 8007946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800794a:	0d1b      	lsrs	r3, r3, #20
 800794c:	051b      	lsls	r3, r3, #20
 800794e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007952:	d961      	bls.n	8007a18 <_strtod_l+0x8b8>
 8007954:	6963      	ldr	r3, [r4, #20]
 8007956:	b913      	cbnz	r3, 800795e <_strtod_l+0x7fe>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	2b01      	cmp	r3, #1
 800795c:	dd5c      	ble.n	8007a18 <_strtod_l+0x8b8>
 800795e:	4621      	mov	r1, r4
 8007960:	2201      	movs	r2, #1
 8007962:	9805      	ldr	r0, [sp, #20]
 8007964:	f7ff f984 	bl	8006c70 <__lshift>
 8007968:	4641      	mov	r1, r8
 800796a:	4604      	mov	r4, r0
 800796c:	f7ff f9ec 	bl	8006d48 <__mcmp>
 8007970:	2800      	cmp	r0, #0
 8007972:	dd51      	ble.n	8007a18 <_strtod_l+0x8b8>
 8007974:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007978:	9a08      	ldr	r2, [sp, #32]
 800797a:	0d1b      	lsrs	r3, r3, #20
 800797c:	051b      	lsls	r3, r3, #20
 800797e:	2a00      	cmp	r2, #0
 8007980:	d06b      	beq.n	8007a5a <_strtod_l+0x8fa>
 8007982:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007986:	d868      	bhi.n	8007a5a <_strtod_l+0x8fa>
 8007988:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800798c:	f67f ae9d 	bls.w	80076ca <_strtod_l+0x56a>
 8007990:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <_strtod_l+0x85c>)
 8007992:	4650      	mov	r0, sl
 8007994:	4659      	mov	r1, fp
 8007996:	2200      	movs	r2, #0
 8007998:	f7f8 fe36 	bl	8000608 <__aeabi_dmul>
 800799c:	4b08      	ldr	r3, [pc, #32]	@ (80079c0 <_strtod_l+0x860>)
 800799e:	400b      	ands	r3, r1
 80079a0:	4682      	mov	sl, r0
 80079a2:	468b      	mov	fp, r1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f47f ae05 	bne.w	80075b4 <_strtod_l+0x454>
 80079aa:	9a05      	ldr	r2, [sp, #20]
 80079ac:	2322      	movs	r3, #34	@ 0x22
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e600      	b.n	80075b4 <_strtod_l+0x454>
 80079b2:	bf00      	nop
 80079b4:	08009938 	.word	0x08009938
 80079b8:	fffffc02 	.word	0xfffffc02
 80079bc:	39500000 	.word	0x39500000
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80079c8:	d165      	bne.n	8007a96 <_strtod_l+0x936>
 80079ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d0:	b35a      	cbz	r2, 8007a2a <_strtod_l+0x8ca>
 80079d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007c50 <_strtod_l+0xaf0>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d12b      	bne.n	8007a30 <_strtod_l+0x8d0>
 80079d8:	9b08      	ldr	r3, [sp, #32]
 80079da:	4651      	mov	r1, sl
 80079dc:	b303      	cbz	r3, 8007a20 <_strtod_l+0x8c0>
 80079de:	4b9d      	ldr	r3, [pc, #628]	@ (8007c54 <_strtod_l+0xaf4>)
 80079e0:	465a      	mov	r2, fp
 80079e2:	4013      	ands	r3, r2
 80079e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ec:	d81b      	bhi.n	8007a26 <_strtod_l+0x8c6>
 80079ee:	0d1b      	lsrs	r3, r3, #20
 80079f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d119      	bne.n	8007a30 <_strtod_l+0x8d0>
 80079fc:	4b96      	ldr	r3, [pc, #600]	@ (8007c58 <_strtod_l+0xaf8>)
 80079fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d102      	bne.n	8007a0a <_strtod_l+0x8aa>
 8007a04:	3101      	adds	r1, #1
 8007a06:	f43f adca 	beq.w	800759e <_strtod_l+0x43e>
 8007a0a:	4b92      	ldr	r3, [pc, #584]	@ (8007c54 <_strtod_l+0xaf4>)
 8007a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a0e:	401a      	ands	r2, r3
 8007a10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	9b08      	ldr	r3, [sp, #32]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1b8      	bne.n	8007990 <_strtod_l+0x830>
 8007a1e:	e5c9      	b.n	80075b4 <_strtod_l+0x454>
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	e7e8      	b.n	80079f8 <_strtod_l+0x898>
 8007a26:	4613      	mov	r3, r2
 8007a28:	e7e6      	b.n	80079f8 <_strtod_l+0x898>
 8007a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a2e:	d0a1      	beq.n	8007974 <_strtod_l+0x814>
 8007a30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a32:	b1db      	cbz	r3, 8007a6c <_strtod_l+0x90c>
 8007a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a36:	4213      	tst	r3, r2
 8007a38:	d0ee      	beq.n	8007a18 <_strtod_l+0x8b8>
 8007a3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a3c:	9a08      	ldr	r2, [sp, #32]
 8007a3e:	4650      	mov	r0, sl
 8007a40:	4659      	mov	r1, fp
 8007a42:	b1bb      	cbz	r3, 8007a74 <_strtod_l+0x914>
 8007a44:	f7ff fb6e 	bl	8007124 <sulp>
 8007a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a4c:	ec53 2b10 	vmov	r2, r3, d0
 8007a50:	f7f8 fc24 	bl	800029c <__adddf3>
 8007a54:	4682      	mov	sl, r0
 8007a56:	468b      	mov	fp, r1
 8007a58:	e7de      	b.n	8007a18 <_strtod_l+0x8b8>
 8007a5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a66:	f04f 3aff 	mov.w	sl, #4294967295
 8007a6a:	e7d5      	b.n	8007a18 <_strtod_l+0x8b8>
 8007a6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a6e:	ea13 0f0a 	tst.w	r3, sl
 8007a72:	e7e1      	b.n	8007a38 <_strtod_l+0x8d8>
 8007a74:	f7ff fb56 	bl	8007124 <sulp>
 8007a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	f7f8 fc0a 	bl	8000298 <__aeabi_dsub>
 8007a84:	2200      	movs	r2, #0
 8007a86:	2300      	movs	r3, #0
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	f7f9 f824 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0c1      	beq.n	8007a18 <_strtod_l+0x8b8>
 8007a94:	e619      	b.n	80076ca <_strtod_l+0x56a>
 8007a96:	4641      	mov	r1, r8
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7ff facd 	bl	8007038 <__ratio>
 8007a9e:	ec57 6b10 	vmov	r6, r7, d0
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f9 f828 	bl	8000b00 <__aeabi_dcmple>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d06f      	beq.n	8007b94 <_strtod_l+0xa34>
 8007ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d17a      	bne.n	8007bb0 <_strtod_l+0xa50>
 8007aba:	f1ba 0f00 	cmp.w	sl, #0
 8007abe:	d158      	bne.n	8007b72 <_strtod_l+0xa12>
 8007ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d15a      	bne.n	8007b80 <_strtod_l+0xa20>
 8007aca:	4b64      	ldr	r3, [pc, #400]	@ (8007c5c <_strtod_l+0xafc>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	f7f9 f80b 	bl	8000aec <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d159      	bne.n	8007b8e <_strtod_l+0xa2e>
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	4b60      	ldr	r3, [pc, #384]	@ (8007c60 <_strtod_l+0xb00>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fd91 	bl	8000608 <__aeabi_dmul>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007aee:	9606      	str	r6, [sp, #24]
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007af6:	4d57      	ldr	r5, [pc, #348]	@ (8007c54 <_strtod_l+0xaf4>)
 8007af8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007afe:	401d      	ands	r5, r3
 8007b00:	4b58      	ldr	r3, [pc, #352]	@ (8007c64 <_strtod_l+0xb04>)
 8007b02:	429d      	cmp	r5, r3
 8007b04:	f040 80b2 	bne.w	8007c6c <_strtod_l+0xb0c>
 8007b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007b0e:	ec4b ab10 	vmov	d0, sl, fp
 8007b12:	f7ff f9c9 	bl	8006ea8 <__ulp>
 8007b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b1a:	ec51 0b10 	vmov	r0, r1, d0
 8007b1e:	f7f8 fd73 	bl	8000608 <__aeabi_dmul>
 8007b22:	4652      	mov	r2, sl
 8007b24:	465b      	mov	r3, fp
 8007b26:	f7f8 fbb9 	bl	800029c <__adddf3>
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4949      	ldr	r1, [pc, #292]	@ (8007c54 <_strtod_l+0xaf4>)
 8007b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c68 <_strtod_l+0xb08>)
 8007b30:	4019      	ands	r1, r3
 8007b32:	4291      	cmp	r1, r2
 8007b34:	4682      	mov	sl, r0
 8007b36:	d942      	bls.n	8007bbe <_strtod_l+0xa5e>
 8007b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b3a:	4b47      	ldr	r3, [pc, #284]	@ (8007c58 <_strtod_l+0xaf8>)
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d103      	bne.n	8007b48 <_strtod_l+0x9e8>
 8007b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b42:	3301      	adds	r3, #1
 8007b44:	f43f ad2b 	beq.w	800759e <_strtod_l+0x43e>
 8007b48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c58 <_strtod_l+0xaf8>
 8007b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b52:	9805      	ldr	r0, [sp, #20]
 8007b54:	f7fe fe74 	bl	8006840 <_Bfree>
 8007b58:	9805      	ldr	r0, [sp, #20]
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7fe fe70 	bl	8006840 <_Bfree>
 8007b60:	9805      	ldr	r0, [sp, #20]
 8007b62:	4641      	mov	r1, r8
 8007b64:	f7fe fe6c 	bl	8006840 <_Bfree>
 8007b68:	9805      	ldr	r0, [sp, #20]
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	f7fe fe68 	bl	8006840 <_Bfree>
 8007b70:	e618      	b.n	80077a4 <_strtod_l+0x644>
 8007b72:	f1ba 0f01 	cmp.w	sl, #1
 8007b76:	d103      	bne.n	8007b80 <_strtod_l+0xa20>
 8007b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f43f ada5 	beq.w	80076ca <_strtod_l+0x56a>
 8007b80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007c30 <_strtod_l+0xad0>
 8007b84:	4f35      	ldr	r7, [pc, #212]	@ (8007c5c <_strtod_l+0xafc>)
 8007b86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e7b1      	b.n	8007af2 <_strtod_l+0x992>
 8007b8e:	4f34      	ldr	r7, [pc, #208]	@ (8007c60 <_strtod_l+0xb00>)
 8007b90:	2600      	movs	r6, #0
 8007b92:	e7aa      	b.n	8007aea <_strtod_l+0x98a>
 8007b94:	4b32      	ldr	r3, [pc, #200]	@ (8007c60 <_strtod_l+0xb00>)
 8007b96:	4630      	mov	r0, r6
 8007b98:	4639      	mov	r1, r7
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f7f8 fd34 	bl	8000608 <__aeabi_dmul>
 8007ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d09f      	beq.n	8007aea <_strtod_l+0x98a>
 8007baa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007bae:	e7a0      	b.n	8007af2 <_strtod_l+0x992>
 8007bb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007c38 <_strtod_l+0xad8>
 8007bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bb8:	ec57 6b17 	vmov	r6, r7, d7
 8007bbc:	e799      	b.n	8007af2 <_strtod_l+0x992>
 8007bbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007bc2:	9b08      	ldr	r3, [sp, #32]
 8007bc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1c1      	bne.n	8007b50 <_strtod_l+0x9f0>
 8007bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	429d      	cmp	r5, r3
 8007bd6:	d1bb      	bne.n	8007b50 <_strtod_l+0x9f0>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	f7f9 f874 	bl	8000cc8 <__aeabi_d2lz>
 8007be0:	f7f8 fce4 	bl	80005ac <__aeabi_l2d>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fb54 	bl	8000298 <__aeabi_dsub>
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007bf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bfe:	ea46 060a 	orr.w	r6, r6, sl
 8007c02:	431e      	orrs	r6, r3
 8007c04:	d06f      	beq.n	8007ce6 <_strtod_l+0xb86>
 8007c06:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c40 <_strtod_l+0xae0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 ff6e 	bl	8000aec <__aeabi_dcmplt>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f47f accf 	bne.w	80075b4 <_strtod_l+0x454>
 8007c16:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c48 <_strtod_l+0xae8>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c20:	f7f8 ff82 	bl	8000b28 <__aeabi_dcmpgt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d093      	beq.n	8007b50 <_strtod_l+0x9f0>
 8007c28:	e4c4      	b.n	80075b4 <_strtod_l+0x454>
 8007c2a:	bf00      	nop
 8007c2c:	f3af 8000 	nop.w
 8007c30:	00000000 	.word	0x00000000
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	00000000 	.word	0x00000000
 8007c3c:	3ff00000 	.word	0x3ff00000
 8007c40:	94a03595 	.word	0x94a03595
 8007c44:	3fdfffff 	.word	0x3fdfffff
 8007c48:	35afe535 	.word	0x35afe535
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	000fffff 	.word	0x000fffff
 8007c54:	7ff00000 	.word	0x7ff00000
 8007c58:	7fefffff 	.word	0x7fefffff
 8007c5c:	3ff00000 	.word	0x3ff00000
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	7fe00000 	.word	0x7fe00000
 8007c68:	7c9fffff 	.word	0x7c9fffff
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	b323      	cbz	r3, 8007cba <_strtod_l+0xb5a>
 8007c70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c74:	d821      	bhi.n	8007cba <_strtod_l+0xb5a>
 8007c76:	a328      	add	r3, pc, #160	@ (adr r3, 8007d18 <_strtod_l+0xbb8>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 ff3e 	bl	8000b00 <__aeabi_dcmple>
 8007c84:	b1a0      	cbz	r0, 8007cb0 <_strtod_l+0xb50>
 8007c86:	4639      	mov	r1, r7
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7f8 ff95 	bl	8000bb8 <__aeabi_d2uiz>
 8007c8e:	2801      	cmp	r0, #1
 8007c90:	bf38      	it	cc
 8007c92:	2001      	movcc	r0, #1
 8007c94:	f7f8 fc3e 	bl	8000514 <__aeabi_ui2d>
 8007c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	b9fb      	cbnz	r3, 8007ce0 <_strtod_l+0xb80>
 8007ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ca4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007ca6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ca8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007cac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007cb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007cb6:	1b5b      	subs	r3, r3, r5
 8007cb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007cba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007cbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007cc2:	f7ff f8f1 	bl	8006ea8 <__ulp>
 8007cc6:	4650      	mov	r0, sl
 8007cc8:	ec53 2b10 	vmov	r2, r3, d0
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fc9b 	bl	8000608 <__aeabi_dmul>
 8007cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007cd6:	f7f8 fae1 	bl	800029c <__adddf3>
 8007cda:	4682      	mov	sl, r0
 8007cdc:	468b      	mov	fp, r1
 8007cde:	e770      	b.n	8007bc2 <_strtod_l+0xa62>
 8007ce0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ce4:	e7e0      	b.n	8007ca8 <_strtod_l+0xb48>
 8007ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d20 <_strtod_l+0xbc0>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 fefe 	bl	8000aec <__aeabi_dcmplt>
 8007cf0:	e798      	b.n	8007c24 <_strtod_l+0xac4>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	f7ff ba6d 	b.w	80071da <_strtod_l+0x7a>
 8007d00:	2a65      	cmp	r2, #101	@ 0x65
 8007d02:	f43f ab66 	beq.w	80073d2 <_strtod_l+0x272>
 8007d06:	2a45      	cmp	r2, #69	@ 0x45
 8007d08:	f43f ab63 	beq.w	80073d2 <_strtod_l+0x272>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f7ff bb9e 	b.w	800744e <_strtod_l+0x2ee>
 8007d12:	bf00      	nop
 8007d14:	f3af 8000 	nop.w
 8007d18:	ffc00000 	.word	0xffc00000
 8007d1c:	41dfffff 	.word	0x41dfffff
 8007d20:	94a03595 	.word	0x94a03595
 8007d24:	3fcfffff 	.word	0x3fcfffff

08007d28 <_strtod_r>:
 8007d28:	4b01      	ldr	r3, [pc, #4]	@ (8007d30 <_strtod_r+0x8>)
 8007d2a:	f7ff ba19 	b.w	8007160 <_strtod_l>
 8007d2e:	bf00      	nop
 8007d30:	20000068 	.word	0x20000068

08007d34 <_strtol_l.constprop.0>:
 8007d34:	2b24      	cmp	r3, #36	@ 0x24
 8007d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d3a:	4686      	mov	lr, r0
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	d801      	bhi.n	8007d44 <_strtol_l.constprop.0+0x10>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d106      	bne.n	8007d52 <_strtol_l.constprop.0+0x1e>
 8007d44:	f7fd fdba 	bl	80058bc <__errno>
 8007d48:	2316      	movs	r3, #22
 8007d4a:	6003      	str	r3, [r0, #0]
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d52:	4834      	ldr	r0, [pc, #208]	@ (8007e24 <_strtol_l.constprop.0+0xf0>)
 8007d54:	460d      	mov	r5, r1
 8007d56:	462a      	mov	r2, r5
 8007d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d5c:	5d06      	ldrb	r6, [r0, r4]
 8007d5e:	f016 0608 	ands.w	r6, r6, #8
 8007d62:	d1f8      	bne.n	8007d56 <_strtol_l.constprop.0+0x22>
 8007d64:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d66:	d12d      	bne.n	8007dc4 <_strtol_l.constprop.0+0x90>
 8007d68:	782c      	ldrb	r4, [r5, #0]
 8007d6a:	2601      	movs	r6, #1
 8007d6c:	1c95      	adds	r5, r2, #2
 8007d6e:	f033 0210 	bics.w	r2, r3, #16
 8007d72:	d109      	bne.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007d74:	2c30      	cmp	r4, #48	@ 0x30
 8007d76:	d12a      	bne.n	8007dce <_strtol_l.constprop.0+0x9a>
 8007d78:	782a      	ldrb	r2, [r5, #0]
 8007d7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d7e:	2a58      	cmp	r2, #88	@ 0x58
 8007d80:	d125      	bne.n	8007dce <_strtol_l.constprop.0+0x9a>
 8007d82:	786c      	ldrb	r4, [r5, #1]
 8007d84:	2310      	movs	r3, #16
 8007d86:	3502      	adds	r5, #2
 8007d88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d90:	2200      	movs	r2, #0
 8007d92:	fbbc f9f3 	udiv	r9, ip, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007da0:	2f09      	cmp	r7, #9
 8007da2:	d81b      	bhi.n	8007ddc <_strtol_l.constprop.0+0xa8>
 8007da4:	463c      	mov	r4, r7
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	dd27      	ble.n	8007dfa <_strtol_l.constprop.0+0xc6>
 8007daa:	1c57      	adds	r7, r2, #1
 8007dac:	d007      	beq.n	8007dbe <_strtol_l.constprop.0+0x8a>
 8007dae:	4581      	cmp	r9, r0
 8007db0:	d320      	bcc.n	8007df4 <_strtol_l.constprop.0+0xc0>
 8007db2:	d101      	bne.n	8007db8 <_strtol_l.constprop.0+0x84>
 8007db4:	45a2      	cmp	sl, r4
 8007db6:	db1d      	blt.n	8007df4 <_strtol_l.constprop.0+0xc0>
 8007db8:	fb00 4003 	mla	r0, r0, r3, r4
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dc2:	e7eb      	b.n	8007d9c <_strtol_l.constprop.0+0x68>
 8007dc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007dc6:	bf04      	itt	eq
 8007dc8:	782c      	ldrbeq	r4, [r5, #0]
 8007dca:	1c95      	addeq	r5, r2, #2
 8007dcc:	e7cf      	b.n	8007d6e <_strtol_l.constprop.0+0x3a>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1da      	bne.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007dd2:	2c30      	cmp	r4, #48	@ 0x30
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2308      	moveq	r3, #8
 8007dd8:	230a      	movne	r3, #10
 8007dda:	e7d5      	b.n	8007d88 <_strtol_l.constprop.0+0x54>
 8007ddc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007de0:	2f19      	cmp	r7, #25
 8007de2:	d801      	bhi.n	8007de8 <_strtol_l.constprop.0+0xb4>
 8007de4:	3c37      	subs	r4, #55	@ 0x37
 8007de6:	e7de      	b.n	8007da6 <_strtol_l.constprop.0+0x72>
 8007de8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007dec:	2f19      	cmp	r7, #25
 8007dee:	d804      	bhi.n	8007dfa <_strtol_l.constprop.0+0xc6>
 8007df0:	3c57      	subs	r4, #87	@ 0x57
 8007df2:	e7d8      	b.n	8007da6 <_strtol_l.constprop.0+0x72>
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	e7e1      	b.n	8007dbe <_strtol_l.constprop.0+0x8a>
 8007dfa:	1c53      	adds	r3, r2, #1
 8007dfc:	d108      	bne.n	8007e10 <_strtol_l.constprop.0+0xdc>
 8007dfe:	2322      	movs	r3, #34	@ 0x22
 8007e00:	f8ce 3000 	str.w	r3, [lr]
 8007e04:	4660      	mov	r0, ip
 8007e06:	f1b8 0f00 	cmp.w	r8, #0
 8007e0a:	d0a0      	beq.n	8007d4e <_strtol_l.constprop.0+0x1a>
 8007e0c:	1e69      	subs	r1, r5, #1
 8007e0e:	e006      	b.n	8007e1e <_strtol_l.constprop.0+0xea>
 8007e10:	b106      	cbz	r6, 8007e14 <_strtol_l.constprop.0+0xe0>
 8007e12:	4240      	negs	r0, r0
 8007e14:	f1b8 0f00 	cmp.w	r8, #0
 8007e18:	d099      	beq.n	8007d4e <_strtol_l.constprop.0+0x1a>
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d1f6      	bne.n	8007e0c <_strtol_l.constprop.0+0xd8>
 8007e1e:	f8c8 1000 	str.w	r1, [r8]
 8007e22:	e794      	b.n	8007d4e <_strtol_l.constprop.0+0x1a>
 8007e24:	08009961 	.word	0x08009961

08007e28 <_strtol_r>:
 8007e28:	f7ff bf84 	b.w	8007d34 <_strtol_l.constprop.0>

08007e2c <__ssputs_r>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	688e      	ldr	r6, [r1, #8]
 8007e32:	461f      	mov	r7, r3
 8007e34:	42be      	cmp	r6, r7
 8007e36:	680b      	ldr	r3, [r1, #0]
 8007e38:	4682      	mov	sl, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4690      	mov	r8, r2
 8007e3e:	d82d      	bhi.n	8007e9c <__ssputs_r+0x70>
 8007e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e48:	d026      	beq.n	8007e98 <__ssputs_r+0x6c>
 8007e4a:	6965      	ldr	r5, [r4, #20]
 8007e4c:	6909      	ldr	r1, [r1, #16]
 8007e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e52:	eba3 0901 	sub.w	r9, r3, r1
 8007e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e5a:	1c7b      	adds	r3, r7, #1
 8007e5c:	444b      	add	r3, r9
 8007e5e:	106d      	asrs	r5, r5, #1
 8007e60:	429d      	cmp	r5, r3
 8007e62:	bf38      	it	cc
 8007e64:	461d      	movcc	r5, r3
 8007e66:	0553      	lsls	r3, r2, #21
 8007e68:	d527      	bpl.n	8007eba <__ssputs_r+0x8e>
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7fe fc1c 	bl	80066a8 <_malloc_r>
 8007e70:	4606      	mov	r6, r0
 8007e72:	b360      	cbz	r0, 8007ece <__ssputs_r+0xa2>
 8007e74:	6921      	ldr	r1, [r4, #16]
 8007e76:	464a      	mov	r2, r9
 8007e78:	f000 fbee 	bl	8008658 <memcpy>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	6126      	str	r6, [r4, #16]
 8007e8a:	6165      	str	r5, [r4, #20]
 8007e8c:	444e      	add	r6, r9
 8007e8e:	eba5 0509 	sub.w	r5, r5, r9
 8007e92:	6026      	str	r6, [r4, #0]
 8007e94:	60a5      	str	r5, [r4, #8]
 8007e96:	463e      	mov	r6, r7
 8007e98:	42be      	cmp	r6, r7
 8007e9a:	d900      	bls.n	8007e9e <__ssputs_r+0x72>
 8007e9c:	463e      	mov	r6, r7
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	f000 fb9c 	bl	80085e0 <memmove>
 8007ea8:	68a3      	ldr	r3, [r4, #8]
 8007eaa:	1b9b      	subs	r3, r3, r6
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	4433      	add	r3, r6
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	462a      	mov	r2, r5
 8007ebc:	f000 ff61 	bl	8008d82 <_realloc_r>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d1e0      	bne.n	8007e88 <__ssputs_r+0x5c>
 8007ec6:	6921      	ldr	r1, [r4, #16]
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f7fe fb79 	bl	80065c0 <_free_r>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	f8ca 3000 	str.w	r3, [sl]
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e7e9      	b.n	8007eb6 <__ssputs_r+0x8a>
	...

08007ee4 <_svfiprintf_r>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	4698      	mov	r8, r3
 8007eea:	898b      	ldrh	r3, [r1, #12]
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	b09d      	sub	sp, #116	@ 0x74
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	460d      	mov	r5, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	d510      	bpl.n	8007f1a <_svfiprintf_r+0x36>
 8007ef8:	690b      	ldr	r3, [r1, #16]
 8007efa:	b973      	cbnz	r3, 8007f1a <_svfiprintf_r+0x36>
 8007efc:	2140      	movs	r1, #64	@ 0x40
 8007efe:	f7fe fbd3 	bl	80066a8 <_malloc_r>
 8007f02:	6028      	str	r0, [r5, #0]
 8007f04:	6128      	str	r0, [r5, #16]
 8007f06:	b930      	cbnz	r0, 8007f16 <_svfiprintf_r+0x32>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	b01d      	add	sp, #116	@ 0x74
 8007f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f16:	2340      	movs	r3, #64	@ 0x40
 8007f18:	616b      	str	r3, [r5, #20]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1e:	2320      	movs	r3, #32
 8007f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f28:	2330      	movs	r3, #48	@ 0x30
 8007f2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080c8 <_svfiprintf_r+0x1e4>
 8007f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f32:	f04f 0901 	mov.w	r9, #1
 8007f36:	4623      	mov	r3, r4
 8007f38:	469a      	mov	sl, r3
 8007f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3e:	b10a      	cbz	r2, 8007f44 <_svfiprintf_r+0x60>
 8007f40:	2a25      	cmp	r2, #37	@ 0x25
 8007f42:	d1f9      	bne.n	8007f38 <_svfiprintf_r+0x54>
 8007f44:	ebba 0b04 	subs.w	fp, sl, r4
 8007f48:	d00b      	beq.n	8007f62 <_svfiprintf_r+0x7e>
 8007f4a:	465b      	mov	r3, fp
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7ff ff6b 	bl	8007e2c <__ssputs_r>
 8007f56:	3001      	adds	r0, #1
 8007f58:	f000 80a7 	beq.w	80080aa <_svfiprintf_r+0x1c6>
 8007f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f5e:	445a      	add	r2, fp
 8007f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f62:	f89a 3000 	ldrb.w	r3, [sl]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 809f 	beq.w	80080aa <_svfiprintf_r+0x1c6>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f76:	f10a 0a01 	add.w	sl, sl, #1
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f84:	4654      	mov	r4, sl
 8007f86:	2205      	movs	r2, #5
 8007f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8c:	484e      	ldr	r0, [pc, #312]	@ (80080c8 <_svfiprintf_r+0x1e4>)
 8007f8e:	f7f8 f927 	bl	80001e0 <memchr>
 8007f92:	9a04      	ldr	r2, [sp, #16]
 8007f94:	b9d8      	cbnz	r0, 8007fce <_svfiprintf_r+0xea>
 8007f96:	06d0      	lsls	r0, r2, #27
 8007f98:	bf44      	itt	mi
 8007f9a:	2320      	movmi	r3, #32
 8007f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa0:	0711      	lsls	r1, r2, #28
 8007fa2:	bf44      	itt	mi
 8007fa4:	232b      	movmi	r3, #43	@ 0x2b
 8007fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007faa:	f89a 3000 	ldrb.w	r3, [sl]
 8007fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fb0:	d015      	beq.n	8007fde <_svfiprintf_r+0xfa>
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	4654      	mov	r4, sl
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f04f 0c0a 	mov.w	ip, #10
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc2:	3b30      	subs	r3, #48	@ 0x30
 8007fc4:	2b09      	cmp	r3, #9
 8007fc6:	d94b      	bls.n	8008060 <_svfiprintf_r+0x17c>
 8007fc8:	b1b0      	cbz	r0, 8007ff8 <_svfiprintf_r+0x114>
 8007fca:	9207      	str	r2, [sp, #28]
 8007fcc:	e014      	b.n	8007ff8 <_svfiprintf_r+0x114>
 8007fce:	eba0 0308 	sub.w	r3, r0, r8
 8007fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	46a2      	mov	sl, r4
 8007fdc:	e7d2      	b.n	8007f84 <_svfiprintf_r+0xa0>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	9103      	str	r1, [sp, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bfbb      	ittet	lt
 8007fea:	425b      	neglt	r3, r3
 8007fec:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff0:	9307      	strge	r3, [sp, #28]
 8007ff2:	9307      	strlt	r3, [sp, #28]
 8007ff4:	bfb8      	it	lt
 8007ff6:	9204      	strlt	r2, [sp, #16]
 8007ff8:	7823      	ldrb	r3, [r4, #0]
 8007ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ffc:	d10a      	bne.n	8008014 <_svfiprintf_r+0x130>
 8007ffe:	7863      	ldrb	r3, [r4, #1]
 8008000:	2b2a      	cmp	r3, #42	@ 0x2a
 8008002:	d132      	bne.n	800806a <_svfiprintf_r+0x186>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	1d1a      	adds	r2, r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	9203      	str	r2, [sp, #12]
 800800c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008010:	3402      	adds	r4, #2
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080d8 <_svfiprintf_r+0x1f4>
 8008018:	7821      	ldrb	r1, [r4, #0]
 800801a:	2203      	movs	r2, #3
 800801c:	4650      	mov	r0, sl
 800801e:	f7f8 f8df 	bl	80001e0 <memchr>
 8008022:	b138      	cbz	r0, 8008034 <_svfiprintf_r+0x150>
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	eba0 000a 	sub.w	r0, r0, sl
 800802a:	2240      	movs	r2, #64	@ 0x40
 800802c:	4082      	lsls	r2, r0
 800802e:	4313      	orrs	r3, r2
 8008030:	3401      	adds	r4, #1
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	4824      	ldr	r0, [pc, #144]	@ (80080cc <_svfiprintf_r+0x1e8>)
 800803a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800803e:	2206      	movs	r2, #6
 8008040:	f7f8 f8ce 	bl	80001e0 <memchr>
 8008044:	2800      	cmp	r0, #0
 8008046:	d036      	beq.n	80080b6 <_svfiprintf_r+0x1d2>
 8008048:	4b21      	ldr	r3, [pc, #132]	@ (80080d0 <_svfiprintf_r+0x1ec>)
 800804a:	bb1b      	cbnz	r3, 8008094 <_svfiprintf_r+0x1b0>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	3307      	adds	r3, #7
 8008050:	f023 0307 	bic.w	r3, r3, #7
 8008054:	3308      	adds	r3, #8
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805a:	4433      	add	r3, r6
 800805c:	9309      	str	r3, [sp, #36]	@ 0x24
 800805e:	e76a      	b.n	8007f36 <_svfiprintf_r+0x52>
 8008060:	fb0c 3202 	mla	r2, ip, r2, r3
 8008064:	460c      	mov	r4, r1
 8008066:	2001      	movs	r0, #1
 8008068:	e7a8      	b.n	8007fbc <_svfiprintf_r+0xd8>
 800806a:	2300      	movs	r3, #0
 800806c:	3401      	adds	r4, #1
 800806e:	9305      	str	r3, [sp, #20]
 8008070:	4619      	mov	r1, r3
 8008072:	f04f 0c0a 	mov.w	ip, #10
 8008076:	4620      	mov	r0, r4
 8008078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807c:	3a30      	subs	r2, #48	@ 0x30
 800807e:	2a09      	cmp	r2, #9
 8008080:	d903      	bls.n	800808a <_svfiprintf_r+0x1a6>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0c6      	beq.n	8008014 <_svfiprintf_r+0x130>
 8008086:	9105      	str	r1, [sp, #20]
 8008088:	e7c4      	b.n	8008014 <_svfiprintf_r+0x130>
 800808a:	fb0c 2101 	mla	r1, ip, r1, r2
 800808e:	4604      	mov	r4, r0
 8008090:	2301      	movs	r3, #1
 8008092:	e7f0      	b.n	8008076 <_svfiprintf_r+0x192>
 8008094:	ab03      	add	r3, sp, #12
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	462a      	mov	r2, r5
 800809a:	4b0e      	ldr	r3, [pc, #56]	@ (80080d4 <_svfiprintf_r+0x1f0>)
 800809c:	a904      	add	r1, sp, #16
 800809e:	4638      	mov	r0, r7
 80080a0:	f7fc fcb6 	bl	8004a10 <_printf_float>
 80080a4:	1c42      	adds	r2, r0, #1
 80080a6:	4606      	mov	r6, r0
 80080a8:	d1d6      	bne.n	8008058 <_svfiprintf_r+0x174>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	065b      	lsls	r3, r3, #25
 80080ae:	f53f af2d 	bmi.w	8007f0c <_svfiprintf_r+0x28>
 80080b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080b4:	e72c      	b.n	8007f10 <_svfiprintf_r+0x2c>
 80080b6:	ab03      	add	r3, sp, #12
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	462a      	mov	r2, r5
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <_svfiprintf_r+0x1f0>)
 80080be:	a904      	add	r1, sp, #16
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7fc ff3d 	bl	8004f40 <_printf_i>
 80080c6:	e7ed      	b.n	80080a4 <_svfiprintf_r+0x1c0>
 80080c8:	08009a61 	.word	0x08009a61
 80080cc:	08009a6b 	.word	0x08009a6b
 80080d0:	08004a11 	.word	0x08004a11
 80080d4:	08007e2d 	.word	0x08007e2d
 80080d8:	08009a67 	.word	0x08009a67

080080dc <__sfputc_r>:
 80080dc:	6893      	ldr	r3, [r2, #8]
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	b410      	push	{r4}
 80080e4:	6093      	str	r3, [r2, #8]
 80080e6:	da08      	bge.n	80080fa <__sfputc_r+0x1e>
 80080e8:	6994      	ldr	r4, [r2, #24]
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	db01      	blt.n	80080f2 <__sfputc_r+0x16>
 80080ee:	290a      	cmp	r1, #10
 80080f0:	d103      	bne.n	80080fa <__sfputc_r+0x1e>
 80080f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f6:	f000 b9df 	b.w	80084b8 <__swbuf_r>
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	1c58      	adds	r0, r3, #1
 80080fe:	6010      	str	r0, [r2, #0]
 8008100:	7019      	strb	r1, [r3, #0]
 8008102:	4608      	mov	r0, r1
 8008104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008108:	4770      	bx	lr

0800810a <__sfputs_r>:
 800810a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810c:	4606      	mov	r6, r0
 800810e:	460f      	mov	r7, r1
 8008110:	4614      	mov	r4, r2
 8008112:	18d5      	adds	r5, r2, r3
 8008114:	42ac      	cmp	r4, r5
 8008116:	d101      	bne.n	800811c <__sfputs_r+0x12>
 8008118:	2000      	movs	r0, #0
 800811a:	e007      	b.n	800812c <__sfputs_r+0x22>
 800811c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008120:	463a      	mov	r2, r7
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff ffda 	bl	80080dc <__sfputc_r>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d1f3      	bne.n	8008114 <__sfputs_r+0xa>
 800812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008130 <_vfiprintf_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	460d      	mov	r5, r1
 8008136:	b09d      	sub	sp, #116	@ 0x74
 8008138:	4614      	mov	r4, r2
 800813a:	4698      	mov	r8, r3
 800813c:	4606      	mov	r6, r0
 800813e:	b118      	cbz	r0, 8008148 <_vfiprintf_r+0x18>
 8008140:	6a03      	ldr	r3, [r0, #32]
 8008142:	b90b      	cbnz	r3, 8008148 <_vfiprintf_r+0x18>
 8008144:	f7fd fabc 	bl	80056c0 <__sinit>
 8008148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	d405      	bmi.n	800815a <_vfiprintf_r+0x2a>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	059a      	lsls	r2, r3, #22
 8008152:	d402      	bmi.n	800815a <_vfiprintf_r+0x2a>
 8008154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008156:	f7fd fbdc 	bl	8005912 <__retarget_lock_acquire_recursive>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	071b      	lsls	r3, r3, #28
 800815e:	d501      	bpl.n	8008164 <_vfiprintf_r+0x34>
 8008160:	692b      	ldr	r3, [r5, #16]
 8008162:	b99b      	cbnz	r3, 800818c <_vfiprintf_r+0x5c>
 8008164:	4629      	mov	r1, r5
 8008166:	4630      	mov	r0, r6
 8008168:	f000 f9e4 	bl	8008534 <__swsetup_r>
 800816c:	b170      	cbz	r0, 800818c <_vfiprintf_r+0x5c>
 800816e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008170:	07dc      	lsls	r4, r3, #31
 8008172:	d504      	bpl.n	800817e <_vfiprintf_r+0x4e>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	@ 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	0598      	lsls	r0, r3, #22
 8008182:	d4f7      	bmi.n	8008174 <_vfiprintf_r+0x44>
 8008184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008186:	f7fd fbc5 	bl	8005914 <__retarget_lock_release_recursive>
 800818a:	e7f3      	b.n	8008174 <_vfiprintf_r+0x44>
 800818c:	2300      	movs	r3, #0
 800818e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008190:	2320      	movs	r3, #32
 8008192:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008196:	f8cd 800c 	str.w	r8, [sp, #12]
 800819a:	2330      	movs	r3, #48	@ 0x30
 800819c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800834c <_vfiprintf_r+0x21c>
 80081a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081a4:	f04f 0901 	mov.w	r9, #1
 80081a8:	4623      	mov	r3, r4
 80081aa:	469a      	mov	sl, r3
 80081ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b0:	b10a      	cbz	r2, 80081b6 <_vfiprintf_r+0x86>
 80081b2:	2a25      	cmp	r2, #37	@ 0x25
 80081b4:	d1f9      	bne.n	80081aa <_vfiprintf_r+0x7a>
 80081b6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ba:	d00b      	beq.n	80081d4 <_vfiprintf_r+0xa4>
 80081bc:	465b      	mov	r3, fp
 80081be:	4622      	mov	r2, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ffa1 	bl	800810a <__sfputs_r>
 80081c8:	3001      	adds	r0, #1
 80081ca:	f000 80a7 	beq.w	800831c <_vfiprintf_r+0x1ec>
 80081ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d0:	445a      	add	r2, fp
 80081d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80081d4:	f89a 3000 	ldrb.w	r3, [sl]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 809f 	beq.w	800831c <_vfiprintf_r+0x1ec>
 80081de:	2300      	movs	r3, #0
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295
 80081e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e8:	f10a 0a01 	add.w	sl, sl, #1
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80081f6:	4654      	mov	r4, sl
 80081f8:	2205      	movs	r2, #5
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	4853      	ldr	r0, [pc, #332]	@ (800834c <_vfiprintf_r+0x21c>)
 8008200:	f7f7 ffee 	bl	80001e0 <memchr>
 8008204:	9a04      	ldr	r2, [sp, #16]
 8008206:	b9d8      	cbnz	r0, 8008240 <_vfiprintf_r+0x110>
 8008208:	06d1      	lsls	r1, r2, #27
 800820a:	bf44      	itt	mi
 800820c:	2320      	movmi	r3, #32
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008212:	0713      	lsls	r3, r2, #28
 8008214:	bf44      	itt	mi
 8008216:	232b      	movmi	r3, #43	@ 0x2b
 8008218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800821c:	f89a 3000 	ldrb.w	r3, [sl]
 8008220:	2b2a      	cmp	r3, #42	@ 0x2a
 8008222:	d015      	beq.n	8008250 <_vfiprintf_r+0x120>
 8008224:	9a07      	ldr	r2, [sp, #28]
 8008226:	4654      	mov	r4, sl
 8008228:	2000      	movs	r0, #0
 800822a:	f04f 0c0a 	mov.w	ip, #10
 800822e:	4621      	mov	r1, r4
 8008230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008234:	3b30      	subs	r3, #48	@ 0x30
 8008236:	2b09      	cmp	r3, #9
 8008238:	d94b      	bls.n	80082d2 <_vfiprintf_r+0x1a2>
 800823a:	b1b0      	cbz	r0, 800826a <_vfiprintf_r+0x13a>
 800823c:	9207      	str	r2, [sp, #28]
 800823e:	e014      	b.n	800826a <_vfiprintf_r+0x13a>
 8008240:	eba0 0308 	sub.w	r3, r0, r8
 8008244:	fa09 f303 	lsl.w	r3, r9, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	46a2      	mov	sl, r4
 800824e:	e7d2      	b.n	80081f6 <_vfiprintf_r+0xc6>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	1d19      	adds	r1, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	9103      	str	r1, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfbb      	ittet	lt
 800825c:	425b      	neglt	r3, r3
 800825e:	f042 0202 	orrlt.w	r2, r2, #2
 8008262:	9307      	strge	r3, [sp, #28]
 8008264:	9307      	strlt	r3, [sp, #28]
 8008266:	bfb8      	it	lt
 8008268:	9204      	strlt	r2, [sp, #16]
 800826a:	7823      	ldrb	r3, [r4, #0]
 800826c:	2b2e      	cmp	r3, #46	@ 0x2e
 800826e:	d10a      	bne.n	8008286 <_vfiprintf_r+0x156>
 8008270:	7863      	ldrb	r3, [r4, #1]
 8008272:	2b2a      	cmp	r3, #42	@ 0x2a
 8008274:	d132      	bne.n	80082dc <_vfiprintf_r+0x1ac>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	1d1a      	adds	r2, r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	9203      	str	r2, [sp, #12]
 800827e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008282:	3402      	adds	r4, #2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800835c <_vfiprintf_r+0x22c>
 800828a:	7821      	ldrb	r1, [r4, #0]
 800828c:	2203      	movs	r2, #3
 800828e:	4650      	mov	r0, sl
 8008290:	f7f7 ffa6 	bl	80001e0 <memchr>
 8008294:	b138      	cbz	r0, 80082a6 <_vfiprintf_r+0x176>
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	eba0 000a 	sub.w	r0, r0, sl
 800829c:	2240      	movs	r2, #64	@ 0x40
 800829e:	4082      	lsls	r2, r0
 80082a0:	4313      	orrs	r3, r2
 80082a2:	3401      	adds	r4, #1
 80082a4:	9304      	str	r3, [sp, #16]
 80082a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082aa:	4829      	ldr	r0, [pc, #164]	@ (8008350 <_vfiprintf_r+0x220>)
 80082ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082b0:	2206      	movs	r2, #6
 80082b2:	f7f7 ff95 	bl	80001e0 <memchr>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d03f      	beq.n	800833a <_vfiprintf_r+0x20a>
 80082ba:	4b26      	ldr	r3, [pc, #152]	@ (8008354 <_vfiprintf_r+0x224>)
 80082bc:	bb1b      	cbnz	r3, 8008306 <_vfiprintf_r+0x1d6>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	3307      	adds	r3, #7
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	3308      	adds	r3, #8
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082cc:	443b      	add	r3, r7
 80082ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d0:	e76a      	b.n	80081a8 <_vfiprintf_r+0x78>
 80082d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d6:	460c      	mov	r4, r1
 80082d8:	2001      	movs	r0, #1
 80082da:	e7a8      	b.n	800822e <_vfiprintf_r+0xfe>
 80082dc:	2300      	movs	r3, #0
 80082de:	3401      	adds	r4, #1
 80082e0:	9305      	str	r3, [sp, #20]
 80082e2:	4619      	mov	r1, r3
 80082e4:	f04f 0c0a 	mov.w	ip, #10
 80082e8:	4620      	mov	r0, r4
 80082ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ee:	3a30      	subs	r2, #48	@ 0x30
 80082f0:	2a09      	cmp	r2, #9
 80082f2:	d903      	bls.n	80082fc <_vfiprintf_r+0x1cc>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0c6      	beq.n	8008286 <_vfiprintf_r+0x156>
 80082f8:	9105      	str	r1, [sp, #20]
 80082fa:	e7c4      	b.n	8008286 <_vfiprintf_r+0x156>
 80082fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008300:	4604      	mov	r4, r0
 8008302:	2301      	movs	r3, #1
 8008304:	e7f0      	b.n	80082e8 <_vfiprintf_r+0x1b8>
 8008306:	ab03      	add	r3, sp, #12
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	462a      	mov	r2, r5
 800830c:	4b12      	ldr	r3, [pc, #72]	@ (8008358 <_vfiprintf_r+0x228>)
 800830e:	a904      	add	r1, sp, #16
 8008310:	4630      	mov	r0, r6
 8008312:	f7fc fb7d 	bl	8004a10 <_printf_float>
 8008316:	4607      	mov	r7, r0
 8008318:	1c78      	adds	r0, r7, #1
 800831a:	d1d6      	bne.n	80082ca <_vfiprintf_r+0x19a>
 800831c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800831e:	07d9      	lsls	r1, r3, #31
 8008320:	d405      	bmi.n	800832e <_vfiprintf_r+0x1fe>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	059a      	lsls	r2, r3, #22
 8008326:	d402      	bmi.n	800832e <_vfiprintf_r+0x1fe>
 8008328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800832a:	f7fd faf3 	bl	8005914 <__retarget_lock_release_recursive>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	065b      	lsls	r3, r3, #25
 8008332:	f53f af1f 	bmi.w	8008174 <_vfiprintf_r+0x44>
 8008336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008338:	e71e      	b.n	8008178 <_vfiprintf_r+0x48>
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	462a      	mov	r2, r5
 8008340:	4b05      	ldr	r3, [pc, #20]	@ (8008358 <_vfiprintf_r+0x228>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	4630      	mov	r0, r6
 8008346:	f7fc fdfb 	bl	8004f40 <_printf_i>
 800834a:	e7e4      	b.n	8008316 <_vfiprintf_r+0x1e6>
 800834c:	08009a61 	.word	0x08009a61
 8008350:	08009a6b 	.word	0x08009a6b
 8008354:	08004a11 	.word	0x08004a11
 8008358:	0800810b 	.word	0x0800810b
 800835c:	08009a67 	.word	0x08009a67

08008360 <__sflush_r>:
 8008360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008368:	0716      	lsls	r6, r2, #28
 800836a:	4605      	mov	r5, r0
 800836c:	460c      	mov	r4, r1
 800836e:	d454      	bmi.n	800841a <__sflush_r+0xba>
 8008370:	684b      	ldr	r3, [r1, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	dc02      	bgt.n	800837c <__sflush_r+0x1c>
 8008376:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	dd48      	ble.n	800840e <__sflush_r+0xae>
 800837c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800837e:	2e00      	cmp	r6, #0
 8008380:	d045      	beq.n	800840e <__sflush_r+0xae>
 8008382:	2300      	movs	r3, #0
 8008384:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008388:	682f      	ldr	r7, [r5, #0]
 800838a:	6a21      	ldr	r1, [r4, #32]
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	d030      	beq.n	80083f2 <__sflush_r+0x92>
 8008390:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	0759      	lsls	r1, r3, #29
 8008396:	d505      	bpl.n	80083a4 <__sflush_r+0x44>
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800839e:	b10b      	cbz	r3, 80083a4 <__sflush_r+0x44>
 80083a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083a8:	6a21      	ldr	r1, [r4, #32]
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b0      	blx	r6
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	d106      	bne.n	80083c2 <__sflush_r+0x62>
 80083b4:	6829      	ldr	r1, [r5, #0]
 80083b6:	291d      	cmp	r1, #29
 80083b8:	d82b      	bhi.n	8008412 <__sflush_r+0xb2>
 80083ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008464 <__sflush_r+0x104>)
 80083bc:	410a      	asrs	r2, r1
 80083be:	07d6      	lsls	r6, r2, #31
 80083c0:	d427      	bmi.n	8008412 <__sflush_r+0xb2>
 80083c2:	2200      	movs	r2, #0
 80083c4:	6062      	str	r2, [r4, #4]
 80083c6:	04d9      	lsls	r1, r3, #19
 80083c8:	6922      	ldr	r2, [r4, #16]
 80083ca:	6022      	str	r2, [r4, #0]
 80083cc:	d504      	bpl.n	80083d8 <__sflush_r+0x78>
 80083ce:	1c42      	adds	r2, r0, #1
 80083d0:	d101      	bne.n	80083d6 <__sflush_r+0x76>
 80083d2:	682b      	ldr	r3, [r5, #0]
 80083d4:	b903      	cbnz	r3, 80083d8 <__sflush_r+0x78>
 80083d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80083d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083da:	602f      	str	r7, [r5, #0]
 80083dc:	b1b9      	cbz	r1, 800840e <__sflush_r+0xae>
 80083de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e2:	4299      	cmp	r1, r3
 80083e4:	d002      	beq.n	80083ec <__sflush_r+0x8c>
 80083e6:	4628      	mov	r0, r5
 80083e8:	f7fe f8ea 	bl	80065c0 <_free_r>
 80083ec:	2300      	movs	r3, #0
 80083ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f0:	e00d      	b.n	800840e <__sflush_r+0xae>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b0      	blx	r6
 80083f8:	4602      	mov	r2, r0
 80083fa:	1c50      	adds	r0, r2, #1
 80083fc:	d1c9      	bne.n	8008392 <__sflush_r+0x32>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0c6      	beq.n	8008392 <__sflush_r+0x32>
 8008404:	2b1d      	cmp	r3, #29
 8008406:	d001      	beq.n	800840c <__sflush_r+0xac>
 8008408:	2b16      	cmp	r3, #22
 800840a:	d11e      	bne.n	800844a <__sflush_r+0xea>
 800840c:	602f      	str	r7, [r5, #0]
 800840e:	2000      	movs	r0, #0
 8008410:	e022      	b.n	8008458 <__sflush_r+0xf8>
 8008412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008416:	b21b      	sxth	r3, r3
 8008418:	e01b      	b.n	8008452 <__sflush_r+0xf2>
 800841a:	690f      	ldr	r7, [r1, #16]
 800841c:	2f00      	cmp	r7, #0
 800841e:	d0f6      	beq.n	800840e <__sflush_r+0xae>
 8008420:	0793      	lsls	r3, r2, #30
 8008422:	680e      	ldr	r6, [r1, #0]
 8008424:	bf08      	it	eq
 8008426:	694b      	ldreq	r3, [r1, #20]
 8008428:	600f      	str	r7, [r1, #0]
 800842a:	bf18      	it	ne
 800842c:	2300      	movne	r3, #0
 800842e:	eba6 0807 	sub.w	r8, r6, r7
 8008432:	608b      	str	r3, [r1, #8]
 8008434:	f1b8 0f00 	cmp.w	r8, #0
 8008438:	dde9      	ble.n	800840e <__sflush_r+0xae>
 800843a:	6a21      	ldr	r1, [r4, #32]
 800843c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800843e:	4643      	mov	r3, r8
 8008440:	463a      	mov	r2, r7
 8008442:	4628      	mov	r0, r5
 8008444:	47b0      	blx	r6
 8008446:	2800      	cmp	r0, #0
 8008448:	dc08      	bgt.n	800845c <__sflush_r+0xfc>
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800845c:	4407      	add	r7, r0
 800845e:	eba8 0800 	sub.w	r8, r8, r0
 8008462:	e7e7      	b.n	8008434 <__sflush_r+0xd4>
 8008464:	dfbffffe 	.word	0xdfbffffe

08008468 <_fflush_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	690b      	ldr	r3, [r1, #16]
 800846c:	4605      	mov	r5, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b913      	cbnz	r3, 8008478 <_fflush_r+0x10>
 8008472:	2500      	movs	r5, #0
 8008474:	4628      	mov	r0, r5
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	b118      	cbz	r0, 8008482 <_fflush_r+0x1a>
 800847a:	6a03      	ldr	r3, [r0, #32]
 800847c:	b90b      	cbnz	r3, 8008482 <_fflush_r+0x1a>
 800847e:	f7fd f91f 	bl	80056c0 <__sinit>
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f3      	beq.n	8008472 <_fflush_r+0xa>
 800848a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800848c:	07d0      	lsls	r0, r2, #31
 800848e:	d404      	bmi.n	800849a <_fflush_r+0x32>
 8008490:	0599      	lsls	r1, r3, #22
 8008492:	d402      	bmi.n	800849a <_fflush_r+0x32>
 8008494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008496:	f7fd fa3c 	bl	8005912 <__retarget_lock_acquire_recursive>
 800849a:	4628      	mov	r0, r5
 800849c:	4621      	mov	r1, r4
 800849e:	f7ff ff5f 	bl	8008360 <__sflush_r>
 80084a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084a4:	07da      	lsls	r2, r3, #31
 80084a6:	4605      	mov	r5, r0
 80084a8:	d4e4      	bmi.n	8008474 <_fflush_r+0xc>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	059b      	lsls	r3, r3, #22
 80084ae:	d4e1      	bmi.n	8008474 <_fflush_r+0xc>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7fd fa2f 	bl	8005914 <__retarget_lock_release_recursive>
 80084b6:	e7dd      	b.n	8008474 <_fflush_r+0xc>

080084b8 <__swbuf_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	460e      	mov	r6, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	4605      	mov	r5, r0
 80084c0:	b118      	cbz	r0, 80084ca <__swbuf_r+0x12>
 80084c2:	6a03      	ldr	r3, [r0, #32]
 80084c4:	b90b      	cbnz	r3, 80084ca <__swbuf_r+0x12>
 80084c6:	f7fd f8fb 	bl	80056c0 <__sinit>
 80084ca:	69a3      	ldr	r3, [r4, #24]
 80084cc:	60a3      	str	r3, [r4, #8]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	071a      	lsls	r2, r3, #28
 80084d2:	d501      	bpl.n	80084d8 <__swbuf_r+0x20>
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	b943      	cbnz	r3, 80084ea <__swbuf_r+0x32>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 f82a 	bl	8008534 <__swsetup_r>
 80084e0:	b118      	cbz	r0, 80084ea <__swbuf_r+0x32>
 80084e2:	f04f 37ff 	mov.w	r7, #4294967295
 80084e6:	4638      	mov	r0, r7
 80084e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	6922      	ldr	r2, [r4, #16]
 80084ee:	1a98      	subs	r0, r3, r2
 80084f0:	6963      	ldr	r3, [r4, #20]
 80084f2:	b2f6      	uxtb	r6, r6
 80084f4:	4283      	cmp	r3, r0
 80084f6:	4637      	mov	r7, r6
 80084f8:	dc05      	bgt.n	8008506 <__swbuf_r+0x4e>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7ff ffb3 	bl	8008468 <_fflush_r>
 8008502:	2800      	cmp	r0, #0
 8008504:	d1ed      	bne.n	80084e2 <__swbuf_r+0x2a>
 8008506:	68a3      	ldr	r3, [r4, #8]
 8008508:	3b01      	subs	r3, #1
 800850a:	60a3      	str	r3, [r4, #8]
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	701e      	strb	r6, [r3, #0]
 8008514:	6962      	ldr	r2, [r4, #20]
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	429a      	cmp	r2, r3
 800851a:	d004      	beq.n	8008526 <__swbuf_r+0x6e>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d5e1      	bpl.n	80084e6 <__swbuf_r+0x2e>
 8008522:	2e0a      	cmp	r6, #10
 8008524:	d1df      	bne.n	80084e6 <__swbuf_r+0x2e>
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f7ff ff9d 	bl	8008468 <_fflush_r>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0d9      	beq.n	80084e6 <__swbuf_r+0x2e>
 8008532:	e7d6      	b.n	80084e2 <__swbuf_r+0x2a>

08008534 <__swsetup_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4b29      	ldr	r3, [pc, #164]	@ (80085dc <__swsetup_r+0xa8>)
 8008538:	4605      	mov	r5, r0
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	460c      	mov	r4, r1
 800853e:	b118      	cbz	r0, 8008548 <__swsetup_r+0x14>
 8008540:	6a03      	ldr	r3, [r0, #32]
 8008542:	b90b      	cbnz	r3, 8008548 <__swsetup_r+0x14>
 8008544:	f7fd f8bc 	bl	80056c0 <__sinit>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	0719      	lsls	r1, r3, #28
 800854e:	d422      	bmi.n	8008596 <__swsetup_r+0x62>
 8008550:	06da      	lsls	r2, r3, #27
 8008552:	d407      	bmi.n	8008564 <__swsetup_r+0x30>
 8008554:	2209      	movs	r2, #9
 8008556:	602a      	str	r2, [r5, #0]
 8008558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	f04f 30ff 	mov.w	r0, #4294967295
 8008562:	e033      	b.n	80085cc <__swsetup_r+0x98>
 8008564:	0758      	lsls	r0, r3, #29
 8008566:	d512      	bpl.n	800858e <__swsetup_r+0x5a>
 8008568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800856a:	b141      	cbz	r1, 800857e <__swsetup_r+0x4a>
 800856c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <__swsetup_r+0x46>
 8008574:	4628      	mov	r0, r5
 8008576:	f7fe f823 	bl	80065c0 <_free_r>
 800857a:	2300      	movs	r3, #0
 800857c:	6363      	str	r3, [r4, #52]	@ 0x34
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	2300      	movs	r3, #0
 8008588:	6063      	str	r3, [r4, #4]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f043 0308 	orr.w	r3, r3, #8
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	b94b      	cbnz	r3, 80085ae <__swsetup_r+0x7a>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a4:	d003      	beq.n	80085ae <__swsetup_r+0x7a>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 fc5d 	bl	8008e68 <__smakebuf_r>
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	f013 0201 	ands.w	r2, r3, #1
 80085b6:	d00a      	beq.n	80085ce <__swsetup_r+0x9a>
 80085b8:	2200      	movs	r2, #0
 80085ba:	60a2      	str	r2, [r4, #8]
 80085bc:	6962      	ldr	r2, [r4, #20]
 80085be:	4252      	negs	r2, r2
 80085c0:	61a2      	str	r2, [r4, #24]
 80085c2:	6922      	ldr	r2, [r4, #16]
 80085c4:	b942      	cbnz	r2, 80085d8 <__swsetup_r+0xa4>
 80085c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085ca:	d1c5      	bne.n	8008558 <__swsetup_r+0x24>
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	0799      	lsls	r1, r3, #30
 80085d0:	bf58      	it	pl
 80085d2:	6962      	ldrpl	r2, [r4, #20]
 80085d4:	60a2      	str	r2, [r4, #8]
 80085d6:	e7f4      	b.n	80085c2 <__swsetup_r+0x8e>
 80085d8:	2000      	movs	r0, #0
 80085da:	e7f7      	b.n	80085cc <__swsetup_r+0x98>
 80085dc:	20000018 	.word	0x20000018

080085e0 <memmove>:
 80085e0:	4288      	cmp	r0, r1
 80085e2:	b510      	push	{r4, lr}
 80085e4:	eb01 0402 	add.w	r4, r1, r2
 80085e8:	d902      	bls.n	80085f0 <memmove+0x10>
 80085ea:	4284      	cmp	r4, r0
 80085ec:	4623      	mov	r3, r4
 80085ee:	d807      	bhi.n	8008600 <memmove+0x20>
 80085f0:	1e43      	subs	r3, r0, #1
 80085f2:	42a1      	cmp	r1, r4
 80085f4:	d008      	beq.n	8008608 <memmove+0x28>
 80085f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085fe:	e7f8      	b.n	80085f2 <memmove+0x12>
 8008600:	4402      	add	r2, r0
 8008602:	4601      	mov	r1, r0
 8008604:	428a      	cmp	r2, r1
 8008606:	d100      	bne.n	800860a <memmove+0x2a>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800860e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008612:	e7f7      	b.n	8008604 <memmove+0x24>

08008614 <strncmp>:
 8008614:	b510      	push	{r4, lr}
 8008616:	b16a      	cbz	r2, 8008634 <strncmp+0x20>
 8008618:	3901      	subs	r1, #1
 800861a:	1884      	adds	r4, r0, r2
 800861c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008620:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008624:	429a      	cmp	r2, r3
 8008626:	d103      	bne.n	8008630 <strncmp+0x1c>
 8008628:	42a0      	cmp	r0, r4
 800862a:	d001      	beq.n	8008630 <strncmp+0x1c>
 800862c:	2a00      	cmp	r2, #0
 800862e:	d1f5      	bne.n	800861c <strncmp+0x8>
 8008630:	1ad0      	subs	r0, r2, r3
 8008632:	bd10      	pop	{r4, pc}
 8008634:	4610      	mov	r0, r2
 8008636:	e7fc      	b.n	8008632 <strncmp+0x1e>

08008638 <_sbrk_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	@ (8008654 <_sbrk_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7f9 fc7e 	bl	8001f44 <_sbrk>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_sbrk_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_sbrk_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20000850 	.word	0x20000850

08008658 <memcpy>:
 8008658:	440a      	add	r2, r1
 800865a:	4291      	cmp	r1, r2
 800865c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008660:	d100      	bne.n	8008664 <memcpy+0xc>
 8008662:	4770      	bx	lr
 8008664:	b510      	push	{r4, lr}
 8008666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866e:	4291      	cmp	r1, r2
 8008670:	d1f9      	bne.n	8008666 <memcpy+0xe>
 8008672:	bd10      	pop	{r4, pc}
 8008674:	0000      	movs	r0, r0
	...

08008678 <nan>:
 8008678:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008680 <nan+0x8>
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	00000000 	.word	0x00000000
 8008684:	7ff80000 	.word	0x7ff80000

08008688 <__assert_func>:
 8008688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800868a:	4614      	mov	r4, r2
 800868c:	461a      	mov	r2, r3
 800868e:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <__assert_func+0x2c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4605      	mov	r5, r0
 8008694:	68d8      	ldr	r0, [r3, #12]
 8008696:	b954      	cbnz	r4, 80086ae <__assert_func+0x26>
 8008698:	4b07      	ldr	r3, [pc, #28]	@ (80086b8 <__assert_func+0x30>)
 800869a:	461c      	mov	r4, r3
 800869c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086a0:	9100      	str	r1, [sp, #0]
 80086a2:	462b      	mov	r3, r5
 80086a4:	4905      	ldr	r1, [pc, #20]	@ (80086bc <__assert_func+0x34>)
 80086a6:	f000 fba7 	bl	8008df8 <fiprintf>
 80086aa:	f000 fc3b 	bl	8008f24 <abort>
 80086ae:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <__assert_func+0x38>)
 80086b0:	e7f4      	b.n	800869c <__assert_func+0x14>
 80086b2:	bf00      	nop
 80086b4:	20000018 	.word	0x20000018
 80086b8:	08009ab5 	.word	0x08009ab5
 80086bc:	08009a87 	.word	0x08009a87
 80086c0:	08009a7a 	.word	0x08009a7a

080086c4 <_calloc_r>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	fba1 5402 	umull	r5, r4, r1, r2
 80086ca:	b93c      	cbnz	r4, 80086dc <_calloc_r+0x18>
 80086cc:	4629      	mov	r1, r5
 80086ce:	f7fd ffeb 	bl	80066a8 <_malloc_r>
 80086d2:	4606      	mov	r6, r0
 80086d4:	b928      	cbnz	r0, 80086e2 <_calloc_r+0x1e>
 80086d6:	2600      	movs	r6, #0
 80086d8:	4630      	mov	r0, r6
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	220c      	movs	r2, #12
 80086de:	6002      	str	r2, [r0, #0]
 80086e0:	e7f9      	b.n	80086d6 <_calloc_r+0x12>
 80086e2:	462a      	mov	r2, r5
 80086e4:	4621      	mov	r1, r4
 80086e6:	f7fd f896 	bl	8005816 <memset>
 80086ea:	e7f5      	b.n	80086d8 <_calloc_r+0x14>

080086ec <rshift>:
 80086ec:	6903      	ldr	r3, [r0, #16]
 80086ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086fa:	f100 0414 	add.w	r4, r0, #20
 80086fe:	dd45      	ble.n	800878c <rshift+0xa0>
 8008700:	f011 011f 	ands.w	r1, r1, #31
 8008704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800870c:	d10c      	bne.n	8008728 <rshift+0x3c>
 800870e:	f100 0710 	add.w	r7, r0, #16
 8008712:	4629      	mov	r1, r5
 8008714:	42b1      	cmp	r1, r6
 8008716:	d334      	bcc.n	8008782 <rshift+0x96>
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	1eea      	subs	r2, r5, #3
 800871e:	4296      	cmp	r6, r2
 8008720:	bf38      	it	cc
 8008722:	2300      	movcc	r3, #0
 8008724:	4423      	add	r3, r4
 8008726:	e015      	b.n	8008754 <rshift+0x68>
 8008728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800872c:	f1c1 0820 	rsb	r8, r1, #32
 8008730:	40cf      	lsrs	r7, r1
 8008732:	f105 0e04 	add.w	lr, r5, #4
 8008736:	46a1      	mov	r9, r4
 8008738:	4576      	cmp	r6, lr
 800873a:	46f4      	mov	ip, lr
 800873c:	d815      	bhi.n	800876a <rshift+0x7e>
 800873e:	1a9a      	subs	r2, r3, r2
 8008740:	0092      	lsls	r2, r2, #2
 8008742:	3a04      	subs	r2, #4
 8008744:	3501      	adds	r5, #1
 8008746:	42ae      	cmp	r6, r5
 8008748:	bf38      	it	cc
 800874a:	2200      	movcc	r2, #0
 800874c:	18a3      	adds	r3, r4, r2
 800874e:	50a7      	str	r7, [r4, r2]
 8008750:	b107      	cbz	r7, 8008754 <rshift+0x68>
 8008752:	3304      	adds	r3, #4
 8008754:	1b1a      	subs	r2, r3, r4
 8008756:	42a3      	cmp	r3, r4
 8008758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800875c:	bf08      	it	eq
 800875e:	2300      	moveq	r3, #0
 8008760:	6102      	str	r2, [r0, #16]
 8008762:	bf08      	it	eq
 8008764:	6143      	streq	r3, [r0, #20]
 8008766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800876a:	f8dc c000 	ldr.w	ip, [ip]
 800876e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008772:	ea4c 0707 	orr.w	r7, ip, r7
 8008776:	f849 7b04 	str.w	r7, [r9], #4
 800877a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800877e:	40cf      	lsrs	r7, r1
 8008780:	e7da      	b.n	8008738 <rshift+0x4c>
 8008782:	f851 cb04 	ldr.w	ip, [r1], #4
 8008786:	f847 cf04 	str.w	ip, [r7, #4]!
 800878a:	e7c3      	b.n	8008714 <rshift+0x28>
 800878c:	4623      	mov	r3, r4
 800878e:	e7e1      	b.n	8008754 <rshift+0x68>

08008790 <__hexdig_fun>:
 8008790:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008794:	2b09      	cmp	r3, #9
 8008796:	d802      	bhi.n	800879e <__hexdig_fun+0xe>
 8008798:	3820      	subs	r0, #32
 800879a:	b2c0      	uxtb	r0, r0
 800879c:	4770      	bx	lr
 800879e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d801      	bhi.n	80087aa <__hexdig_fun+0x1a>
 80087a6:	3847      	subs	r0, #71	@ 0x47
 80087a8:	e7f7      	b.n	800879a <__hexdig_fun+0xa>
 80087aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d801      	bhi.n	80087b6 <__hexdig_fun+0x26>
 80087b2:	3827      	subs	r0, #39	@ 0x27
 80087b4:	e7f1      	b.n	800879a <__hexdig_fun+0xa>
 80087b6:	2000      	movs	r0, #0
 80087b8:	4770      	bx	lr
	...

080087bc <__gethex>:
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	b085      	sub	sp, #20
 80087c2:	468a      	mov	sl, r1
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	680b      	ldr	r3, [r1, #0]
 80087c8:	9001      	str	r0, [sp, #4]
 80087ca:	4690      	mov	r8, r2
 80087cc:	1c9c      	adds	r4, r3, #2
 80087ce:	46a1      	mov	r9, r4
 80087d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80087d4:	2830      	cmp	r0, #48	@ 0x30
 80087d6:	d0fa      	beq.n	80087ce <__gethex+0x12>
 80087d8:	eba9 0303 	sub.w	r3, r9, r3
 80087dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80087e0:	f7ff ffd6 	bl	8008790 <__hexdig_fun>
 80087e4:	4605      	mov	r5, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d168      	bne.n	80088bc <__gethex+0x100>
 80087ea:	49a0      	ldr	r1, [pc, #640]	@ (8008a6c <__gethex+0x2b0>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	4648      	mov	r0, r9
 80087f0:	f7ff ff10 	bl	8008614 <strncmp>
 80087f4:	4607      	mov	r7, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d167      	bne.n	80088ca <__gethex+0x10e>
 80087fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80087fe:	4626      	mov	r6, r4
 8008800:	f7ff ffc6 	bl	8008790 <__hexdig_fun>
 8008804:	2800      	cmp	r0, #0
 8008806:	d062      	beq.n	80088ce <__gethex+0x112>
 8008808:	4623      	mov	r3, r4
 800880a:	7818      	ldrb	r0, [r3, #0]
 800880c:	2830      	cmp	r0, #48	@ 0x30
 800880e:	4699      	mov	r9, r3
 8008810:	f103 0301 	add.w	r3, r3, #1
 8008814:	d0f9      	beq.n	800880a <__gethex+0x4e>
 8008816:	f7ff ffbb 	bl	8008790 <__hexdig_fun>
 800881a:	fab0 f580 	clz	r5, r0
 800881e:	096d      	lsrs	r5, r5, #5
 8008820:	f04f 0b01 	mov.w	fp, #1
 8008824:	464a      	mov	r2, r9
 8008826:	4616      	mov	r6, r2
 8008828:	3201      	adds	r2, #1
 800882a:	7830      	ldrb	r0, [r6, #0]
 800882c:	f7ff ffb0 	bl	8008790 <__hexdig_fun>
 8008830:	2800      	cmp	r0, #0
 8008832:	d1f8      	bne.n	8008826 <__gethex+0x6a>
 8008834:	498d      	ldr	r1, [pc, #564]	@ (8008a6c <__gethex+0x2b0>)
 8008836:	2201      	movs	r2, #1
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff feeb 	bl	8008614 <strncmp>
 800883e:	2800      	cmp	r0, #0
 8008840:	d13f      	bne.n	80088c2 <__gethex+0x106>
 8008842:	b944      	cbnz	r4, 8008856 <__gethex+0x9a>
 8008844:	1c74      	adds	r4, r6, #1
 8008846:	4622      	mov	r2, r4
 8008848:	4616      	mov	r6, r2
 800884a:	3201      	adds	r2, #1
 800884c:	7830      	ldrb	r0, [r6, #0]
 800884e:	f7ff ff9f 	bl	8008790 <__hexdig_fun>
 8008852:	2800      	cmp	r0, #0
 8008854:	d1f8      	bne.n	8008848 <__gethex+0x8c>
 8008856:	1ba4      	subs	r4, r4, r6
 8008858:	00a7      	lsls	r7, r4, #2
 800885a:	7833      	ldrb	r3, [r6, #0]
 800885c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008860:	2b50      	cmp	r3, #80	@ 0x50
 8008862:	d13e      	bne.n	80088e2 <__gethex+0x126>
 8008864:	7873      	ldrb	r3, [r6, #1]
 8008866:	2b2b      	cmp	r3, #43	@ 0x2b
 8008868:	d033      	beq.n	80088d2 <__gethex+0x116>
 800886a:	2b2d      	cmp	r3, #45	@ 0x2d
 800886c:	d034      	beq.n	80088d8 <__gethex+0x11c>
 800886e:	1c71      	adds	r1, r6, #1
 8008870:	2400      	movs	r4, #0
 8008872:	7808      	ldrb	r0, [r1, #0]
 8008874:	f7ff ff8c 	bl	8008790 <__hexdig_fun>
 8008878:	1e43      	subs	r3, r0, #1
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b18      	cmp	r3, #24
 800887e:	d830      	bhi.n	80088e2 <__gethex+0x126>
 8008880:	f1a0 0210 	sub.w	r2, r0, #16
 8008884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008888:	f7ff ff82 	bl	8008790 <__hexdig_fun>
 800888c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008890:	fa5f fc8c 	uxtb.w	ip, ip
 8008894:	f1bc 0f18 	cmp.w	ip, #24
 8008898:	f04f 030a 	mov.w	r3, #10
 800889c:	d91e      	bls.n	80088dc <__gethex+0x120>
 800889e:	b104      	cbz	r4, 80088a2 <__gethex+0xe6>
 80088a0:	4252      	negs	r2, r2
 80088a2:	4417      	add	r7, r2
 80088a4:	f8ca 1000 	str.w	r1, [sl]
 80088a8:	b1ed      	cbz	r5, 80088e6 <__gethex+0x12a>
 80088aa:	f1bb 0f00 	cmp.w	fp, #0
 80088ae:	bf0c      	ite	eq
 80088b0:	2506      	moveq	r5, #6
 80088b2:	2500      	movne	r5, #0
 80088b4:	4628      	mov	r0, r5
 80088b6:	b005      	add	sp, #20
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	2500      	movs	r5, #0
 80088be:	462c      	mov	r4, r5
 80088c0:	e7b0      	b.n	8008824 <__gethex+0x68>
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	d1c7      	bne.n	8008856 <__gethex+0x9a>
 80088c6:	4627      	mov	r7, r4
 80088c8:	e7c7      	b.n	800885a <__gethex+0x9e>
 80088ca:	464e      	mov	r6, r9
 80088cc:	462f      	mov	r7, r5
 80088ce:	2501      	movs	r5, #1
 80088d0:	e7c3      	b.n	800885a <__gethex+0x9e>
 80088d2:	2400      	movs	r4, #0
 80088d4:	1cb1      	adds	r1, r6, #2
 80088d6:	e7cc      	b.n	8008872 <__gethex+0xb6>
 80088d8:	2401      	movs	r4, #1
 80088da:	e7fb      	b.n	80088d4 <__gethex+0x118>
 80088dc:	fb03 0002 	mla	r0, r3, r2, r0
 80088e0:	e7ce      	b.n	8008880 <__gethex+0xc4>
 80088e2:	4631      	mov	r1, r6
 80088e4:	e7de      	b.n	80088a4 <__gethex+0xe8>
 80088e6:	eba6 0309 	sub.w	r3, r6, r9
 80088ea:	3b01      	subs	r3, #1
 80088ec:	4629      	mov	r1, r5
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	dc0a      	bgt.n	8008908 <__gethex+0x14c>
 80088f2:	9801      	ldr	r0, [sp, #4]
 80088f4:	f7fd ff64 	bl	80067c0 <_Balloc>
 80088f8:	4604      	mov	r4, r0
 80088fa:	b940      	cbnz	r0, 800890e <__gethex+0x152>
 80088fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008a70 <__gethex+0x2b4>)
 80088fe:	4602      	mov	r2, r0
 8008900:	21e4      	movs	r1, #228	@ 0xe4
 8008902:	485c      	ldr	r0, [pc, #368]	@ (8008a74 <__gethex+0x2b8>)
 8008904:	f7ff fec0 	bl	8008688 <__assert_func>
 8008908:	3101      	adds	r1, #1
 800890a:	105b      	asrs	r3, r3, #1
 800890c:	e7ef      	b.n	80088ee <__gethex+0x132>
 800890e:	f100 0a14 	add.w	sl, r0, #20
 8008912:	2300      	movs	r3, #0
 8008914:	4655      	mov	r5, sl
 8008916:	469b      	mov	fp, r3
 8008918:	45b1      	cmp	r9, r6
 800891a:	d337      	bcc.n	800898c <__gethex+0x1d0>
 800891c:	f845 bb04 	str.w	fp, [r5], #4
 8008920:	eba5 050a 	sub.w	r5, r5, sl
 8008924:	10ad      	asrs	r5, r5, #2
 8008926:	6125      	str	r5, [r4, #16]
 8008928:	4658      	mov	r0, fp
 800892a:	f7fe f83b 	bl	80069a4 <__hi0bits>
 800892e:	016d      	lsls	r5, r5, #5
 8008930:	f8d8 6000 	ldr.w	r6, [r8]
 8008934:	1a2d      	subs	r5, r5, r0
 8008936:	42b5      	cmp	r5, r6
 8008938:	dd54      	ble.n	80089e4 <__gethex+0x228>
 800893a:	1bad      	subs	r5, r5, r6
 800893c:	4629      	mov	r1, r5
 800893e:	4620      	mov	r0, r4
 8008940:	f7fe fbcf 	bl	80070e2 <__any_on>
 8008944:	4681      	mov	r9, r0
 8008946:	b178      	cbz	r0, 8008968 <__gethex+0x1ac>
 8008948:	1e6b      	subs	r3, r5, #1
 800894a:	1159      	asrs	r1, r3, #5
 800894c:	f003 021f 	and.w	r2, r3, #31
 8008950:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008954:	f04f 0901 	mov.w	r9, #1
 8008958:	fa09 f202 	lsl.w	r2, r9, r2
 800895c:	420a      	tst	r2, r1
 800895e:	d003      	beq.n	8008968 <__gethex+0x1ac>
 8008960:	454b      	cmp	r3, r9
 8008962:	dc36      	bgt.n	80089d2 <__gethex+0x216>
 8008964:	f04f 0902 	mov.w	r9, #2
 8008968:	4629      	mov	r1, r5
 800896a:	4620      	mov	r0, r4
 800896c:	f7ff febe 	bl	80086ec <rshift>
 8008970:	442f      	add	r7, r5
 8008972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008976:	42bb      	cmp	r3, r7
 8008978:	da42      	bge.n	8008a00 <__gethex+0x244>
 800897a:	9801      	ldr	r0, [sp, #4]
 800897c:	4621      	mov	r1, r4
 800897e:	f7fd ff5f 	bl	8006840 <_Bfree>
 8008982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008984:	2300      	movs	r3, #0
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	25a3      	movs	r5, #163	@ 0xa3
 800898a:	e793      	b.n	80088b4 <__gethex+0xf8>
 800898c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008990:	2a2e      	cmp	r2, #46	@ 0x2e
 8008992:	d012      	beq.n	80089ba <__gethex+0x1fe>
 8008994:	2b20      	cmp	r3, #32
 8008996:	d104      	bne.n	80089a2 <__gethex+0x1e6>
 8008998:	f845 bb04 	str.w	fp, [r5], #4
 800899c:	f04f 0b00 	mov.w	fp, #0
 80089a0:	465b      	mov	r3, fp
 80089a2:	7830      	ldrb	r0, [r6, #0]
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	f7ff fef3 	bl	8008790 <__hexdig_fun>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	f000 000f 	and.w	r0, r0, #15
 80089b0:	4098      	lsls	r0, r3
 80089b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80089b6:	3304      	adds	r3, #4
 80089b8:	e7ae      	b.n	8008918 <__gethex+0x15c>
 80089ba:	45b1      	cmp	r9, r6
 80089bc:	d8ea      	bhi.n	8008994 <__gethex+0x1d8>
 80089be:	492b      	ldr	r1, [pc, #172]	@ (8008a6c <__gethex+0x2b0>)
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff fe25 	bl	8008614 <strncmp>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d1e1      	bne.n	8008994 <__gethex+0x1d8>
 80089d0:	e7a2      	b.n	8008918 <__gethex+0x15c>
 80089d2:	1ea9      	subs	r1, r5, #2
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7fe fb84 	bl	80070e2 <__any_on>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d0c2      	beq.n	8008964 <__gethex+0x1a8>
 80089de:	f04f 0903 	mov.w	r9, #3
 80089e2:	e7c1      	b.n	8008968 <__gethex+0x1ac>
 80089e4:	da09      	bge.n	80089fa <__gethex+0x23e>
 80089e6:	1b75      	subs	r5, r6, r5
 80089e8:	4621      	mov	r1, r4
 80089ea:	9801      	ldr	r0, [sp, #4]
 80089ec:	462a      	mov	r2, r5
 80089ee:	f7fe f93f 	bl	8006c70 <__lshift>
 80089f2:	1b7f      	subs	r7, r7, r5
 80089f4:	4604      	mov	r4, r0
 80089f6:	f100 0a14 	add.w	sl, r0, #20
 80089fa:	f04f 0900 	mov.w	r9, #0
 80089fe:	e7b8      	b.n	8008972 <__gethex+0x1b6>
 8008a00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a04:	42bd      	cmp	r5, r7
 8008a06:	dd6f      	ble.n	8008ae8 <__gethex+0x32c>
 8008a08:	1bed      	subs	r5, r5, r7
 8008a0a:	42ae      	cmp	r6, r5
 8008a0c:	dc34      	bgt.n	8008a78 <__gethex+0x2bc>
 8008a0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d022      	beq.n	8008a5c <__gethex+0x2a0>
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d024      	beq.n	8008a64 <__gethex+0x2a8>
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d115      	bne.n	8008a4a <__gethex+0x28e>
 8008a1e:	42ae      	cmp	r6, r5
 8008a20:	d113      	bne.n	8008a4a <__gethex+0x28e>
 8008a22:	2e01      	cmp	r6, #1
 8008a24:	d10b      	bne.n	8008a3e <__gethex+0x282>
 8008a26:	9a02      	ldr	r2, [sp, #8]
 8008a28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	2301      	movs	r3, #1
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	f8ca 3000 	str.w	r3, [sl]
 8008a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a38:	2562      	movs	r5, #98	@ 0x62
 8008a3a:	601c      	str	r4, [r3, #0]
 8008a3c:	e73a      	b.n	80088b4 <__gethex+0xf8>
 8008a3e:	1e71      	subs	r1, r6, #1
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7fe fb4e 	bl	80070e2 <__any_on>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1ed      	bne.n	8008a26 <__gethex+0x26a>
 8008a4a:	9801      	ldr	r0, [sp, #4]
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	f7fd fef7 	bl	8006840 <_Bfree>
 8008a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a54:	2300      	movs	r3, #0
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	2550      	movs	r5, #80	@ 0x50
 8008a5a:	e72b      	b.n	80088b4 <__gethex+0xf8>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f3      	bne.n	8008a4a <__gethex+0x28e>
 8008a62:	e7e0      	b.n	8008a26 <__gethex+0x26a>
 8008a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1dd      	bne.n	8008a26 <__gethex+0x26a>
 8008a6a:	e7ee      	b.n	8008a4a <__gethex+0x28e>
 8008a6c:	08009908 	.word	0x08009908
 8008a70:	080097a1 	.word	0x080097a1
 8008a74:	08009ab6 	.word	0x08009ab6
 8008a78:	1e6f      	subs	r7, r5, #1
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	d130      	bne.n	8008ae2 <__gethex+0x326>
 8008a80:	b127      	cbz	r7, 8008a8c <__gethex+0x2d0>
 8008a82:	4639      	mov	r1, r7
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7fe fb2c 	bl	80070e2 <__any_on>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	117a      	asrs	r2, r7, #5
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a94:	f007 071f 	and.w	r7, r7, #31
 8008a98:	40bb      	lsls	r3, r7
 8008a9a:	4213      	tst	r3, r2
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bf18      	it	ne
 8008aa2:	f049 0902 	orrne.w	r9, r9, #2
 8008aa6:	f7ff fe21 	bl	80086ec <rshift>
 8008aaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008aae:	1b76      	subs	r6, r6, r5
 8008ab0:	2502      	movs	r5, #2
 8008ab2:	f1b9 0f00 	cmp.w	r9, #0
 8008ab6:	d047      	beq.n	8008b48 <__gethex+0x38c>
 8008ab8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d015      	beq.n	8008aec <__gethex+0x330>
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d017      	beq.n	8008af4 <__gethex+0x338>
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d109      	bne.n	8008adc <__gethex+0x320>
 8008ac8:	f019 0f02 	tst.w	r9, #2
 8008acc:	d006      	beq.n	8008adc <__gethex+0x320>
 8008ace:	f8da 3000 	ldr.w	r3, [sl]
 8008ad2:	ea49 0903 	orr.w	r9, r9, r3
 8008ad6:	f019 0f01 	tst.w	r9, #1
 8008ada:	d10e      	bne.n	8008afa <__gethex+0x33e>
 8008adc:	f045 0510 	orr.w	r5, r5, #16
 8008ae0:	e032      	b.n	8008b48 <__gethex+0x38c>
 8008ae2:	f04f 0901 	mov.w	r9, #1
 8008ae6:	e7d1      	b.n	8008a8c <__gethex+0x2d0>
 8008ae8:	2501      	movs	r5, #1
 8008aea:	e7e2      	b.n	8008ab2 <__gethex+0x2f6>
 8008aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aee:	f1c3 0301 	rsb	r3, r3, #1
 8008af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f0      	beq.n	8008adc <__gethex+0x320>
 8008afa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008afe:	f104 0314 	add.w	r3, r4, #20
 8008b02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b0a:	f04f 0c00 	mov.w	ip, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b18:	d01b      	beq.n	8008b52 <__gethex+0x396>
 8008b1a:	3201      	adds	r2, #1
 8008b1c:	6002      	str	r2, [r0, #0]
 8008b1e:	2d02      	cmp	r5, #2
 8008b20:	f104 0314 	add.w	r3, r4, #20
 8008b24:	d13c      	bne.n	8008ba0 <__gethex+0x3e4>
 8008b26:	f8d8 2000 	ldr.w	r2, [r8]
 8008b2a:	3a01      	subs	r2, #1
 8008b2c:	42b2      	cmp	r2, r6
 8008b2e:	d109      	bne.n	8008b44 <__gethex+0x388>
 8008b30:	1171      	asrs	r1, r6, #5
 8008b32:	2201      	movs	r2, #1
 8008b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b38:	f006 061f 	and.w	r6, r6, #31
 8008b3c:	fa02 f606 	lsl.w	r6, r2, r6
 8008b40:	421e      	tst	r6, r3
 8008b42:	d13a      	bne.n	8008bba <__gethex+0x3fe>
 8008b44:	f045 0520 	orr.w	r5, r5, #32
 8008b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4a:	601c      	str	r4, [r3, #0]
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	601f      	str	r7, [r3, #0]
 8008b50:	e6b0      	b.n	80088b4 <__gethex+0xf8>
 8008b52:	4299      	cmp	r1, r3
 8008b54:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b58:	d8d9      	bhi.n	8008b0e <__gethex+0x352>
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	459b      	cmp	fp, r3
 8008b5e:	db17      	blt.n	8008b90 <__gethex+0x3d4>
 8008b60:	6861      	ldr	r1, [r4, #4]
 8008b62:	9801      	ldr	r0, [sp, #4]
 8008b64:	3101      	adds	r1, #1
 8008b66:	f7fd fe2b 	bl	80067c0 <_Balloc>
 8008b6a:	4681      	mov	r9, r0
 8008b6c:	b918      	cbnz	r0, 8008b76 <__gethex+0x3ba>
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <__gethex+0x41c>)
 8008b70:	4602      	mov	r2, r0
 8008b72:	2184      	movs	r1, #132	@ 0x84
 8008b74:	e6c5      	b.n	8008902 <__gethex+0x146>
 8008b76:	6922      	ldr	r2, [r4, #16]
 8008b78:	3202      	adds	r2, #2
 8008b7a:	f104 010c 	add.w	r1, r4, #12
 8008b7e:	0092      	lsls	r2, r2, #2
 8008b80:	300c      	adds	r0, #12
 8008b82:	f7ff fd69 	bl	8008658 <memcpy>
 8008b86:	4621      	mov	r1, r4
 8008b88:	9801      	ldr	r0, [sp, #4]
 8008b8a:	f7fd fe59 	bl	8006840 <_Bfree>
 8008b8e:	464c      	mov	r4, r9
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b98:	6122      	str	r2, [r4, #16]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	615a      	str	r2, [r3, #20]
 8008b9e:	e7be      	b.n	8008b1e <__gethex+0x362>
 8008ba0:	6922      	ldr	r2, [r4, #16]
 8008ba2:	455a      	cmp	r2, fp
 8008ba4:	dd0b      	ble.n	8008bbe <__gethex+0x402>
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f7ff fd9f 	bl	80086ec <rshift>
 8008bae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bb2:	3701      	adds	r7, #1
 8008bb4:	42bb      	cmp	r3, r7
 8008bb6:	f6ff aee0 	blt.w	800897a <__gethex+0x1be>
 8008bba:	2501      	movs	r5, #1
 8008bbc:	e7c2      	b.n	8008b44 <__gethex+0x388>
 8008bbe:	f016 061f 	ands.w	r6, r6, #31
 8008bc2:	d0fa      	beq.n	8008bba <__gethex+0x3fe>
 8008bc4:	4453      	add	r3, sl
 8008bc6:	f1c6 0620 	rsb	r6, r6, #32
 8008bca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bce:	f7fd fee9 	bl	80069a4 <__hi0bits>
 8008bd2:	42b0      	cmp	r0, r6
 8008bd4:	dbe7      	blt.n	8008ba6 <__gethex+0x3ea>
 8008bd6:	e7f0      	b.n	8008bba <__gethex+0x3fe>
 8008bd8:	080097a1 	.word	0x080097a1

08008bdc <L_shift>:
 8008bdc:	f1c2 0208 	rsb	r2, r2, #8
 8008be0:	0092      	lsls	r2, r2, #2
 8008be2:	b570      	push	{r4, r5, r6, lr}
 8008be4:	f1c2 0620 	rsb	r6, r2, #32
 8008be8:	6843      	ldr	r3, [r0, #4]
 8008bea:	6804      	ldr	r4, [r0, #0]
 8008bec:	fa03 f506 	lsl.w	r5, r3, r6
 8008bf0:	432c      	orrs	r4, r5
 8008bf2:	40d3      	lsrs	r3, r2
 8008bf4:	6004      	str	r4, [r0, #0]
 8008bf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bfa:	4288      	cmp	r0, r1
 8008bfc:	d3f4      	bcc.n	8008be8 <L_shift+0xc>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}

08008c00 <__match>:
 8008c00:	b530      	push	{r4, r5, lr}
 8008c02:	6803      	ldr	r3, [r0, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0a:	b914      	cbnz	r4, 8008c12 <__match+0x12>
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	2001      	movs	r0, #1
 8008c10:	bd30      	pop	{r4, r5, pc}
 8008c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c1a:	2d19      	cmp	r5, #25
 8008c1c:	bf98      	it	ls
 8008c1e:	3220      	addls	r2, #32
 8008c20:	42a2      	cmp	r2, r4
 8008c22:	d0f0      	beq.n	8008c06 <__match+0x6>
 8008c24:	2000      	movs	r0, #0
 8008c26:	e7f3      	b.n	8008c10 <__match+0x10>

08008c28 <__hexnan>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	6801      	ldr	r1, [r0, #0]
 8008c30:	115e      	asrs	r6, r3, #5
 8008c32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c36:	f013 031f 	ands.w	r3, r3, #31
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	bf18      	it	ne
 8008c3e:	3604      	addne	r6, #4
 8008c40:	2500      	movs	r5, #0
 8008c42:	1f37      	subs	r7, r6, #4
 8008c44:	4682      	mov	sl, r0
 8008c46:	4690      	mov	r8, r2
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c4e:	46b9      	mov	r9, r7
 8008c50:	463c      	mov	r4, r7
 8008c52:	9502      	str	r5, [sp, #8]
 8008c54:	46ab      	mov	fp, r5
 8008c56:	784a      	ldrb	r2, [r1, #1]
 8008c58:	1c4b      	adds	r3, r1, #1
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	b342      	cbz	r2, 8008cb0 <__hexnan+0x88>
 8008c5e:	4610      	mov	r0, r2
 8008c60:	9105      	str	r1, [sp, #20]
 8008c62:	9204      	str	r2, [sp, #16]
 8008c64:	f7ff fd94 	bl	8008790 <__hexdig_fun>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d151      	bne.n	8008d10 <__hexnan+0xe8>
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	9905      	ldr	r1, [sp, #20]
 8008c70:	2a20      	cmp	r2, #32
 8008c72:	d818      	bhi.n	8008ca6 <__hexnan+0x7e>
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	459b      	cmp	fp, r3
 8008c78:	dd13      	ble.n	8008ca2 <__hexnan+0x7a>
 8008c7a:	454c      	cmp	r4, r9
 8008c7c:	d206      	bcs.n	8008c8c <__hexnan+0x64>
 8008c7e:	2d07      	cmp	r5, #7
 8008c80:	dc04      	bgt.n	8008c8c <__hexnan+0x64>
 8008c82:	462a      	mov	r2, r5
 8008c84:	4649      	mov	r1, r9
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff ffa8 	bl	8008bdc <L_shift>
 8008c8c:	4544      	cmp	r4, r8
 8008c8e:	d952      	bls.n	8008d36 <__hexnan+0x10e>
 8008c90:	2300      	movs	r3, #0
 8008c92:	f1a4 0904 	sub.w	r9, r4, #4
 8008c96:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c9a:	f8cd b008 	str.w	fp, [sp, #8]
 8008c9e:	464c      	mov	r4, r9
 8008ca0:	461d      	mov	r5, r3
 8008ca2:	9903      	ldr	r1, [sp, #12]
 8008ca4:	e7d7      	b.n	8008c56 <__hexnan+0x2e>
 8008ca6:	2a29      	cmp	r2, #41	@ 0x29
 8008ca8:	d157      	bne.n	8008d5a <__hexnan+0x132>
 8008caa:	3102      	adds	r1, #2
 8008cac:	f8ca 1000 	str.w	r1, [sl]
 8008cb0:	f1bb 0f00 	cmp.w	fp, #0
 8008cb4:	d051      	beq.n	8008d5a <__hexnan+0x132>
 8008cb6:	454c      	cmp	r4, r9
 8008cb8:	d206      	bcs.n	8008cc8 <__hexnan+0xa0>
 8008cba:	2d07      	cmp	r5, #7
 8008cbc:	dc04      	bgt.n	8008cc8 <__hexnan+0xa0>
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7ff ff8a 	bl	8008bdc <L_shift>
 8008cc8:	4544      	cmp	r4, r8
 8008cca:	d936      	bls.n	8008d3a <__hexnan+0x112>
 8008ccc:	f1a8 0204 	sub.w	r2, r8, #4
 8008cd0:	4623      	mov	r3, r4
 8008cd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cda:	429f      	cmp	r7, r3
 8008cdc:	d2f9      	bcs.n	8008cd2 <__hexnan+0xaa>
 8008cde:	1b3b      	subs	r3, r7, r4
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	3e03      	subs	r6, #3
 8008cea:	42b4      	cmp	r4, r6
 8008cec:	bf88      	it	hi
 8008cee:	2304      	movhi	r3, #4
 8008cf0:	4443      	add	r3, r8
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f843 2b04 	str.w	r2, [r3], #4
 8008cf8:	429f      	cmp	r7, r3
 8008cfa:	d2fb      	bcs.n	8008cf4 <__hexnan+0xcc>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	b91b      	cbnz	r3, 8008d08 <__hexnan+0xe0>
 8008d00:	4547      	cmp	r7, r8
 8008d02:	d128      	bne.n	8008d56 <__hexnan+0x12e>
 8008d04:	2301      	movs	r3, #1
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	2005      	movs	r0, #5
 8008d0a:	b007      	add	sp, #28
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	3501      	adds	r5, #1
 8008d12:	2d08      	cmp	r5, #8
 8008d14:	f10b 0b01 	add.w	fp, fp, #1
 8008d18:	dd06      	ble.n	8008d28 <__hexnan+0x100>
 8008d1a:	4544      	cmp	r4, r8
 8008d1c:	d9c1      	bls.n	8008ca2 <__hexnan+0x7a>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d24:	2501      	movs	r5, #1
 8008d26:	3c04      	subs	r4, #4
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	f000 000f 	and.w	r0, r0, #15
 8008d2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d32:	6020      	str	r0, [r4, #0]
 8008d34:	e7b5      	b.n	8008ca2 <__hexnan+0x7a>
 8008d36:	2508      	movs	r5, #8
 8008d38:	e7b3      	b.n	8008ca2 <__hexnan+0x7a>
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0dd      	beq.n	8008cfc <__hexnan+0xd4>
 8008d40:	f1c3 0320 	rsb	r3, r3, #32
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295
 8008d48:	40da      	lsrs	r2, r3
 8008d4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d54:	e7d2      	b.n	8008cfc <__hexnan+0xd4>
 8008d56:	3f04      	subs	r7, #4
 8008d58:	e7d0      	b.n	8008cfc <__hexnan+0xd4>
 8008d5a:	2004      	movs	r0, #4
 8008d5c:	e7d5      	b.n	8008d0a <__hexnan+0xe2>

08008d5e <__ascii_mbtowc>:
 8008d5e:	b082      	sub	sp, #8
 8008d60:	b901      	cbnz	r1, 8008d64 <__ascii_mbtowc+0x6>
 8008d62:	a901      	add	r1, sp, #4
 8008d64:	b142      	cbz	r2, 8008d78 <__ascii_mbtowc+0x1a>
 8008d66:	b14b      	cbz	r3, 8008d7c <__ascii_mbtowc+0x1e>
 8008d68:	7813      	ldrb	r3, [r2, #0]
 8008d6a:	600b      	str	r3, [r1, #0]
 8008d6c:	7812      	ldrb	r2, [r2, #0]
 8008d6e:	1e10      	subs	r0, r2, #0
 8008d70:	bf18      	it	ne
 8008d72:	2001      	movne	r0, #1
 8008d74:	b002      	add	sp, #8
 8008d76:	4770      	bx	lr
 8008d78:	4610      	mov	r0, r2
 8008d7a:	e7fb      	b.n	8008d74 <__ascii_mbtowc+0x16>
 8008d7c:	f06f 0001 	mvn.w	r0, #1
 8008d80:	e7f8      	b.n	8008d74 <__ascii_mbtowc+0x16>

08008d82 <_realloc_r>:
 8008d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d86:	4680      	mov	r8, r0
 8008d88:	4615      	mov	r5, r2
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b921      	cbnz	r1, 8008d98 <_realloc_r+0x16>
 8008d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	4611      	mov	r1, r2
 8008d94:	f7fd bc88 	b.w	80066a8 <_malloc_r>
 8008d98:	b92a      	cbnz	r2, 8008da6 <_realloc_r+0x24>
 8008d9a:	f7fd fc11 	bl	80065c0 <_free_r>
 8008d9e:	2400      	movs	r4, #0
 8008da0:	4620      	mov	r0, r4
 8008da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da6:	f000 f8c4 	bl	8008f32 <_malloc_usable_size_r>
 8008daa:	4285      	cmp	r5, r0
 8008dac:	4606      	mov	r6, r0
 8008dae:	d802      	bhi.n	8008db6 <_realloc_r+0x34>
 8008db0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008db4:	d8f4      	bhi.n	8008da0 <_realloc_r+0x1e>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4640      	mov	r0, r8
 8008dba:	f7fd fc75 	bl	80066a8 <_malloc_r>
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d0ec      	beq.n	8008d9e <_realloc_r+0x1c>
 8008dc4:	42b5      	cmp	r5, r6
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	bf28      	it	cs
 8008dcc:	4632      	movcs	r2, r6
 8008dce:	f7ff fc43 	bl	8008658 <memcpy>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	f7fd fbf3 	bl	80065c0 <_free_r>
 8008dda:	463c      	mov	r4, r7
 8008ddc:	e7e0      	b.n	8008da0 <_realloc_r+0x1e>

08008dde <__ascii_wctomb>:
 8008dde:	4603      	mov	r3, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	b141      	cbz	r1, 8008df6 <__ascii_wctomb+0x18>
 8008de4:	2aff      	cmp	r2, #255	@ 0xff
 8008de6:	d904      	bls.n	8008df2 <__ascii_wctomb+0x14>
 8008de8:	228a      	movs	r2, #138	@ 0x8a
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	4770      	bx	lr
 8008df2:	700a      	strb	r2, [r1, #0]
 8008df4:	2001      	movs	r0, #1
 8008df6:	4770      	bx	lr

08008df8 <fiprintf>:
 8008df8:	b40e      	push	{r1, r2, r3}
 8008dfa:	b503      	push	{r0, r1, lr}
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	ab03      	add	r3, sp, #12
 8008e00:	4805      	ldr	r0, [pc, #20]	@ (8008e18 <fiprintf+0x20>)
 8008e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e06:	6800      	ldr	r0, [r0, #0]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f7ff f991 	bl	8008130 <_vfiprintf_r>
 8008e0e:	b002      	add	sp, #8
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b003      	add	sp, #12
 8008e16:	4770      	bx	lr
 8008e18:	20000018 	.word	0x20000018

08008e1c <__swhatbuf_r>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	460c      	mov	r4, r1
 8008e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e24:	2900      	cmp	r1, #0
 8008e26:	b096      	sub	sp, #88	@ 0x58
 8008e28:	4615      	mov	r5, r2
 8008e2a:	461e      	mov	r6, r3
 8008e2c:	da0d      	bge.n	8008e4a <__swhatbuf_r+0x2e>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e34:	f04f 0100 	mov.w	r1, #0
 8008e38:	bf14      	ite	ne
 8008e3a:	2340      	movne	r3, #64	@ 0x40
 8008e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e40:	2000      	movs	r0, #0
 8008e42:	6031      	str	r1, [r6, #0]
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	b016      	add	sp, #88	@ 0x58
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
 8008e4a:	466a      	mov	r2, sp
 8008e4c:	f000 f848 	bl	8008ee0 <_fstat_r>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	dbec      	blt.n	8008e2e <__swhatbuf_r+0x12>
 8008e54:	9901      	ldr	r1, [sp, #4]
 8008e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e5e:	4259      	negs	r1, r3
 8008e60:	4159      	adcs	r1, r3
 8008e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e66:	e7eb      	b.n	8008e40 <__swhatbuf_r+0x24>

08008e68 <__smakebuf_r>:
 8008e68:	898b      	ldrh	r3, [r1, #12]
 8008e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e6c:	079d      	lsls	r5, r3, #30
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460c      	mov	r4, r1
 8008e72:	d507      	bpl.n	8008e84 <__smakebuf_r+0x1c>
 8008e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	6163      	str	r3, [r4, #20]
 8008e80:	b003      	add	sp, #12
 8008e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e84:	ab01      	add	r3, sp, #4
 8008e86:	466a      	mov	r2, sp
 8008e88:	f7ff ffc8 	bl	8008e1c <__swhatbuf_r>
 8008e8c:	9f00      	ldr	r7, [sp, #0]
 8008e8e:	4605      	mov	r5, r0
 8008e90:	4639      	mov	r1, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7fd fc08 	bl	80066a8 <_malloc_r>
 8008e98:	b948      	cbnz	r0, 8008eae <__smakebuf_r+0x46>
 8008e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9e:	059a      	lsls	r2, r3, #22
 8008ea0:	d4ee      	bmi.n	8008e80 <__smakebuf_r+0x18>
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	f043 0302 	orr.w	r3, r3, #2
 8008eaa:	81a3      	strh	r3, [r4, #12]
 8008eac:	e7e2      	b.n	8008e74 <__smakebuf_r+0xc>
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	6020      	str	r0, [r4, #0]
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ebe:	b15b      	cbz	r3, 8008ed8 <__smakebuf_r+0x70>
 8008ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 f81d 	bl	8008f04 <_isatty_r>
 8008eca:	b128      	cbz	r0, 8008ed8 <__smakebuf_r+0x70>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f023 0303 	bic.w	r3, r3, #3
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	431d      	orrs	r5, r3
 8008edc:	81a5      	strh	r5, [r4, #12]
 8008ede:	e7cf      	b.n	8008e80 <__smakebuf_r+0x18>

08008ee0 <_fstat_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	@ (8008f00 <_fstat_r+0x20>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	4611      	mov	r1, r2
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	f7f9 f800 	bl	8001ef2 <_fstat>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d102      	bne.n	8008efc <_fstat_r+0x1c>
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	b103      	cbz	r3, 8008efc <_fstat_r+0x1c>
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	bf00      	nop
 8008f00:	20000850 	.word	0x20000850

08008f04 <_isatty_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d06      	ldr	r5, [pc, #24]	@ (8008f20 <_isatty_r+0x1c>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	f7f8 ffff 	bl	8001f12 <_isatty>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_isatty_r+0x1a>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_isatty_r+0x1a>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000850 	.word	0x20000850

08008f24 <abort>:
 8008f24:	b508      	push	{r3, lr}
 8008f26:	2006      	movs	r0, #6
 8008f28:	f000 f834 	bl	8008f94 <raise>
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	f7f8 ff90 	bl	8001e52 <_exit>

08008f32 <_malloc_usable_size_r>:
 8008f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f36:	1f18      	subs	r0, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bfbc      	itt	lt
 8008f3c:	580b      	ldrlt	r3, [r1, r0]
 8008f3e:	18c0      	addlt	r0, r0, r3
 8008f40:	4770      	bx	lr

08008f42 <_raise_r>:
 8008f42:	291f      	cmp	r1, #31
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	460c      	mov	r4, r1
 8008f4a:	d904      	bls.n	8008f56 <_raise_r+0x14>
 8008f4c:	2316      	movs	r3, #22
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f58:	b112      	cbz	r2, 8008f60 <_raise_r+0x1e>
 8008f5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f5e:	b94b      	cbnz	r3, 8008f74 <_raise_r+0x32>
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f831 	bl	8008fc8 <_getpid_r>
 8008f66:	4622      	mov	r2, r4
 8008f68:	4601      	mov	r1, r0
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f70:	f000 b818 	b.w	8008fa4 <_kill_r>
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d00a      	beq.n	8008f8e <_raise_r+0x4c>
 8008f78:	1c59      	adds	r1, r3, #1
 8008f7a:	d103      	bne.n	8008f84 <_raise_r+0x42>
 8008f7c:	2316      	movs	r3, #22
 8008f7e:	6003      	str	r3, [r0, #0]
 8008f80:	2001      	movs	r0, #1
 8008f82:	e7e7      	b.n	8008f54 <_raise_r+0x12>
 8008f84:	2100      	movs	r1, #0
 8008f86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4798      	blx	r3
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e7e0      	b.n	8008f54 <_raise_r+0x12>
	...

08008f94 <raise>:
 8008f94:	4b02      	ldr	r3, [pc, #8]	@ (8008fa0 <raise+0xc>)
 8008f96:	4601      	mov	r1, r0
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f7ff bfd2 	b.w	8008f42 <_raise_r>
 8008f9e:	bf00      	nop
 8008fa0:	20000018 	.word	0x20000018

08008fa4 <_kill_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d07      	ldr	r5, [pc, #28]	@ (8008fc4 <_kill_r+0x20>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	4611      	mov	r1, r2
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	f7f8 ff3e 	bl	8001e32 <_kill>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d102      	bne.n	8008fc0 <_kill_r+0x1c>
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	b103      	cbz	r3, 8008fc0 <_kill_r+0x1c>
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000850 	.word	0x20000850

08008fc8 <_getpid_r>:
 8008fc8:	f7f8 bf2b 	b.w	8001e22 <_getpid>

08008fcc <atan2>:
 8008fcc:	f000 baa8 	b.w	8009520 <__ieee754_atan2>

08008fd0 <sqrt>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	ed2d 8b02 	vpush	{d8}
 8008fd6:	ec55 4b10 	vmov	r4, r5, d0
 8008fda:	f000 f9c5 	bl	8009368 <__ieee754_sqrt>
 8008fde:	4622      	mov	r2, r4
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8008fea:	eef0 8a60 	vmov.f32	s17, s1
 8008fee:	f7f7 fda5 	bl	8000b3c <__aeabi_dcmpun>
 8008ff2:	b990      	cbnz	r0, 800901a <sqrt+0x4a>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fd76 	bl	8000aec <__aeabi_dcmplt>
 8009000:	b158      	cbz	r0, 800901a <sqrt+0x4a>
 8009002:	f7fc fc5b 	bl	80058bc <__errno>
 8009006:	2321      	movs	r3, #33	@ 0x21
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	2200      	movs	r2, #0
 800900c:	2300      	movs	r3, #0
 800900e:	4610      	mov	r0, r2
 8009010:	4619      	mov	r1, r3
 8009012:	f7f7 fc23 	bl	800085c <__aeabi_ddiv>
 8009016:	ec41 0b18 	vmov	d8, r0, r1
 800901a:	eeb0 0a48 	vmov.f32	s0, s16
 800901e:	eef0 0a68 	vmov.f32	s1, s17
 8009022:	ecbd 8b02 	vpop	{d8}
 8009026:	bd38      	pop	{r3, r4, r5, pc}

08009028 <atan>:
 8009028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ec55 4b10 	vmov	r4, r5, d0
 8009030:	4bbf      	ldr	r3, [pc, #764]	@ (8009330 <atan+0x308>)
 8009032:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009036:	429e      	cmp	r6, r3
 8009038:	46ab      	mov	fp, r5
 800903a:	d918      	bls.n	800906e <atan+0x46>
 800903c:	4bbd      	ldr	r3, [pc, #756]	@ (8009334 <atan+0x30c>)
 800903e:	429e      	cmp	r6, r3
 8009040:	d801      	bhi.n	8009046 <atan+0x1e>
 8009042:	d109      	bne.n	8009058 <atan+0x30>
 8009044:	b144      	cbz	r4, 8009058 <atan+0x30>
 8009046:	4622      	mov	r2, r4
 8009048:	462b      	mov	r3, r5
 800904a:	4620      	mov	r0, r4
 800904c:	4629      	mov	r1, r5
 800904e:	f7f7 f925 	bl	800029c <__adddf3>
 8009052:	4604      	mov	r4, r0
 8009054:	460d      	mov	r5, r1
 8009056:	e006      	b.n	8009066 <atan+0x3e>
 8009058:	f1bb 0f00 	cmp.w	fp, #0
 800905c:	f340 812b 	ble.w	80092b6 <atan+0x28e>
 8009060:	a597      	add	r5, pc, #604	@ (adr r5, 80092c0 <atan+0x298>)
 8009062:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009066:	ec45 4b10 	vmov	d0, r4, r5
 800906a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	4bb2      	ldr	r3, [pc, #712]	@ (8009338 <atan+0x310>)
 8009070:	429e      	cmp	r6, r3
 8009072:	d813      	bhi.n	800909c <atan+0x74>
 8009074:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009078:	429e      	cmp	r6, r3
 800907a:	d80c      	bhi.n	8009096 <atan+0x6e>
 800907c:	a392      	add	r3, pc, #584	@ (adr r3, 80092c8 <atan+0x2a0>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	4620      	mov	r0, r4
 8009084:	4629      	mov	r1, r5
 8009086:	f7f7 f909 	bl	800029c <__adddf3>
 800908a:	4bac      	ldr	r3, [pc, #688]	@ (800933c <atan+0x314>)
 800908c:	2200      	movs	r2, #0
 800908e:	f7f7 fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1e7      	bne.n	8009066 <atan+0x3e>
 8009096:	f04f 3aff 	mov.w	sl, #4294967295
 800909a:	e029      	b.n	80090f0 <atan+0xc8>
 800909c:	f000 f95c 	bl	8009358 <fabs>
 80090a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009340 <atan+0x318>)
 80090a2:	429e      	cmp	r6, r3
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	f200 80bc 	bhi.w	8009224 <atan+0x1fc>
 80090ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80090b0:	429e      	cmp	r6, r3
 80090b2:	f200 809e 	bhi.w	80091f2 <atan+0x1ca>
 80090b6:	4622      	mov	r2, r4
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 f8ed 	bl	800029c <__adddf3>
 80090c2:	4b9e      	ldr	r3, [pc, #632]	@ (800933c <atan+0x314>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	f7f7 f8e7 	bl	8000298 <__aeabi_dsub>
 80090ca:	2200      	movs	r2, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 f8e0 	bl	800029c <__adddf3>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 fbba 	bl	800085c <__aeabi_ddiv>
 80090e8:	f04f 0a00 	mov.w	sl, #0
 80090ec:	4604      	mov	r4, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 fa86 	bl	8000608 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	f7f7 fa80 	bl	8000608 <__aeabi_dmul>
 8009108:	a371      	add	r3, pc, #452	@ (adr r3, 80092d0 <atan+0x2a8>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	f7f7 fa79 	bl	8000608 <__aeabi_dmul>
 8009116:	a370      	add	r3, pc, #448	@ (adr r3, 80092d8 <atan+0x2b0>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 f8be 	bl	800029c <__adddf3>
 8009120:	4632      	mov	r2, r6
 8009122:	463b      	mov	r3, r7
 8009124:	f7f7 fa70 	bl	8000608 <__aeabi_dmul>
 8009128:	a36d      	add	r3, pc, #436	@ (adr r3, 80092e0 <atan+0x2b8>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 f8b5 	bl	800029c <__adddf3>
 8009132:	4632      	mov	r2, r6
 8009134:	463b      	mov	r3, r7
 8009136:	f7f7 fa67 	bl	8000608 <__aeabi_dmul>
 800913a:	a36b      	add	r3, pc, #428	@ (adr r3, 80092e8 <atan+0x2c0>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f8ac 	bl	800029c <__adddf3>
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	f7f7 fa5e 	bl	8000608 <__aeabi_dmul>
 800914c:	a368      	add	r3, pc, #416	@ (adr r3, 80092f0 <atan+0x2c8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	f7f7 fa55 	bl	8000608 <__aeabi_dmul>
 800915e:	a366      	add	r3, pc, #408	@ (adr r3, 80092f8 <atan+0x2d0>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 f89a 	bl	800029c <__adddf3>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	f7f7 fa4c 	bl	8000608 <__aeabi_dmul>
 8009170:	a363      	add	r3, pc, #396	@ (adr r3, 8009300 <atan+0x2d8>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 fa43 	bl	8000608 <__aeabi_dmul>
 8009182:	a361      	add	r3, pc, #388	@ (adr r3, 8009308 <atan+0x2e0>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 f886 	bl	8000298 <__aeabi_dsub>
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	f7f7 fa3a 	bl	8000608 <__aeabi_dmul>
 8009194:	a35e      	add	r3, pc, #376	@ (adr r3, 8009310 <atan+0x2e8>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 f87d 	bl	8000298 <__aeabi_dsub>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	f7f7 fa31 	bl	8000608 <__aeabi_dmul>
 80091a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009318 <atan+0x2f0>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 fa28 	bl	8000608 <__aeabi_dmul>
 80091b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009320 <atan+0x2f8>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 fa1f 	bl	8000608 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	f7f7 f863 	bl	800029c <__adddf3>
 80091d6:	4622      	mov	r2, r4
 80091d8:	462b      	mov	r3, r5
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	d148      	bne.n	800927a <atan+0x252>
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f7 f854 	bl	8000298 <__aeabi_dsub>
 80091f0:	e72f      	b.n	8009052 <atan+0x2a>
 80091f2:	4b52      	ldr	r3, [pc, #328]	@ (800933c <atan+0x314>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 f84d 	bl	8000298 <__aeabi_dsub>
 80091fe:	4b4f      	ldr	r3, [pc, #316]	@ (800933c <atan+0x314>)
 8009200:	4606      	mov	r6, r0
 8009202:	460f      	mov	r7, r1
 8009204:	2200      	movs	r2, #0
 8009206:	4620      	mov	r0, r4
 8009208:	4629      	mov	r1, r5
 800920a:	f7f7 f847 	bl	800029c <__adddf3>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	f7f7 fb21 	bl	800085c <__aeabi_ddiv>
 800921a:	f04f 0a01 	mov.w	sl, #1
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
 8009222:	e765      	b.n	80090f0 <atan+0xc8>
 8009224:	4b47      	ldr	r3, [pc, #284]	@ (8009344 <atan+0x31c>)
 8009226:	429e      	cmp	r6, r3
 8009228:	d21c      	bcs.n	8009264 <atan+0x23c>
 800922a:	4b47      	ldr	r3, [pc, #284]	@ (8009348 <atan+0x320>)
 800922c:	2200      	movs	r2, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 f831 	bl	8000298 <__aeabi_dsub>
 8009236:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <atan+0x320>)
 8009238:	4606      	mov	r6, r0
 800923a:	460f      	mov	r7, r1
 800923c:	2200      	movs	r2, #0
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f9e1 	bl	8000608 <__aeabi_dmul>
 8009246:	4b3d      	ldr	r3, [pc, #244]	@ (800933c <atan+0x314>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f827 	bl	800029c <__adddf3>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 fb01 	bl	800085c <__aeabi_ddiv>
 800925a:	f04f 0a02 	mov.w	sl, #2
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	e745      	b.n	80090f0 <atan+0xc8>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	4938      	ldr	r1, [pc, #224]	@ (800934c <atan+0x324>)
 800926a:	2000      	movs	r0, #0
 800926c:	f7f7 faf6 	bl	800085c <__aeabi_ddiv>
 8009270:	f04f 0a03 	mov.w	sl, #3
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	e73a      	b.n	80090f0 <atan+0xc8>
 800927a:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <atan+0x328>)
 800927c:	4e35      	ldr	r6, [pc, #212]	@ (8009354 <atan+0x32c>)
 800927e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f807 	bl	8000298 <__aeabi_dsub>
 800928a:	4622      	mov	r2, r4
 800928c:	462b      	mov	r3, r5
 800928e:	f7f7 f803 	bl	8000298 <__aeabi_dsub>
 8009292:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800929e:	f7f6 fffb 	bl	8000298 <__aeabi_dsub>
 80092a2:	f1bb 0f00 	cmp.w	fp, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	f6bf aedc 	bge.w	8009066 <atan+0x3e>
 80092ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092b2:	461d      	mov	r5, r3
 80092b4:	e6d7      	b.n	8009066 <atan+0x3e>
 80092b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009328 <atan+0x300>)
 80092b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092bc:	e6d3      	b.n	8009066 <atan+0x3e>
 80092be:	bf00      	nop
 80092c0:	54442d18 	.word	0x54442d18
 80092c4:	3ff921fb 	.word	0x3ff921fb
 80092c8:	8800759c 	.word	0x8800759c
 80092cc:	7e37e43c 	.word	0x7e37e43c
 80092d0:	e322da11 	.word	0xe322da11
 80092d4:	3f90ad3a 	.word	0x3f90ad3a
 80092d8:	24760deb 	.word	0x24760deb
 80092dc:	3fa97b4b 	.word	0x3fa97b4b
 80092e0:	a0d03d51 	.word	0xa0d03d51
 80092e4:	3fb10d66 	.word	0x3fb10d66
 80092e8:	c54c206e 	.word	0xc54c206e
 80092ec:	3fb745cd 	.word	0x3fb745cd
 80092f0:	920083ff 	.word	0x920083ff
 80092f4:	3fc24924 	.word	0x3fc24924
 80092f8:	5555550d 	.word	0x5555550d
 80092fc:	3fd55555 	.word	0x3fd55555
 8009300:	2c6a6c2f 	.word	0x2c6a6c2f
 8009304:	bfa2b444 	.word	0xbfa2b444
 8009308:	52defd9a 	.word	0x52defd9a
 800930c:	3fadde2d 	.word	0x3fadde2d
 8009310:	af749a6d 	.word	0xaf749a6d
 8009314:	3fb3b0f2 	.word	0x3fb3b0f2
 8009318:	fe231671 	.word	0xfe231671
 800931c:	3fbc71c6 	.word	0x3fbc71c6
 8009320:	9998ebc4 	.word	0x9998ebc4
 8009324:	3fc99999 	.word	0x3fc99999
 8009328:	54442d18 	.word	0x54442d18
 800932c:	bff921fb 	.word	0xbff921fb
 8009330:	440fffff 	.word	0x440fffff
 8009334:	7ff00000 	.word	0x7ff00000
 8009338:	3fdbffff 	.word	0x3fdbffff
 800933c:	3ff00000 	.word	0x3ff00000
 8009340:	3ff2ffff 	.word	0x3ff2ffff
 8009344:	40038000 	.word	0x40038000
 8009348:	3ff80000 	.word	0x3ff80000
 800934c:	bff00000 	.word	0xbff00000
 8009350:	08009b18 	.word	0x08009b18
 8009354:	08009b38 	.word	0x08009b38

08009358 <fabs>:
 8009358:	ec51 0b10 	vmov	r0, r1, d0
 800935c:	4602      	mov	r2, r0
 800935e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009362:	ec43 2b10 	vmov	d0, r2, r3
 8009366:	4770      	bx	lr

08009368 <__ieee754_sqrt>:
 8009368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	4a68      	ldr	r2, [pc, #416]	@ (8009510 <__ieee754_sqrt+0x1a8>)
 800936e:	ec55 4b10 	vmov	r4, r5, d0
 8009372:	43aa      	bics	r2, r5
 8009374:	462b      	mov	r3, r5
 8009376:	4621      	mov	r1, r4
 8009378:	d110      	bne.n	800939c <__ieee754_sqrt+0x34>
 800937a:	4622      	mov	r2, r4
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	f7f6 ff86 	bl	800029c <__adddf3>
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	ec45 4b10 	vmov	d0, r4, r5
 8009398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	2d00      	cmp	r5, #0
 800939e:	dc0e      	bgt.n	80093be <__ieee754_sqrt+0x56>
 80093a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80093a4:	4322      	orrs	r2, r4
 80093a6:	d0f5      	beq.n	8009394 <__ieee754_sqrt+0x2c>
 80093a8:	b19d      	cbz	r5, 80093d2 <__ieee754_sqrt+0x6a>
 80093aa:	4622      	mov	r2, r4
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f6 ff72 	bl	8000298 <__aeabi_dsub>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	f7f7 fa50 	bl	800085c <__aeabi_ddiv>
 80093bc:	e7e8      	b.n	8009390 <__ieee754_sqrt+0x28>
 80093be:	152a      	asrs	r2, r5, #20
 80093c0:	d115      	bne.n	80093ee <__ieee754_sqrt+0x86>
 80093c2:	2000      	movs	r0, #0
 80093c4:	e009      	b.n	80093da <__ieee754_sqrt+0x72>
 80093c6:	0acb      	lsrs	r3, r1, #11
 80093c8:	3a15      	subs	r2, #21
 80093ca:	0549      	lsls	r1, r1, #21
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0fa      	beq.n	80093c6 <__ieee754_sqrt+0x5e>
 80093d0:	e7f7      	b.n	80093c2 <__ieee754_sqrt+0x5a>
 80093d2:	462a      	mov	r2, r5
 80093d4:	e7fa      	b.n	80093cc <__ieee754_sqrt+0x64>
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	3001      	adds	r0, #1
 80093da:	02dc      	lsls	r4, r3, #11
 80093dc:	d5fb      	bpl.n	80093d6 <__ieee754_sqrt+0x6e>
 80093de:	1e44      	subs	r4, r0, #1
 80093e0:	1b12      	subs	r2, r2, r4
 80093e2:	f1c0 0420 	rsb	r4, r0, #32
 80093e6:	fa21 f404 	lsr.w	r4, r1, r4
 80093ea:	4323      	orrs	r3, r4
 80093ec:	4081      	lsls	r1, r0
 80093ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80093f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093fa:	07d2      	lsls	r2, r2, #31
 80093fc:	bf5c      	itt	pl
 80093fe:	005b      	lslpl	r3, r3, #1
 8009400:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009404:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009408:	bf58      	it	pl
 800940a:	0049      	lslpl	r1, r1, #1
 800940c:	2600      	movs	r6, #0
 800940e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009412:	106d      	asrs	r5, r5, #1
 8009414:	0049      	lsls	r1, r1, #1
 8009416:	2016      	movs	r0, #22
 8009418:	4632      	mov	r2, r6
 800941a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800941e:	1917      	adds	r7, r2, r4
 8009420:	429f      	cmp	r7, r3
 8009422:	bfde      	ittt	le
 8009424:	193a      	addle	r2, r7, r4
 8009426:	1bdb      	suble	r3, r3, r7
 8009428:	1936      	addle	r6, r6, r4
 800942a:	0fcf      	lsrs	r7, r1, #31
 800942c:	3801      	subs	r0, #1
 800942e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009432:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009436:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800943a:	d1f0      	bne.n	800941e <__ieee754_sqrt+0xb6>
 800943c:	4604      	mov	r4, r0
 800943e:	2720      	movs	r7, #32
 8009440:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009444:	429a      	cmp	r2, r3
 8009446:	eb00 0e0c 	add.w	lr, r0, ip
 800944a:	db02      	blt.n	8009452 <__ieee754_sqrt+0xea>
 800944c:	d113      	bne.n	8009476 <__ieee754_sqrt+0x10e>
 800944e:	458e      	cmp	lr, r1
 8009450:	d811      	bhi.n	8009476 <__ieee754_sqrt+0x10e>
 8009452:	f1be 0f00 	cmp.w	lr, #0
 8009456:	eb0e 000c 	add.w	r0, lr, ip
 800945a:	da42      	bge.n	80094e2 <__ieee754_sqrt+0x17a>
 800945c:	2800      	cmp	r0, #0
 800945e:	db40      	blt.n	80094e2 <__ieee754_sqrt+0x17a>
 8009460:	f102 0801 	add.w	r8, r2, #1
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	458e      	cmp	lr, r1
 8009468:	bf88      	it	hi
 800946a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800946e:	eba1 010e 	sub.w	r1, r1, lr
 8009472:	4464      	add	r4, ip
 8009474:	4642      	mov	r2, r8
 8009476:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800947a:	3f01      	subs	r7, #1
 800947c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009480:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009484:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009488:	d1dc      	bne.n	8009444 <__ieee754_sqrt+0xdc>
 800948a:	4319      	orrs	r1, r3
 800948c:	d01b      	beq.n	80094c6 <__ieee754_sqrt+0x15e>
 800948e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009514 <__ieee754_sqrt+0x1ac>
 8009492:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009518 <__ieee754_sqrt+0x1b0>
 8009496:	e9da 0100 	ldrd	r0, r1, [sl]
 800949a:	e9db 2300 	ldrd	r2, r3, [fp]
 800949e:	f7f6 fefb 	bl	8000298 <__aeabi_dsub>
 80094a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f7 fb27 	bl	8000b00 <__aeabi_dcmple>
 80094b2:	b140      	cbz	r0, 80094c6 <__ieee754_sqrt+0x15e>
 80094b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80094b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80094bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80094c0:	d111      	bne.n	80094e6 <__ieee754_sqrt+0x17e>
 80094c2:	3601      	adds	r6, #1
 80094c4:	463c      	mov	r4, r7
 80094c6:	1072      	asrs	r2, r6, #1
 80094c8:	0863      	lsrs	r3, r4, #1
 80094ca:	07f1      	lsls	r1, r6, #31
 80094cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80094d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80094d4:	bf48      	it	mi
 80094d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80094da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80094de:	4618      	mov	r0, r3
 80094e0:	e756      	b.n	8009390 <__ieee754_sqrt+0x28>
 80094e2:	4690      	mov	r8, r2
 80094e4:	e7be      	b.n	8009464 <__ieee754_sqrt+0xfc>
 80094e6:	f7f6 fed9 	bl	800029c <__adddf3>
 80094ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f7 faf9 	bl	8000aec <__aeabi_dcmplt>
 80094fa:	b120      	cbz	r0, 8009506 <__ieee754_sqrt+0x19e>
 80094fc:	1ca0      	adds	r0, r4, #2
 80094fe:	bf08      	it	eq
 8009500:	3601      	addeq	r6, #1
 8009502:	3402      	adds	r4, #2
 8009504:	e7df      	b.n	80094c6 <__ieee754_sqrt+0x15e>
 8009506:	1c63      	adds	r3, r4, #1
 8009508:	f023 0401 	bic.w	r4, r3, #1
 800950c:	e7db      	b.n	80094c6 <__ieee754_sqrt+0x15e>
 800950e:	bf00      	nop
 8009510:	7ff00000 	.word	0x7ff00000
 8009514:	200001e0 	.word	0x200001e0
 8009518:	200001d8 	.word	0x200001d8
 800951c:	00000000 	.word	0x00000000

08009520 <__ieee754_atan2>:
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009524:	ec57 6b11 	vmov	r6, r7, d1
 8009528:	4273      	negs	r3, r6
 800952a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80096a8 <__ieee754_atan2+0x188>
 800952e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009532:	4333      	orrs	r3, r6
 8009534:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009538:	4543      	cmp	r3, r8
 800953a:	ec51 0b10 	vmov	r0, r1, d0
 800953e:	4635      	mov	r5, r6
 8009540:	d809      	bhi.n	8009556 <__ieee754_atan2+0x36>
 8009542:	4244      	negs	r4, r0
 8009544:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009548:	4304      	orrs	r4, r0
 800954a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800954e:	4544      	cmp	r4, r8
 8009550:	468e      	mov	lr, r1
 8009552:	4681      	mov	r9, r0
 8009554:	d907      	bls.n	8009566 <__ieee754_atan2+0x46>
 8009556:	4632      	mov	r2, r6
 8009558:	463b      	mov	r3, r7
 800955a:	f7f6 fe9f 	bl	800029c <__adddf3>
 800955e:	ec41 0b10 	vmov	d0, r0, r1
 8009562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009566:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800956a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800956e:	4334      	orrs	r4, r6
 8009570:	d103      	bne.n	800957a <__ieee754_atan2+0x5a>
 8009572:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009576:	f7ff bd57 	b.w	8009028 <atan>
 800957a:	17bc      	asrs	r4, r7, #30
 800957c:	f004 0402 	and.w	r4, r4, #2
 8009580:	ea53 0909 	orrs.w	r9, r3, r9
 8009584:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009588:	d107      	bne.n	800959a <__ieee754_atan2+0x7a>
 800958a:	2c02      	cmp	r4, #2
 800958c:	d05f      	beq.n	800964e <__ieee754_atan2+0x12e>
 800958e:	2c03      	cmp	r4, #3
 8009590:	d1e5      	bne.n	800955e <__ieee754_atan2+0x3e>
 8009592:	a141      	add	r1, pc, #260	@ (adr r1, 8009698 <__ieee754_atan2+0x178>)
 8009594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009598:	e7e1      	b.n	800955e <__ieee754_atan2+0x3e>
 800959a:	4315      	orrs	r5, r2
 800959c:	d106      	bne.n	80095ac <__ieee754_atan2+0x8c>
 800959e:	f1be 0f00 	cmp.w	lr, #0
 80095a2:	da5f      	bge.n	8009664 <__ieee754_atan2+0x144>
 80095a4:	a13e      	add	r1, pc, #248	@ (adr r1, 80096a0 <__ieee754_atan2+0x180>)
 80095a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095aa:	e7d8      	b.n	800955e <__ieee754_atan2+0x3e>
 80095ac:	4542      	cmp	r2, r8
 80095ae:	d10f      	bne.n	80095d0 <__ieee754_atan2+0xb0>
 80095b0:	4293      	cmp	r3, r2
 80095b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80095b6:	d107      	bne.n	80095c8 <__ieee754_atan2+0xa8>
 80095b8:	2c02      	cmp	r4, #2
 80095ba:	d84c      	bhi.n	8009656 <__ieee754_atan2+0x136>
 80095bc:	4b34      	ldr	r3, [pc, #208]	@ (8009690 <__ieee754_atan2+0x170>)
 80095be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095c6:	e7ca      	b.n	800955e <__ieee754_atan2+0x3e>
 80095c8:	2c02      	cmp	r4, #2
 80095ca:	d848      	bhi.n	800965e <__ieee754_atan2+0x13e>
 80095cc:	4b31      	ldr	r3, [pc, #196]	@ (8009694 <__ieee754_atan2+0x174>)
 80095ce:	e7f6      	b.n	80095be <__ieee754_atan2+0x9e>
 80095d0:	4543      	cmp	r3, r8
 80095d2:	d0e4      	beq.n	800959e <__ieee754_atan2+0x7e>
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80095da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095de:	da1e      	bge.n	800961e <__ieee754_atan2+0xfe>
 80095e0:	2f00      	cmp	r7, #0
 80095e2:	da01      	bge.n	80095e8 <__ieee754_atan2+0xc8>
 80095e4:	323c      	adds	r2, #60	@ 0x3c
 80095e6:	db1e      	blt.n	8009626 <__ieee754_atan2+0x106>
 80095e8:	4632      	mov	r2, r6
 80095ea:	463b      	mov	r3, r7
 80095ec:	f7f7 f936 	bl	800085c <__aeabi_ddiv>
 80095f0:	ec41 0b10 	vmov	d0, r0, r1
 80095f4:	f7ff feb0 	bl	8009358 <fabs>
 80095f8:	f7ff fd16 	bl	8009028 <atan>
 80095fc:	ec51 0b10 	vmov	r0, r1, d0
 8009600:	2c01      	cmp	r4, #1
 8009602:	d013      	beq.n	800962c <__ieee754_atan2+0x10c>
 8009604:	2c02      	cmp	r4, #2
 8009606:	d015      	beq.n	8009634 <__ieee754_atan2+0x114>
 8009608:	2c00      	cmp	r4, #0
 800960a:	d0a8      	beq.n	800955e <__ieee754_atan2+0x3e>
 800960c:	a318      	add	r3, pc, #96	@ (adr r3, 8009670 <__ieee754_atan2+0x150>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	f7f6 fe41 	bl	8000298 <__aeabi_dsub>
 8009616:	a318      	add	r3, pc, #96	@ (adr r3, 8009678 <__ieee754_atan2+0x158>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	e014      	b.n	8009648 <__ieee754_atan2+0x128>
 800961e:	a118      	add	r1, pc, #96	@ (adr r1, 8009680 <__ieee754_atan2+0x160>)
 8009620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009624:	e7ec      	b.n	8009600 <__ieee754_atan2+0xe0>
 8009626:	2000      	movs	r0, #0
 8009628:	2100      	movs	r1, #0
 800962a:	e7e9      	b.n	8009600 <__ieee754_atan2+0xe0>
 800962c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009630:	4619      	mov	r1, r3
 8009632:	e794      	b.n	800955e <__ieee754_atan2+0x3e>
 8009634:	a30e      	add	r3, pc, #56	@ (adr r3, 8009670 <__ieee754_atan2+0x150>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fe2d 	bl	8000298 <__aeabi_dsub>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	a10d      	add	r1, pc, #52	@ (adr r1, 8009678 <__ieee754_atan2+0x158>)
 8009644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009648:	f7f6 fe26 	bl	8000298 <__aeabi_dsub>
 800964c:	e787      	b.n	800955e <__ieee754_atan2+0x3e>
 800964e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009678 <__ieee754_atan2+0x158>)
 8009650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009654:	e783      	b.n	800955e <__ieee754_atan2+0x3e>
 8009656:	a10c      	add	r1, pc, #48	@ (adr r1, 8009688 <__ieee754_atan2+0x168>)
 8009658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965c:	e77f      	b.n	800955e <__ieee754_atan2+0x3e>
 800965e:	2000      	movs	r0, #0
 8009660:	2100      	movs	r1, #0
 8009662:	e77c      	b.n	800955e <__ieee754_atan2+0x3e>
 8009664:	a106      	add	r1, pc, #24	@ (adr r1, 8009680 <__ieee754_atan2+0x160>)
 8009666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966a:	e778      	b.n	800955e <__ieee754_atan2+0x3e>
 800966c:	f3af 8000 	nop.w
 8009670:	33145c07 	.word	0x33145c07
 8009674:	3ca1a626 	.word	0x3ca1a626
 8009678:	54442d18 	.word	0x54442d18
 800967c:	400921fb 	.word	0x400921fb
 8009680:	54442d18 	.word	0x54442d18
 8009684:	3ff921fb 	.word	0x3ff921fb
 8009688:	54442d18 	.word	0x54442d18
 800968c:	3fe921fb 	.word	0x3fe921fb
 8009690:	08009b70 	.word	0x08009b70
 8009694:	08009b58 	.word	0x08009b58
 8009698:	54442d18 	.word	0x54442d18
 800969c:	c00921fb 	.word	0xc00921fb
 80096a0:	54442d18 	.word	0x54442d18
 80096a4:	bff921fb 	.word	0xbff921fb
 80096a8:	7ff00000 	.word	0x7ff00000

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
=======
 8004de2:	d1c2      	bne.n	8004d6a <_printf_float+0x2f2>
 8004de4:	e6a3      	b.n	8004b2e <_printf_float+0xb6>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	9206      	str	r2, [sp, #24]
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae9c 	beq.w	8004b2e <_printf_float+0xb6>
 8004df6:	9a06      	ldr	r2, [sp, #24]
 8004df8:	f10b 0b01 	add.w	fp, fp, #1
 8004dfc:	e7bb      	b.n	8004d76 <_printf_float+0x2fe>
 8004dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d1c0      	bne.n	8004d8e <_printf_float+0x316>
 8004e0c:	e68f      	b.n	8004b2e <_printf_float+0xb6>
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	464b      	mov	r3, r9
 8004e12:	4442      	add	r2, r8
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1c3      	bne.n	8004da6 <_printf_float+0x32e>
 8004e1e:	e686      	b.n	8004b2e <_printf_float+0xb6>
 8004e20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e24:	f1ba 0f01 	cmp.w	sl, #1
 8004e28:	dc01      	bgt.n	8004e2e <_printf_float+0x3b6>
 8004e2a:	07db      	lsls	r3, r3, #31
 8004e2c:	d536      	bpl.n	8004e9c <_printf_float+0x424>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4642      	mov	r2, r8
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae78 	beq.w	8004b2e <_printf_float+0xb6>
 8004e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae70 	beq.w	8004b2e <_printf_float+0xb6>
 8004e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e52:	2200      	movs	r2, #0
 8004e54:	2300      	movs	r3, #0
 8004e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e5a:	f7fb fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e5e:	b9c0      	cbnz	r0, 8004e92 <_printf_float+0x41a>
 8004e60:	4653      	mov	r3, sl
 8004e62:	f108 0201 	add.w	r2, r8, #1
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d10c      	bne.n	8004e8a <_printf_float+0x412>
 8004e70:	e65d      	b.n	8004b2e <_printf_float+0xb6>
 8004e72:	2301      	movs	r3, #1
 8004e74:	465a      	mov	r2, fp
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae56 	beq.w	8004b2e <_printf_float+0xb6>
 8004e82:	f108 0801 	add.w	r8, r8, #1
 8004e86:	45d0      	cmp	r8, sl
 8004e88:	dbf3      	blt.n	8004e72 <_printf_float+0x3fa>
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e90:	e6df      	b.n	8004c52 <_printf_float+0x1da>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	f104 0b1a 	add.w	fp, r4, #26
 8004e9a:	e7f4      	b.n	8004e86 <_printf_float+0x40e>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	e7e1      	b.n	8004e66 <_printf_float+0x3ee>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	464a      	mov	r2, r9
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f ae3e 	beq.w	8004b2e <_printf_float+0xb6>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	68e3      	ldr	r3, [r4, #12]
 8004eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eba:	1a5b      	subs	r3, r3, r1
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	dcf0      	bgt.n	8004ea2 <_printf_float+0x42a>
 8004ec0:	e6fc      	b.n	8004cbc <_printf_float+0x244>
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	f104 0919 	add.w	r9, r4, #25
 8004eca:	e7f4      	b.n	8004eb6 <_printf_float+0x43e>

08004ecc <_printf_common>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	4698      	mov	r8, r3
 8004ed4:	688a      	ldr	r2, [r1, #8]
 8004ed6:	690b      	ldr	r3, [r1, #16]
 8004ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bfb8      	it	lt
 8004ee0:	4613      	movlt	r3, r2
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ee8:	4607      	mov	r7, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	b10a      	cbz	r2, 8004ef2 <_printf_common+0x26>
 8004eee:	3301      	adds	r3, #1
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	0699      	lsls	r1, r3, #26
 8004ef6:	bf42      	ittt	mi
 8004ef8:	6833      	ldrmi	r3, [r6, #0]
 8004efa:	3302      	addmi	r3, #2
 8004efc:	6033      	strmi	r3, [r6, #0]
 8004efe:	6825      	ldr	r5, [r4, #0]
 8004f00:	f015 0506 	ands.w	r5, r5, #6
 8004f04:	d106      	bne.n	8004f14 <_printf_common+0x48>
 8004f06:	f104 0a19 	add.w	sl, r4, #25
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	6832      	ldr	r2, [r6, #0]
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dc26      	bgt.n	8004f62 <_printf_common+0x96>
 8004f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	3b00      	subs	r3, #0
 8004f1c:	bf18      	it	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	0692      	lsls	r2, r2, #26
 8004f22:	d42b      	bmi.n	8004f7c <_printf_common+0xb0>
 8004f24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f28:	4641      	mov	r1, r8
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c8      	blx	r9
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d01e      	beq.n	8004f70 <_printf_common+0xa4>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	f003 0306 	and.w	r3, r3, #6
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	bf02      	ittt	eq
 8004f3e:	68e5      	ldreq	r5, [r4, #12]
 8004f40:	6833      	ldreq	r3, [r6, #0]
 8004f42:	1aed      	subeq	r5, r5, r3
 8004f44:	68a3      	ldr	r3, [r4, #8]
 8004f46:	bf0c      	ite	eq
 8004f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f4c:	2500      	movne	r5, #0
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	bfc4      	itt	gt
 8004f52:	1a9b      	subgt	r3, r3, r2
 8004f54:	18ed      	addgt	r5, r5, r3
 8004f56:	2600      	movs	r6, #0
 8004f58:	341a      	adds	r4, #26
 8004f5a:	42b5      	cmp	r5, r6
 8004f5c:	d11a      	bne.n	8004f94 <_printf_common+0xc8>
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e008      	b.n	8004f74 <_printf_common+0xa8>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4652      	mov	r2, sl
 8004f66:	4641      	mov	r1, r8
 8004f68:	4638      	mov	r0, r7
 8004f6a:	47c8      	blx	r9
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d103      	bne.n	8004f78 <_printf_common+0xac>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	3501      	adds	r5, #1
 8004f7a:	e7c6      	b.n	8004f0a <_printf_common+0x3e>
 8004f7c:	18e1      	adds	r1, r4, r3
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	2030      	movs	r0, #48	@ 0x30
 8004f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f86:	4422      	add	r2, r4
 8004f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f90:	3302      	adds	r3, #2
 8004f92:	e7c7      	b.n	8004f24 <_printf_common+0x58>
 8004f94:	2301      	movs	r3, #1
 8004f96:	4622      	mov	r2, r4
 8004f98:	4641      	mov	r1, r8
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c8      	blx	r9
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d0e6      	beq.n	8004f70 <_printf_common+0xa4>
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7d9      	b.n	8004f5a <_printf_common+0x8e>
	...

08004fa8 <_printf_i>:
 8004fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	7e0f      	ldrb	r7, [r1, #24]
 8004fae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fb0:	2f78      	cmp	r7, #120	@ 0x78
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	469a      	mov	sl, r3
 8004fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fbe:	d807      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fc0:	2f62      	cmp	r7, #98	@ 0x62
 8004fc2:	d80a      	bhi.n	8004fda <_printf_i+0x32>
 8004fc4:	2f00      	cmp	r7, #0
 8004fc6:	f000 80d2 	beq.w	800516e <_printf_i+0x1c6>
 8004fca:	2f58      	cmp	r7, #88	@ 0x58
 8004fcc:	f000 80b9 	beq.w	8005142 <_printf_i+0x19a>
 8004fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fd8:	e03a      	b.n	8005050 <_printf_i+0xa8>
 8004fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fde:	2b15      	cmp	r3, #21
 8004fe0:	d8f6      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8004fe8 <_printf_i+0x40>)
 8004fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe8:	08005041 	.word	0x08005041
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08004fd1 	.word	0x08004fd1
 8004ff4:	08004fd1 	.word	0x08004fd1
 8004ff8:	08004fd1 	.word	0x08004fd1
 8004ffc:	08004fd1 	.word	0x08004fd1
 8005000:	08005055 	.word	0x08005055
 8005004:	08004fd1 	.word	0x08004fd1
 8005008:	08004fd1 	.word	0x08004fd1
 800500c:	08004fd1 	.word	0x08004fd1
 8005010:	08004fd1 	.word	0x08004fd1
 8005014:	08005155 	.word	0x08005155
 8005018:	0800507f 	.word	0x0800507f
 800501c:	0800510f 	.word	0x0800510f
 8005020:	08004fd1 	.word	0x08004fd1
 8005024:	08004fd1 	.word	0x08004fd1
 8005028:	08005177 	.word	0x08005177
 800502c:	08004fd1 	.word	0x08004fd1
 8005030:	0800507f 	.word	0x0800507f
 8005034:	08004fd1 	.word	0x08004fd1
 8005038:	08004fd1 	.word	0x08004fd1
 800503c:	08005117 	.word	0x08005117
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	1d1a      	adds	r2, r3, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6032      	str	r2, [r6, #0]
 8005048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800504c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005050:	2301      	movs	r3, #1
 8005052:	e09d      	b.n	8005190 <_printf_i+0x1e8>
 8005054:	6833      	ldr	r3, [r6, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6031      	str	r1, [r6, #0]
 800505c:	0606      	lsls	r6, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xbc>
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	e003      	b.n	800506c <_printf_i+0xc4>
 8005064:	0645      	lsls	r5, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xb8>
 8005068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800506c:	2d00      	cmp	r5, #0
 800506e:	da03      	bge.n	8005078 <_printf_i+0xd0>
 8005070:	232d      	movs	r3, #45	@ 0x2d
 8005072:	426d      	negs	r5, r5
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005078:	4859      	ldr	r0, [pc, #356]	@ (80051e0 <_printf_i+0x238>)
 800507a:	230a      	movs	r3, #10
 800507c:	e011      	b.n	80050a2 <_printf_i+0xfa>
 800507e:	6821      	ldr	r1, [r4, #0]
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	0608      	lsls	r0, r1, #24
 8005084:	f853 5b04 	ldr.w	r5, [r3], #4
 8005088:	d402      	bmi.n	8005090 <_printf_i+0xe8>
 800508a:	0649      	lsls	r1, r1, #25
 800508c:	bf48      	it	mi
 800508e:	b2ad      	uxthmi	r5, r5
 8005090:	2f6f      	cmp	r7, #111	@ 0x6f
 8005092:	4853      	ldr	r0, [pc, #332]	@ (80051e0 <_printf_i+0x238>)
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	bf14      	ite	ne
 8005098:	230a      	movne	r3, #10
 800509a:	2308      	moveq	r3, #8
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050a2:	6866      	ldr	r6, [r4, #4]
 80050a4:	60a6      	str	r6, [r4, #8]
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	bfa2      	ittt	ge
 80050aa:	6821      	ldrge	r1, [r4, #0]
 80050ac:	f021 0104 	bicge.w	r1, r1, #4
 80050b0:	6021      	strge	r1, [r4, #0]
 80050b2:	b90d      	cbnz	r5, 80050b8 <_printf_i+0x110>
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	d04b      	beq.n	8005150 <_printf_i+0x1a8>
 80050b8:	4616      	mov	r6, r2
 80050ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80050be:	fb03 5711 	mls	r7, r3, r1, r5
 80050c2:	5dc7      	ldrb	r7, [r0, r7]
 80050c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c8:	462f      	mov	r7, r5
 80050ca:	42bb      	cmp	r3, r7
 80050cc:	460d      	mov	r5, r1
 80050ce:	d9f4      	bls.n	80050ba <_printf_i+0x112>
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d10b      	bne.n	80050ec <_printf_i+0x144>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	07df      	lsls	r7, r3, #31
 80050d8:	d508      	bpl.n	80050ec <_printf_i+0x144>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	4299      	cmp	r1, r3
 80050e0:	bfde      	ittt	le
 80050e2:	2330      	movle	r3, #48	@ 0x30
 80050e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ec:	1b92      	subs	r2, r2, r6
 80050ee:	6122      	str	r2, [r4, #16]
 80050f0:	f8cd a000 	str.w	sl, [sp]
 80050f4:	464b      	mov	r3, r9
 80050f6:	aa03      	add	r2, sp, #12
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fee6 	bl	8004ecc <_printf_common>
 8005100:	3001      	adds	r0, #1
 8005102:	d14a      	bne.n	800519a <_printf_i+0x1f2>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b004      	add	sp, #16
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	4833      	ldr	r0, [pc, #204]	@ (80051e4 <_printf_i+0x23c>)
 8005118:	2778      	movs	r7, #120	@ 0x78
 800511a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	6831      	ldr	r1, [r6, #0]
 8005122:	061f      	lsls	r7, r3, #24
 8005124:	f851 5b04 	ldr.w	r5, [r1], #4
 8005128:	d402      	bmi.n	8005130 <_printf_i+0x188>
 800512a:	065f      	lsls	r7, r3, #25
 800512c:	bf48      	it	mi
 800512e:	b2ad      	uxthmi	r5, r5
 8005130:	6031      	str	r1, [r6, #0]
 8005132:	07d9      	lsls	r1, r3, #31
 8005134:	bf44      	itt	mi
 8005136:	f043 0320 	orrmi.w	r3, r3, #32
 800513a:	6023      	strmi	r3, [r4, #0]
 800513c:	b11d      	cbz	r5, 8005146 <_printf_i+0x19e>
 800513e:	2310      	movs	r3, #16
 8005140:	e7ac      	b.n	800509c <_printf_i+0xf4>
 8005142:	4827      	ldr	r0, [pc, #156]	@ (80051e0 <_printf_i+0x238>)
 8005144:	e7e9      	b.n	800511a <_printf_i+0x172>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f023 0320 	bic.w	r3, r3, #32
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	e7f6      	b.n	800513e <_printf_i+0x196>
 8005150:	4616      	mov	r6, r2
 8005152:	e7bd      	b.n	80050d0 <_printf_i+0x128>
 8005154:	6833      	ldr	r3, [r6, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	6961      	ldr	r1, [r4, #20]
 800515a:	1d18      	adds	r0, r3, #4
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	062e      	lsls	r6, r5, #24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	d501      	bpl.n	8005168 <_printf_i+0x1c0>
 8005164:	6019      	str	r1, [r3, #0]
 8005166:	e002      	b.n	800516e <_printf_i+0x1c6>
 8005168:	0668      	lsls	r0, r5, #25
 800516a:	d5fb      	bpl.n	8005164 <_printf_i+0x1bc>
 800516c:	8019      	strh	r1, [r3, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	4616      	mov	r6, r2
 8005174:	e7bc      	b.n	80050f0 <_printf_i+0x148>
 8005176:	6833      	ldr	r3, [r6, #0]
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	6032      	str	r2, [r6, #0]
 800517c:	681e      	ldr	r6, [r3, #0]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	2100      	movs	r1, #0
 8005182:	4630      	mov	r0, r6
 8005184:	f7fb f82c 	bl	80001e0 <memchr>
 8005188:	b108      	cbz	r0, 800518e <_printf_i+0x1e6>
 800518a:	1b80      	subs	r0, r0, r6
 800518c:	6060      	str	r0, [r4, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	2300      	movs	r3, #0
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005198:	e7aa      	b.n	80050f0 <_printf_i+0x148>
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	4632      	mov	r2, r6
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d0ad      	beq.n	8005104 <_printf_i+0x15c>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	079b      	lsls	r3, r3, #30
 80051ac:	d413      	bmi.n	80051d6 <_printf_i+0x22e>
 80051ae:	68e0      	ldr	r0, [r4, #12]
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	4298      	cmp	r0, r3
 80051b4:	bfb8      	it	lt
 80051b6:	4618      	movlt	r0, r3
 80051b8:	e7a6      	b.n	8005108 <_printf_i+0x160>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4632      	mov	r2, r6
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d09d      	beq.n	8005104 <_printf_i+0x15c>
 80051c8:	3501      	adds	r5, #1
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	9903      	ldr	r1, [sp, #12]
 80051ce:	1a5b      	subs	r3, r3, r1
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dcf2      	bgt.n	80051ba <_printf_i+0x212>
 80051d4:	e7eb      	b.n	80051ae <_printf_i+0x206>
 80051d6:	2500      	movs	r5, #0
 80051d8:	f104 0619 	add.w	r6, r4, #25
 80051dc:	e7f5      	b.n	80051ca <_printf_i+0x222>
 80051de:	bf00      	nop
 80051e0:	08007962 	.word	0x08007962
 80051e4:	08007973 	.word	0x08007973

080051e8 <std>:
 80051e8:	2300      	movs	r3, #0
 80051ea:	b510      	push	{r4, lr}
 80051ec:	4604      	mov	r4, r0
 80051ee:	e9c0 3300 	strd	r3, r3, [r0]
 80051f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051f6:	6083      	str	r3, [r0, #8]
 80051f8:	8181      	strh	r1, [r0, #12]
 80051fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80051fc:	81c2      	strh	r2, [r0, #14]
 80051fe:	6183      	str	r3, [r0, #24]
 8005200:	4619      	mov	r1, r3
 8005202:	2208      	movs	r2, #8
 8005204:	305c      	adds	r0, #92	@ 0x5c
 8005206:	f000 f8f4 	bl	80053f2 <memset>
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <std+0x58>)
 800520c:	6263      	str	r3, [r4, #36]	@ 0x24
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <std+0x5c>)
 8005210:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <std+0x60>)
 8005214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <std+0x64>)
 8005218:	6323      	str	r3, [r4, #48]	@ 0x30
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <std+0x68>)
 800521c:	6224      	str	r4, [r4, #32]
 800521e:	429c      	cmp	r4, r3
 8005220:	d006      	beq.n	8005230 <std+0x48>
 8005222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005226:	4294      	cmp	r4, r2
 8005228:	d002      	beq.n	8005230 <std+0x48>
 800522a:	33d0      	adds	r3, #208	@ 0xd0
 800522c:	429c      	cmp	r4, r3
 800522e:	d105      	bne.n	800523c <std+0x54>
 8005230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	f000 b958 	b.w	80054ec <__retarget_lock_init_recursive>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop
 8005240:	0800536d 	.word	0x0800536d
 8005244:	0800538f 	.word	0x0800538f
 8005248:	080053c7 	.word	0x080053c7
 800524c:	080053eb 	.word	0x080053eb
 8005250:	2000071c 	.word	0x2000071c

08005254 <stdio_exit_handler>:
 8005254:	4a02      	ldr	r2, [pc, #8]	@ (8005260 <stdio_exit_handler+0xc>)
 8005256:	4903      	ldr	r1, [pc, #12]	@ (8005264 <stdio_exit_handler+0x10>)
 8005258:	4803      	ldr	r0, [pc, #12]	@ (8005268 <stdio_exit_handler+0x14>)
 800525a:	f000 b869 	b.w	8005330 <_fwalk_sglue>
 800525e:	bf00      	nop
 8005260:	2000000c 	.word	0x2000000c
 8005264:	08006b9d 	.word	0x08006b9d
 8005268:	2000001c 	.word	0x2000001c

0800526c <cleanup_stdio>:
 800526c:	6841      	ldr	r1, [r0, #4]
 800526e:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <cleanup_stdio+0x34>)
 8005270:	4299      	cmp	r1, r3
 8005272:	b510      	push	{r4, lr}
 8005274:	4604      	mov	r4, r0
 8005276:	d001      	beq.n	800527c <cleanup_stdio+0x10>
 8005278:	f001 fc90 	bl	8006b9c <_fflush_r>
 800527c:	68a1      	ldr	r1, [r4, #8]
 800527e:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <cleanup_stdio+0x38>)
 8005280:	4299      	cmp	r1, r3
 8005282:	d002      	beq.n	800528a <cleanup_stdio+0x1e>
 8005284:	4620      	mov	r0, r4
 8005286:	f001 fc89 	bl	8006b9c <_fflush_r>
 800528a:	68e1      	ldr	r1, [r4, #12]
 800528c:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <cleanup_stdio+0x3c>)
 800528e:	4299      	cmp	r1, r3
 8005290:	d004      	beq.n	800529c <cleanup_stdio+0x30>
 8005292:	4620      	mov	r0, r4
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f001 bc80 	b.w	8006b9c <_fflush_r>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	bf00      	nop
 80052a0:	2000071c 	.word	0x2000071c
 80052a4:	20000784 	.word	0x20000784
 80052a8:	200007ec 	.word	0x200007ec

080052ac <global_stdio_init.part.0>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <global_stdio_init.part.0+0x30>)
 80052b0:	4c0b      	ldr	r4, [pc, #44]	@ (80052e0 <global_stdio_init.part.0+0x34>)
 80052b2:	4a0c      	ldr	r2, [pc, #48]	@ (80052e4 <global_stdio_init.part.0+0x38>)
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	4620      	mov	r0, r4
 80052b8:	2200      	movs	r2, #0
 80052ba:	2104      	movs	r1, #4
 80052bc:	f7ff ff94 	bl	80051e8 <std>
 80052c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052c4:	2201      	movs	r2, #1
 80052c6:	2109      	movs	r1, #9
 80052c8:	f7ff ff8e 	bl	80051e8 <std>
 80052cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052d0:	2202      	movs	r2, #2
 80052d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d6:	2112      	movs	r1, #18
 80052d8:	f7ff bf86 	b.w	80051e8 <std>
 80052dc:	20000854 	.word	0x20000854
 80052e0:	2000071c 	.word	0x2000071c
 80052e4:	08005255 	.word	0x08005255

080052e8 <__sfp_lock_acquire>:
 80052e8:	4801      	ldr	r0, [pc, #4]	@ (80052f0 <__sfp_lock_acquire+0x8>)
 80052ea:	f000 b900 	b.w	80054ee <__retarget_lock_acquire_recursive>
 80052ee:	bf00      	nop
 80052f0:	2000085d 	.word	0x2000085d

080052f4 <__sfp_lock_release>:
 80052f4:	4801      	ldr	r0, [pc, #4]	@ (80052fc <__sfp_lock_release+0x8>)
 80052f6:	f000 b8fb 	b.w	80054f0 <__retarget_lock_release_recursive>
 80052fa:	bf00      	nop
 80052fc:	2000085d 	.word	0x2000085d

08005300 <__sinit>:
 8005300:	b510      	push	{r4, lr}
 8005302:	4604      	mov	r4, r0
 8005304:	f7ff fff0 	bl	80052e8 <__sfp_lock_acquire>
 8005308:	6a23      	ldr	r3, [r4, #32]
 800530a:	b11b      	cbz	r3, 8005314 <__sinit+0x14>
 800530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005310:	f7ff bff0 	b.w	80052f4 <__sfp_lock_release>
 8005314:	4b04      	ldr	r3, [pc, #16]	@ (8005328 <__sinit+0x28>)
 8005316:	6223      	str	r3, [r4, #32]
 8005318:	4b04      	ldr	r3, [pc, #16]	@ (800532c <__sinit+0x2c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f5      	bne.n	800530c <__sinit+0xc>
 8005320:	f7ff ffc4 	bl	80052ac <global_stdio_init.part.0>
 8005324:	e7f2      	b.n	800530c <__sinit+0xc>
 8005326:	bf00      	nop
 8005328:	0800526d 	.word	0x0800526d
 800532c:	20000854 	.word	0x20000854

08005330 <_fwalk_sglue>:
 8005330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005334:	4607      	mov	r7, r0
 8005336:	4688      	mov	r8, r1
 8005338:	4614      	mov	r4, r2
 800533a:	2600      	movs	r6, #0
 800533c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005340:	f1b9 0901 	subs.w	r9, r9, #1
 8005344:	d505      	bpl.n	8005352 <_fwalk_sglue+0x22>
 8005346:	6824      	ldr	r4, [r4, #0]
 8005348:	2c00      	cmp	r4, #0
 800534a:	d1f7      	bne.n	800533c <_fwalk_sglue+0xc>
 800534c:	4630      	mov	r0, r6
 800534e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005352:	89ab      	ldrh	r3, [r5, #12]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d907      	bls.n	8005368 <_fwalk_sglue+0x38>
 8005358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800535c:	3301      	adds	r3, #1
 800535e:	d003      	beq.n	8005368 <_fwalk_sglue+0x38>
 8005360:	4629      	mov	r1, r5
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	4306      	orrs	r6, r0
 8005368:	3568      	adds	r5, #104	@ 0x68
 800536a:	e7e9      	b.n	8005340 <_fwalk_sglue+0x10>

0800536c <__sread>:
 800536c:	b510      	push	{r4, lr}
 800536e:	460c      	mov	r4, r1
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	f000 f86c 	bl	8005450 <_read_r>
 8005378:	2800      	cmp	r0, #0
 800537a:	bfab      	itete	ge
 800537c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800537e:	89a3      	ldrhlt	r3, [r4, #12]
 8005380:	181b      	addge	r3, r3, r0
 8005382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005386:	bfac      	ite	ge
 8005388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800538a:	81a3      	strhlt	r3, [r4, #12]
 800538c:	bd10      	pop	{r4, pc}

0800538e <__swrite>:
 800538e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	461f      	mov	r7, r3
 8005394:	898b      	ldrh	r3, [r1, #12]
 8005396:	05db      	lsls	r3, r3, #23
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	4616      	mov	r6, r2
 800539e:	d505      	bpl.n	80053ac <__swrite+0x1e>
 80053a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a4:	2302      	movs	r3, #2
 80053a6:	2200      	movs	r2, #0
 80053a8:	f000 f840 	bl	800542c <_lseek_r>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	4632      	mov	r2, r6
 80053ba:	463b      	mov	r3, r7
 80053bc:	4628      	mov	r0, r5
 80053be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c2:	f000 b857 	b.w	8005474 <_write_r>

080053c6 <__sseek>:
 80053c6:	b510      	push	{r4, lr}
 80053c8:	460c      	mov	r4, r1
 80053ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ce:	f000 f82d 	bl	800542c <_lseek_r>
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	bf15      	itete	ne
 80053d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053e2:	81a3      	strheq	r3, [r4, #12]
 80053e4:	bf18      	it	ne
 80053e6:	81a3      	strhne	r3, [r4, #12]
 80053e8:	bd10      	pop	{r4, pc}

080053ea <__sclose>:
 80053ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ee:	f000 b80d 	b.w	800540c <_close_r>

080053f2 <memset>:
 80053f2:	4402      	add	r2, r0
 80053f4:	4603      	mov	r3, r0
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d100      	bne.n	80053fc <memset+0xa>
 80053fa:	4770      	bx	lr
 80053fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005400:	e7f9      	b.n	80053f6 <memset+0x4>
	...

08005404 <_localeconv_r>:
 8005404:	4800      	ldr	r0, [pc, #0]	@ (8005408 <_localeconv_r+0x4>)
 8005406:	4770      	bx	lr
 8005408:	20000158 	.word	0x20000158

0800540c <_close_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d06      	ldr	r5, [pc, #24]	@ (8005428 <_close_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4604      	mov	r4, r0
 8005414:	4608      	mov	r0, r1
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	f7fc fd93 	bl	8001f42 <_close>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_close_r+0x1a>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_close_r+0x1a>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	20000858 	.word	0x20000858

0800542c <_lseek_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4d07      	ldr	r5, [pc, #28]	@ (800544c <_lseek_r+0x20>)
 8005430:	4604      	mov	r4, r0
 8005432:	4608      	mov	r0, r1
 8005434:	4611      	mov	r1, r2
 8005436:	2200      	movs	r2, #0
 8005438:	602a      	str	r2, [r5, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f7fc fda8 	bl	8001f90 <_lseek>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_lseek_r+0x1e>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_lseek_r+0x1e>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20000858 	.word	0x20000858

08005450 <_read_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d07      	ldr	r5, [pc, #28]	@ (8005470 <_read_r+0x20>)
 8005454:	4604      	mov	r4, r0
 8005456:	4608      	mov	r0, r1
 8005458:	4611      	mov	r1, r2
 800545a:	2200      	movs	r2, #0
 800545c:	602a      	str	r2, [r5, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	f7fc fd36 	bl	8001ed0 <_read>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_read_r+0x1e>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_read_r+0x1e>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	20000858 	.word	0x20000858

08005474 <_write_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d07      	ldr	r5, [pc, #28]	@ (8005494 <_write_r+0x20>)
 8005478:	4604      	mov	r4, r0
 800547a:	4608      	mov	r0, r1
 800547c:	4611      	mov	r1, r2
 800547e:	2200      	movs	r2, #0
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fc fd41 	bl	8001f0a <_write>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_write_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_write_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000858 	.word	0x20000858

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	@ (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000018 	.word	0x20000018

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	@ (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	@ (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	@ (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	@ (80054e8 <__libc_init_array+0x44>)
 80054b8:	f002 fa30 	bl	800791c <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08007d38 	.word	0x08007d38
 80054e0:	08007d38 	.word	0x08007d38
 80054e4:	08007d38 	.word	0x08007d38
 80054e8:	08007d3c 	.word	0x08007d3c

080054ec <__retarget_lock_init_recursive>:
 80054ec:	4770      	bx	lr

080054ee <__retarget_lock_acquire_recursive>:
 80054ee:	4770      	bx	lr

080054f0 <__retarget_lock_release_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <quorem>:
 80054f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	6903      	ldr	r3, [r0, #16]
 80054f8:	690c      	ldr	r4, [r1, #16]
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	4607      	mov	r7, r0
 80054fe:	db7e      	blt.n	80055fe <quorem+0x10c>
 8005500:	3c01      	subs	r4, #1
 8005502:	f101 0814 	add.w	r8, r1, #20
 8005506:	00a3      	lsls	r3, r4, #2
 8005508:	f100 0514 	add.w	r5, r0, #20
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800551c:	3301      	adds	r3, #1
 800551e:	429a      	cmp	r2, r3
 8005520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005524:	fbb2 f6f3 	udiv	r6, r2, r3
 8005528:	d32e      	bcc.n	8005588 <quorem+0x96>
 800552a:	f04f 0a00 	mov.w	sl, #0
 800552e:	46c4      	mov	ip, r8
 8005530:	46ae      	mov	lr, r5
 8005532:	46d3      	mov	fp, sl
 8005534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005538:	b298      	uxth	r0, r3
 800553a:	fb06 a000 	mla	r0, r6, r0, sl
 800553e:	0c02      	lsrs	r2, r0, #16
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	fb06 2303 	mla	r3, r6, r3, r2
 8005546:	f8de 2000 	ldr.w	r2, [lr]
 800554a:	b280      	uxth	r0, r0
 800554c:	b292      	uxth	r2, r2
 800554e:	1a12      	subs	r2, r2, r0
 8005550:	445a      	add	r2, fp
 8005552:	f8de 0000 	ldr.w	r0, [lr]
 8005556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800555a:	b29b      	uxth	r3, r3
 800555c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005560:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005564:	b292      	uxth	r2, r2
 8005566:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800556a:	45e1      	cmp	r9, ip
 800556c:	f84e 2b04 	str.w	r2, [lr], #4
 8005570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005574:	d2de      	bcs.n	8005534 <quorem+0x42>
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	58eb      	ldr	r3, [r5, r3]
 800557a:	b92b      	cbnz	r3, 8005588 <quorem+0x96>
 800557c:	9b01      	ldr	r3, [sp, #4]
 800557e:	3b04      	subs	r3, #4
 8005580:	429d      	cmp	r5, r3
 8005582:	461a      	mov	r2, r3
 8005584:	d32f      	bcc.n	80055e6 <quorem+0xf4>
 8005586:	613c      	str	r4, [r7, #16]
 8005588:	4638      	mov	r0, r7
 800558a:	f001 f97b 	bl	8006884 <__mcmp>
 800558e:	2800      	cmp	r0, #0
 8005590:	db25      	blt.n	80055de <quorem+0xec>
 8005592:	4629      	mov	r1, r5
 8005594:	2000      	movs	r0, #0
 8005596:	f858 2b04 	ldr.w	r2, [r8], #4
 800559a:	f8d1 c000 	ldr.w	ip, [r1]
 800559e:	fa1f fe82 	uxth.w	lr, r2
 80055a2:	fa1f f38c 	uxth.w	r3, ip
 80055a6:	eba3 030e 	sub.w	r3, r3, lr
 80055aa:	4403      	add	r3, r0
 80055ac:	0c12      	lsrs	r2, r2, #16
 80055ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055bc:	45c1      	cmp	r9, r8
 80055be:	f841 3b04 	str.w	r3, [r1], #4
 80055c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055c6:	d2e6      	bcs.n	8005596 <quorem+0xa4>
 80055c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d0:	b922      	cbnz	r2, 80055dc <quorem+0xea>
 80055d2:	3b04      	subs	r3, #4
 80055d4:	429d      	cmp	r5, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	d30b      	bcc.n	80055f2 <quorem+0x100>
 80055da:	613c      	str	r4, [r7, #16]
 80055dc:	3601      	adds	r6, #1
 80055de:	4630      	mov	r0, r6
 80055e0:	b003      	add	sp, #12
 80055e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	d1cb      	bne.n	8005586 <quorem+0x94>
 80055ee:	3c01      	subs	r4, #1
 80055f0:	e7c6      	b.n	8005580 <quorem+0x8e>
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	d1ef      	bne.n	80055da <quorem+0xe8>
 80055fa:	3c01      	subs	r4, #1
 80055fc:	e7ea      	b.n	80055d4 <quorem+0xe2>
 80055fe:	2000      	movs	r0, #0
 8005600:	e7ee      	b.n	80055e0 <quorem+0xee>
 8005602:	0000      	movs	r0, r0
 8005604:	0000      	movs	r0, r0
	...

08005608 <_dtoa_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	69c7      	ldr	r7, [r0, #28]
 800560e:	b099      	sub	sp, #100	@ 0x64
 8005610:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005614:	ec55 4b10 	vmov	r4, r5, d0
 8005618:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800561a:	9109      	str	r1, [sp, #36]	@ 0x24
 800561c:	4683      	mov	fp, r0
 800561e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005622:	b97f      	cbnz	r7, 8005644 <_dtoa_r+0x3c>
 8005624:	2010      	movs	r0, #16
 8005626:	f000 fdfd 	bl	8006224 <malloc>
 800562a:	4602      	mov	r2, r0
 800562c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005630:	b920      	cbnz	r0, 800563c <_dtoa_r+0x34>
 8005632:	4ba7      	ldr	r3, [pc, #668]	@ (80058d0 <_dtoa_r+0x2c8>)
 8005634:	21ef      	movs	r1, #239	@ 0xef
 8005636:	48a7      	ldr	r0, [pc, #668]	@ (80058d4 <_dtoa_r+0x2cc>)
 8005638:	f001 faf6 	bl	8006c28 <__assert_func>
 800563c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005640:	6007      	str	r7, [r0, #0]
 8005642:	60c7      	str	r7, [r0, #12]
 8005644:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	b159      	cbz	r1, 8005664 <_dtoa_r+0x5c>
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	604a      	str	r2, [r1, #4]
 8005650:	2301      	movs	r3, #1
 8005652:	4093      	lsls	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
 8005656:	4658      	mov	r0, fp
 8005658:	f000 feda 	bl	8006410 <_Bfree>
 800565c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	1e2b      	subs	r3, r5, #0
 8005666:	bfb9      	ittee	lt
 8005668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800566c:	9303      	strlt	r3, [sp, #12]
 800566e:	2300      	movge	r3, #0
 8005670:	6033      	strge	r3, [r6, #0]
 8005672:	9f03      	ldr	r7, [sp, #12]
 8005674:	4b98      	ldr	r3, [pc, #608]	@ (80058d8 <_dtoa_r+0x2d0>)
 8005676:	bfbc      	itt	lt
 8005678:	2201      	movlt	r2, #1
 800567a:	6032      	strlt	r2, [r6, #0]
 800567c:	43bb      	bics	r3, r7
 800567e:	d112      	bne.n	80056a6 <_dtoa_r+0x9e>
 8005680:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005682:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800568c:	4323      	orrs	r3, r4
 800568e:	f000 854d 	beq.w	800612c <_dtoa_r+0xb24>
 8005692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005694:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058ec <_dtoa_r+0x2e4>
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 854f 	beq.w	800613c <_dtoa_r+0xb34>
 800569e:	f10a 0303 	add.w	r3, sl, #3
 80056a2:	f000 bd49 	b.w	8006138 <_dtoa_r+0xb30>
 80056a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	ec51 0b17 	vmov	r0, r1, d7
 80056b0:	2300      	movs	r3, #0
 80056b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80056b6:	f7fb fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ba:	4680      	mov	r8, r0
 80056bc:	b158      	cbz	r0, 80056d6 <_dtoa_r+0xce>
 80056be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056c0:	2301      	movs	r3, #1
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056c6:	b113      	cbz	r3, 80056ce <_dtoa_r+0xc6>
 80056c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80056ca:	4b84      	ldr	r3, [pc, #528]	@ (80058dc <_dtoa_r+0x2d4>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80058f0 <_dtoa_r+0x2e8>
 80056d2:	f000 bd33 	b.w	800613c <_dtoa_r+0xb34>
 80056d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80056da:	aa16      	add	r2, sp, #88	@ 0x58
 80056dc:	a917      	add	r1, sp, #92	@ 0x5c
 80056de:	4658      	mov	r0, fp
 80056e0:	f001 f980 	bl	80069e4 <__d2b>
 80056e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056e8:	4681      	mov	r9, r0
 80056ea:	2e00      	cmp	r6, #0
 80056ec:	d077      	beq.n	80057de <_dtoa_r+0x1d6>
 80056ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80056f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005708:	4619      	mov	r1, r3
 800570a:	2200      	movs	r2, #0
 800570c:	4b74      	ldr	r3, [pc, #464]	@ (80058e0 <_dtoa_r+0x2d8>)
 800570e:	f7fa fdc3 	bl	8000298 <__aeabi_dsub>
 8005712:	a369      	add	r3, pc, #420	@ (adr r3, 80058b8 <_dtoa_r+0x2b0>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa ff76 	bl	8000608 <__aeabi_dmul>
 800571c:	a368      	add	r3, pc, #416	@ (adr r3, 80058c0 <_dtoa_r+0x2b8>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fdbb 	bl	800029c <__adddf3>
 8005726:	4604      	mov	r4, r0
 8005728:	4630      	mov	r0, r6
 800572a:	460d      	mov	r5, r1
 800572c:	f7fa ff02 	bl	8000534 <__aeabi_i2d>
 8005730:	a365      	add	r3, pc, #404	@ (adr r3, 80058c8 <_dtoa_r+0x2c0>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa ff67 	bl	8000608 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fa fdab 	bl	800029c <__adddf3>
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	f7fb fa0d 	bl	8000b68 <__aeabi_d2iz>
 800574e:	2200      	movs	r2, #0
 8005750:	4607      	mov	r7, r0
 8005752:	2300      	movs	r3, #0
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb f9c8 	bl	8000aec <__aeabi_dcmplt>
 800575c:	b140      	cbz	r0, 8005770 <_dtoa_r+0x168>
 800575e:	4638      	mov	r0, r7
 8005760:	f7fa fee8 	bl	8000534 <__aeabi_i2d>
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	f7fb f9b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800576c:	b900      	cbnz	r0, 8005770 <_dtoa_r+0x168>
 800576e:	3f01      	subs	r7, #1
 8005770:	2f16      	cmp	r7, #22
 8005772:	d851      	bhi.n	8005818 <_dtoa_r+0x210>
 8005774:	4b5b      	ldr	r3, [pc, #364]	@ (80058e4 <_dtoa_r+0x2dc>)
 8005776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005782:	f7fb f9b3 	bl	8000aec <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d048      	beq.n	800581c <_dtoa_r+0x214>
 800578a:	3f01      	subs	r7, #1
 800578c:	2300      	movs	r3, #0
 800578e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005790:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005792:	1b9b      	subs	r3, r3, r6
 8005794:	1e5a      	subs	r2, r3, #1
 8005796:	bf44      	itt	mi
 8005798:	f1c3 0801 	rsbmi	r8, r3, #1
 800579c:	2300      	movmi	r3, #0
 800579e:	9208      	str	r2, [sp, #32]
 80057a0:	bf54      	ite	pl
 80057a2:	f04f 0800 	movpl.w	r8, #0
 80057a6:	9308      	strmi	r3, [sp, #32]
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	db39      	blt.n	8005820 <_dtoa_r+0x218>
 80057ac:	9b08      	ldr	r3, [sp, #32]
 80057ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80057b0:	443b      	add	r3, r7
 80057b2:	9308      	str	r3, [sp, #32]
 80057b4:	2300      	movs	r3, #0
 80057b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d864      	bhi.n	8005888 <_dtoa_r+0x280>
 80057be:	2b05      	cmp	r3, #5
 80057c0:	bfc4      	itt	gt
 80057c2:	3b04      	subgt	r3, #4
 80057c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80057c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c8:	f1a3 0302 	sub.w	r3, r3, #2
 80057cc:	bfcc      	ite	gt
 80057ce:	2400      	movgt	r4, #0
 80057d0:	2401      	movle	r4, #1
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d863      	bhi.n	800589e <_dtoa_r+0x296>
 80057d6:	e8df f003 	tbb	[pc, r3]
 80057da:	372a      	.short	0x372a
 80057dc:	5535      	.short	0x5535
 80057de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80057e2:	441e      	add	r6, r3
 80057e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	bfc1      	itttt	gt
 80057ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057f0:	409f      	lslgt	r7, r3
 80057f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057fa:	bfd6      	itet	le
 80057fc:	f1c3 0320 	rsble	r3, r3, #32
 8005800:	ea47 0003 	orrgt.w	r0, r7, r3
 8005804:	fa04 f003 	lslle.w	r0, r4, r3
 8005808:	f7fa fe84 	bl	8000514 <__aeabi_ui2d>
 800580c:	2201      	movs	r2, #1
 800580e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005812:	3e01      	subs	r6, #1
 8005814:	9214      	str	r2, [sp, #80]	@ 0x50
 8005816:	e777      	b.n	8005708 <_dtoa_r+0x100>
 8005818:	2301      	movs	r3, #1
 800581a:	e7b8      	b.n	800578e <_dtoa_r+0x186>
 800581c:	9012      	str	r0, [sp, #72]	@ 0x48
 800581e:	e7b7      	b.n	8005790 <_dtoa_r+0x188>
 8005820:	427b      	negs	r3, r7
 8005822:	930a      	str	r3, [sp, #40]	@ 0x28
 8005824:	2300      	movs	r3, #0
 8005826:	eba8 0807 	sub.w	r8, r8, r7
 800582a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800582c:	e7c4      	b.n	80057b8 <_dtoa_r+0x1b0>
 800582e:	2300      	movs	r3, #0
 8005830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	dc35      	bgt.n	80058a4 <_dtoa_r+0x29c>
 8005838:	2301      	movs	r3, #1
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	461a      	mov	r2, r3
 8005840:	920e      	str	r2, [sp, #56]	@ 0x38
 8005842:	e00b      	b.n	800585c <_dtoa_r+0x254>
 8005844:	2301      	movs	r3, #1
 8005846:	e7f3      	b.n	8005830 <_dtoa_r+0x228>
 8005848:	2300      	movs	r3, #0
 800584a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800584c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	3301      	adds	r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	bfb8      	it	lt
 800585a:	2301      	movlt	r3, #1
 800585c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005860:	2100      	movs	r1, #0
 8005862:	2204      	movs	r2, #4
 8005864:	f102 0514 	add.w	r5, r2, #20
 8005868:	429d      	cmp	r5, r3
 800586a:	d91f      	bls.n	80058ac <_dtoa_r+0x2a4>
 800586c:	6041      	str	r1, [r0, #4]
 800586e:	4658      	mov	r0, fp
 8005870:	f000 fd8e 	bl	8006390 <_Balloc>
 8005874:	4682      	mov	sl, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	d13c      	bne.n	80058f4 <_dtoa_r+0x2ec>
 800587a:	4b1b      	ldr	r3, [pc, #108]	@ (80058e8 <_dtoa_r+0x2e0>)
 800587c:	4602      	mov	r2, r0
 800587e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005882:	e6d8      	b.n	8005636 <_dtoa_r+0x2e>
 8005884:	2301      	movs	r3, #1
 8005886:	e7e0      	b.n	800584a <_dtoa_r+0x242>
 8005888:	2401      	movs	r4, #1
 800588a:	2300      	movs	r3, #0
 800588c:	9309      	str	r3, [sp, #36]	@ 0x24
 800588e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	2200      	movs	r2, #0
 800589a:	2312      	movs	r3, #18
 800589c:	e7d0      	b.n	8005840 <_dtoa_r+0x238>
 800589e:	2301      	movs	r3, #1
 80058a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a2:	e7f5      	b.n	8005890 <_dtoa_r+0x288>
 80058a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	9307      	str	r3, [sp, #28]
 80058aa:	e7d7      	b.n	800585c <_dtoa_r+0x254>
 80058ac:	3101      	adds	r1, #1
 80058ae:	0052      	lsls	r2, r2, #1
 80058b0:	e7d8      	b.n	8005864 <_dtoa_r+0x25c>
 80058b2:	bf00      	nop
 80058b4:	f3af 8000 	nop.w
 80058b8:	636f4361 	.word	0x636f4361
 80058bc:	3fd287a7 	.word	0x3fd287a7
 80058c0:	8b60c8b3 	.word	0x8b60c8b3
 80058c4:	3fc68a28 	.word	0x3fc68a28
 80058c8:	509f79fb 	.word	0x509f79fb
 80058cc:	3fd34413 	.word	0x3fd34413
 80058d0:	08007991 	.word	0x08007991
 80058d4:	080079a8 	.word	0x080079a8
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	08007961 	.word	0x08007961
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	08007aa0 	.word	0x08007aa0
 80058e8:	08007a00 	.word	0x08007a00
 80058ec:	0800798d 	.word	0x0800798d
 80058f0:	08007960 	.word	0x08007960
 80058f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	9b07      	ldr	r3, [sp, #28]
 80058fc:	2b0e      	cmp	r3, #14
 80058fe:	f200 80a4 	bhi.w	8005a4a <_dtoa_r+0x442>
 8005902:	2c00      	cmp	r4, #0
 8005904:	f000 80a1 	beq.w	8005a4a <_dtoa_r+0x442>
 8005908:	2f00      	cmp	r7, #0
 800590a:	dd33      	ble.n	8005974 <_dtoa_r+0x36c>
 800590c:	4bad      	ldr	r3, [pc, #692]	@ (8005bc4 <_dtoa_r+0x5bc>)
 800590e:	f007 020f 	and.w	r2, r7, #15
 8005912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005916:	ed93 7b00 	vldr	d7, [r3]
 800591a:	05f8      	lsls	r0, r7, #23
 800591c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005924:	d516      	bpl.n	8005954 <_dtoa_r+0x34c>
 8005926:	4ba8      	ldr	r3, [pc, #672]	@ (8005bc8 <_dtoa_r+0x5c0>)
 8005928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800592c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005930:	f7fa ff94 	bl	800085c <__aeabi_ddiv>
 8005934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005938:	f004 040f 	and.w	r4, r4, #15
 800593c:	2603      	movs	r6, #3
 800593e:	4da2      	ldr	r5, [pc, #648]	@ (8005bc8 <_dtoa_r+0x5c0>)
 8005940:	b954      	cbnz	r4, 8005958 <_dtoa_r+0x350>
 8005942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800594a:	f7fa ff87 	bl	800085c <__aeabi_ddiv>
 800594e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005952:	e028      	b.n	80059a6 <_dtoa_r+0x39e>
 8005954:	2602      	movs	r6, #2
 8005956:	e7f2      	b.n	800593e <_dtoa_r+0x336>
 8005958:	07e1      	lsls	r1, r4, #31
 800595a:	d508      	bpl.n	800596e <_dtoa_r+0x366>
 800595c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005964:	f7fa fe50 	bl	8000608 <__aeabi_dmul>
 8005968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800596c:	3601      	adds	r6, #1
 800596e:	1064      	asrs	r4, r4, #1
 8005970:	3508      	adds	r5, #8
 8005972:	e7e5      	b.n	8005940 <_dtoa_r+0x338>
 8005974:	f000 80d2 	beq.w	8005b1c <_dtoa_r+0x514>
 8005978:	427c      	negs	r4, r7
 800597a:	4b92      	ldr	r3, [pc, #584]	@ (8005bc4 <_dtoa_r+0x5bc>)
 800597c:	4d92      	ldr	r5, [pc, #584]	@ (8005bc8 <_dtoa_r+0x5c0>)
 800597e:	f004 020f 	and.w	r2, r4, #15
 8005982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800598e:	f7fa fe3b 	bl	8000608 <__aeabi_dmul>
 8005992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005996:	1124      	asrs	r4, r4, #4
 8005998:	2300      	movs	r3, #0
 800599a:	2602      	movs	r6, #2
 800599c:	2c00      	cmp	r4, #0
 800599e:	f040 80b2 	bne.w	8005b06 <_dtoa_r+0x4fe>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1d3      	bne.n	800594e <_dtoa_r+0x346>
 80059a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80059a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80b7 	beq.w	8005b20 <_dtoa_r+0x518>
 80059b2:	4b86      	ldr	r3, [pc, #536]	@ (8005bcc <_dtoa_r+0x5c4>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fb f897 	bl	8000aec <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f000 80ae 	beq.w	8005b20 <_dtoa_r+0x518>
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80aa 	beq.w	8005b20 <_dtoa_r+0x518>
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dd37      	ble.n	8005a42 <_dtoa_r+0x43a>
 80059d2:	1e7b      	subs	r3, r7, #1
 80059d4:	9304      	str	r3, [sp, #16]
 80059d6:	4620      	mov	r0, r4
 80059d8:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd0 <_dtoa_r+0x5c8>)
 80059da:	2200      	movs	r2, #0
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa fe13 	bl	8000608 <__aeabi_dmul>
 80059e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e6:	9c00      	ldr	r4, [sp, #0]
 80059e8:	3601      	adds	r6, #1
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fa fda2 	bl	8000534 <__aeabi_i2d>
 80059f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f4:	f7fa fe08 	bl	8000608 <__aeabi_dmul>
 80059f8:	4b76      	ldr	r3, [pc, #472]	@ (8005bd4 <_dtoa_r+0x5cc>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	f7fa fc4e 	bl	800029c <__adddf3>
 8005a00:	4605      	mov	r5, r0
 8005a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a06:	2c00      	cmp	r4, #0
 8005a08:	f040 808d 	bne.w	8005b26 <_dtoa_r+0x51e>
 8005a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a10:	4b71      	ldr	r3, [pc, #452]	@ (8005bd8 <_dtoa_r+0x5d0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	f7fa fc40 	bl	8000298 <__aeabi_dsub>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4633      	mov	r3, r6
 8005a24:	f7fb f880 	bl	8000b28 <__aeabi_dcmpgt>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	f040 828b 	bne.w	8005f44 <_dtoa_r+0x93c>
 8005a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a32:	462a      	mov	r2, r5
 8005a34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a38:	f7fb f858 	bl	8000aec <__aeabi_dcmplt>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f040 8128 	bne.w	8005c92 <_dtoa_r+0x68a>
 8005a42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f2c0 815a 	blt.w	8005d06 <_dtoa_r+0x6fe>
 8005a52:	2f0e      	cmp	r7, #14
 8005a54:	f300 8157 	bgt.w	8005d06 <_dtoa_r+0x6fe>
 8005a58:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <_dtoa_r+0x5bc>)
 8005a5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a5e:	ed93 7b00 	vldr	d7, [r3]
 8005a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	ed8d 7b00 	vstr	d7, [sp]
 8005a6a:	da03      	bge.n	8005a74 <_dtoa_r+0x46c>
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f340 8101 	ble.w	8005c76 <_dtoa_r+0x66e>
 8005a74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a78:	4656      	mov	r6, sl
 8005a7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7fa feeb 	bl	800085c <__aeabi_ddiv>
 8005a86:	f7fb f86f 	bl	8000b68 <__aeabi_d2iz>
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	f7fa fd52 	bl	8000534 <__aeabi_i2d>
 8005a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a94:	f7fa fdb8 	bl	8000608 <__aeabi_dmul>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005aa4:	f7fa fbf8 	bl	8000298 <__aeabi_dsub>
 8005aa8:	f806 4b01 	strb.w	r4, [r6], #1
 8005aac:	9d07      	ldr	r5, [sp, #28]
 8005aae:	eba6 040a 	sub.w	r4, r6, sl
 8005ab2:	42a5      	cmp	r5, r4
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	f040 8117 	bne.w	8005cea <_dtoa_r+0x6e2>
 8005abc:	f7fa fbee 	bl	800029c <__adddf3>
 8005ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	f7fb f82e 	bl	8000b28 <__aeabi_dcmpgt>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f040 80f9 	bne.w	8005cc4 <_dtoa_r+0x6bc>
 8005ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ade:	b118      	cbz	r0, 8005ae8 <_dtoa_r+0x4e0>
 8005ae0:	f018 0f01 	tst.w	r8, #1
 8005ae4:	f040 80ee 	bne.w	8005cc4 <_dtoa_r+0x6bc>
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4658      	mov	r0, fp
 8005aec:	f000 fc90 	bl	8006410 <_Bfree>
 8005af0:	2300      	movs	r3, #0
 8005af2:	7033      	strb	r3, [r6, #0]
 8005af4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005af6:	3701      	adds	r7, #1
 8005af8:	601f      	str	r7, [r3, #0]
 8005afa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 831d 	beq.w	800613c <_dtoa_r+0xb34>
 8005b02:	601e      	str	r6, [r3, #0]
 8005b04:	e31a      	b.n	800613c <_dtoa_r+0xb34>
 8005b06:	07e2      	lsls	r2, r4, #31
 8005b08:	d505      	bpl.n	8005b16 <_dtoa_r+0x50e>
 8005b0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b0e:	f7fa fd7b 	bl	8000608 <__aeabi_dmul>
 8005b12:	3601      	adds	r6, #1
 8005b14:	2301      	movs	r3, #1
 8005b16:	1064      	asrs	r4, r4, #1
 8005b18:	3508      	adds	r5, #8
 8005b1a:	e73f      	b.n	800599c <_dtoa_r+0x394>
 8005b1c:	2602      	movs	r6, #2
 8005b1e:	e742      	b.n	80059a6 <_dtoa_r+0x39e>
 8005b20:	9c07      	ldr	r4, [sp, #28]
 8005b22:	9704      	str	r7, [sp, #16]
 8005b24:	e761      	b.n	80059ea <_dtoa_r+0x3e2>
 8005b26:	4b27      	ldr	r3, [pc, #156]	@ (8005bc4 <_dtoa_r+0x5bc>)
 8005b28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b32:	4454      	add	r4, sl
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d053      	beq.n	8005be0 <_dtoa_r+0x5d8>
 8005b38:	4928      	ldr	r1, [pc, #160]	@ (8005bdc <_dtoa_r+0x5d4>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f7fa fe8e 	bl	800085c <__aeabi_ddiv>
 8005b40:	4633      	mov	r3, r6
 8005b42:	462a      	mov	r2, r5
 8005b44:	f7fa fba8 	bl	8000298 <__aeabi_dsub>
 8005b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b4c:	4656      	mov	r6, sl
 8005b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b52:	f7fb f809 	bl	8000b68 <__aeabi_d2iz>
 8005b56:	4605      	mov	r5, r0
 8005b58:	f7fa fcec 	bl	8000534 <__aeabi_i2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b64:	f7fa fb98 	bl	8000298 <__aeabi_dsub>
 8005b68:	3530      	adds	r5, #48	@ 0x30
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b72:	f806 5b01 	strb.w	r5, [r6], #1
 8005b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b7a:	f7fa ffb7 	bl	8000aec <__aeabi_dcmplt>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d171      	bne.n	8005c66 <_dtoa_r+0x65e>
 8005b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b86:	4911      	ldr	r1, [pc, #68]	@ (8005bcc <_dtoa_r+0x5c4>)
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f7fa fb85 	bl	8000298 <__aeabi_dsub>
 8005b8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b92:	f7fa ffab 	bl	8000aec <__aeabi_dcmplt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f040 8095 	bne.w	8005cc6 <_dtoa_r+0x6be>
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	f43f af50 	beq.w	8005a42 <_dtoa_r+0x43a>
 8005ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <_dtoa_r+0x5c8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f7fa fd2d 	bl	8000608 <__aeabi_dmul>
 8005bae:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <_dtoa_r+0x5c8>)
 8005bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bba:	f7fa fd25 	bl	8000608 <__aeabi_dmul>
 8005bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc2:	e7c4      	b.n	8005b4e <_dtoa_r+0x546>
 8005bc4:	08007aa0 	.word	0x08007aa0
 8005bc8:	08007a78 	.word	0x08007a78
 8005bcc:	3ff00000 	.word	0x3ff00000
 8005bd0:	40240000 	.word	0x40240000
 8005bd4:	401c0000 	.word	0x401c0000
 8005bd8:	40140000 	.word	0x40140000
 8005bdc:	3fe00000 	.word	0x3fe00000
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	f7fa fd10 	bl	8000608 <__aeabi_dmul>
 8005be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bec:	9415      	str	r4, [sp, #84]	@ 0x54
 8005bee:	4656      	mov	r6, sl
 8005bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf4:	f7fa ffb8 	bl	8000b68 <__aeabi_d2iz>
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f7fa fc9b 	bl	8000534 <__aeabi_i2d>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c06:	f7fa fb47 	bl	8000298 <__aeabi_dsub>
 8005c0a:	3530      	adds	r5, #48	@ 0x30
 8005c0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	d124      	bne.n	8005c6a <_dtoa_r+0x662>
 8005c20:	4bac      	ldr	r3, [pc, #688]	@ (8005ed4 <_dtoa_r+0x8cc>)
 8005c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c26:	f7fa fb39 	bl	800029c <__adddf3>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c32:	f7fa ff79 	bl	8000b28 <__aeabi_dcmpgt>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d145      	bne.n	8005cc6 <_dtoa_r+0x6be>
 8005c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c3e:	49a5      	ldr	r1, [pc, #660]	@ (8005ed4 <_dtoa_r+0x8cc>)
 8005c40:	2000      	movs	r0, #0
 8005c42:	f7fa fb29 	bl	8000298 <__aeabi_dsub>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4e:	f7fa ff4d 	bl	8000aec <__aeabi_dcmplt>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	f43f aef5 	beq.w	8005a42 <_dtoa_r+0x43a>
 8005c58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005c5a:	1e73      	subs	r3, r6, #1
 8005c5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c62:	2b30      	cmp	r3, #48	@ 0x30
 8005c64:	d0f8      	beq.n	8005c58 <_dtoa_r+0x650>
 8005c66:	9f04      	ldr	r7, [sp, #16]
 8005c68:	e73e      	b.n	8005ae8 <_dtoa_r+0x4e0>
 8005c6a:	4b9b      	ldr	r3, [pc, #620]	@ (8005ed8 <_dtoa_r+0x8d0>)
 8005c6c:	f7fa fccc 	bl	8000608 <__aeabi_dmul>
 8005c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c74:	e7bc      	b.n	8005bf0 <_dtoa_r+0x5e8>
 8005c76:	d10c      	bne.n	8005c92 <_dtoa_r+0x68a>
 8005c78:	4b98      	ldr	r3, [pc, #608]	@ (8005edc <_dtoa_r+0x8d4>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c80:	f7fa fcc2 	bl	8000608 <__aeabi_dmul>
 8005c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c88:	f7fa ff44 	bl	8000b14 <__aeabi_dcmpge>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f000 8157 	beq.w	8005f40 <_dtoa_r+0x938>
 8005c92:	2400      	movs	r4, #0
 8005c94:	4625      	mov	r5, r4
 8005c96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	4656      	mov	r6, sl
 8005c9e:	2700      	movs	r7, #0
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4658      	mov	r0, fp
 8005ca4:	f000 fbb4 	bl	8006410 <_Bfree>
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	d0dc      	beq.n	8005c66 <_dtoa_r+0x65e>
 8005cac:	b12f      	cbz	r7, 8005cba <_dtoa_r+0x6b2>
 8005cae:	42af      	cmp	r7, r5
 8005cb0:	d003      	beq.n	8005cba <_dtoa_r+0x6b2>
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	4658      	mov	r0, fp
 8005cb6:	f000 fbab 	bl	8006410 <_Bfree>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4658      	mov	r0, fp
 8005cbe:	f000 fba7 	bl	8006410 <_Bfree>
 8005cc2:	e7d0      	b.n	8005c66 <_dtoa_r+0x65e>
 8005cc4:	9704      	str	r7, [sp, #16]
 8005cc6:	4633      	mov	r3, r6
 8005cc8:	461e      	mov	r6, r3
 8005cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cce:	2a39      	cmp	r2, #57	@ 0x39
 8005cd0:	d107      	bne.n	8005ce2 <_dtoa_r+0x6da>
 8005cd2:	459a      	cmp	sl, r3
 8005cd4:	d1f8      	bne.n	8005cc8 <_dtoa_r+0x6c0>
 8005cd6:	9a04      	ldr	r2, [sp, #16]
 8005cd8:	3201      	adds	r2, #1
 8005cda:	9204      	str	r2, [sp, #16]
 8005cdc:	2230      	movs	r2, #48	@ 0x30
 8005cde:	f88a 2000 	strb.w	r2, [sl]
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e7bd      	b.n	8005c66 <_dtoa_r+0x65e>
 8005cea:	4b7b      	ldr	r3, [pc, #492]	@ (8005ed8 <_dtoa_r+0x8d0>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	f7fa fc8b 	bl	8000608 <__aeabi_dmul>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	f7fa feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f43f aebb 	beq.w	8005a7a <_dtoa_r+0x472>
 8005d04:	e6f0      	b.n	8005ae8 <_dtoa_r+0x4e0>
 8005d06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	f000 80db 	beq.w	8005ec4 <_dtoa_r+0x8bc>
 8005d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d10:	2a01      	cmp	r2, #1
 8005d12:	f300 80bf 	bgt.w	8005e94 <_dtoa_r+0x88c>
 8005d16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	f000 80b7 	beq.w	8005e8c <_dtoa_r+0x884>
 8005d1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d24:	4646      	mov	r6, r8
 8005d26:	9a08      	ldr	r2, [sp, #32]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	441a      	add	r2, r3
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	4498      	add	r8, r3
 8005d30:	9208      	str	r2, [sp, #32]
 8005d32:	f000 fc21 	bl	8006578 <__i2b>
 8005d36:	4605      	mov	r5, r0
 8005d38:	b15e      	cbz	r6, 8005d52 <_dtoa_r+0x74a>
 8005d3a:	9b08      	ldr	r3, [sp, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd08      	ble.n	8005d52 <_dtoa_r+0x74a>
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	9a08      	ldr	r2, [sp, #32]
 8005d44:	bfa8      	it	ge
 8005d46:	4633      	movge	r3, r6
 8005d48:	eba8 0803 	sub.w	r8, r8, r3
 8005d4c:	1af6      	subs	r6, r6, r3
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	9308      	str	r3, [sp, #32]
 8005d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d54:	b1f3      	cbz	r3, 8005d94 <_dtoa_r+0x78c>
 8005d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80b7 	beq.w	8005ecc <_dtoa_r+0x8c4>
 8005d5e:	b18c      	cbz	r4, 8005d84 <_dtoa_r+0x77c>
 8005d60:	4629      	mov	r1, r5
 8005d62:	4622      	mov	r2, r4
 8005d64:	4658      	mov	r0, fp
 8005d66:	f000 fcc7 	bl	80066f8 <__pow5mult>
 8005d6a:	464a      	mov	r2, r9
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	4605      	mov	r5, r0
 8005d70:	4658      	mov	r0, fp
 8005d72:	f000 fc17 	bl	80065a4 <__multiply>
 8005d76:	4649      	mov	r1, r9
 8005d78:	9004      	str	r0, [sp, #16]
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f000 fb48 	bl	8006410 <_Bfree>
 8005d80:	9b04      	ldr	r3, [sp, #16]
 8005d82:	4699      	mov	r9, r3
 8005d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d86:	1b1a      	subs	r2, r3, r4
 8005d88:	d004      	beq.n	8005d94 <_dtoa_r+0x78c>
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f000 fcb3 	bl	80066f8 <__pow5mult>
 8005d92:	4681      	mov	r9, r0
 8005d94:	2101      	movs	r1, #1
 8005d96:	4658      	mov	r0, fp
 8005d98:	f000 fbee 	bl	8006578 <__i2b>
 8005d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 81cf 	beq.w	8006144 <_dtoa_r+0xb3c>
 8005da6:	461a      	mov	r2, r3
 8005da8:	4601      	mov	r1, r0
 8005daa:	4658      	mov	r0, fp
 8005dac:	f000 fca4 	bl	80066f8 <__pow5mult>
 8005db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	4604      	mov	r4, r0
 8005db6:	f300 8095 	bgt.w	8005ee4 <_dtoa_r+0x8dc>
 8005dba:	9b02      	ldr	r3, [sp, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 8087 	bne.w	8005ed0 <_dtoa_r+0x8c8>
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 8089 	bne.w	8005ee0 <_dtoa_r+0x8d8>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dd4:	0d1b      	lsrs	r3, r3, #20
 8005dd6:	051b      	lsls	r3, r3, #20
 8005dd8:	b12b      	cbz	r3, 8005de6 <_dtoa_r+0x7de>
 8005dda:	9b08      	ldr	r3, [sp, #32]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	9308      	str	r3, [sp, #32]
 8005de0:	f108 0801 	add.w	r8, r8, #1
 8005de4:	2301      	movs	r3, #1
 8005de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 81b0 	beq.w	8006150 <_dtoa_r+0xb48>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005df6:	6918      	ldr	r0, [r3, #16]
 8005df8:	f000 fb72 	bl	80064e0 <__hi0bits>
 8005dfc:	f1c0 0020 	rsb	r0, r0, #32
 8005e00:	9b08      	ldr	r3, [sp, #32]
 8005e02:	4418      	add	r0, r3
 8005e04:	f010 001f 	ands.w	r0, r0, #31
 8005e08:	d077      	beq.n	8005efa <_dtoa_r+0x8f2>
 8005e0a:	f1c0 0320 	rsb	r3, r0, #32
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	dd6b      	ble.n	8005eea <_dtoa_r+0x8e2>
 8005e12:	9b08      	ldr	r3, [sp, #32]
 8005e14:	f1c0 001c 	rsb	r0, r0, #28
 8005e18:	4403      	add	r3, r0
 8005e1a:	4480      	add	r8, r0
 8005e1c:	4406      	add	r6, r0
 8005e1e:	9308      	str	r3, [sp, #32]
 8005e20:	f1b8 0f00 	cmp.w	r8, #0
 8005e24:	dd05      	ble.n	8005e32 <_dtoa_r+0x82a>
 8005e26:	4649      	mov	r1, r9
 8005e28:	4642      	mov	r2, r8
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fcbe 	bl	80067ac <__lshift>
 8005e30:	4681      	mov	r9, r0
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dd05      	ble.n	8005e44 <_dtoa_r+0x83c>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4658      	mov	r0, fp
 8005e3e:	f000 fcb5 	bl	80067ac <__lshift>
 8005e42:	4604      	mov	r4, r0
 8005e44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d059      	beq.n	8005efe <_dtoa_r+0x8f6>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fd19 	bl	8006884 <__mcmp>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	da53      	bge.n	8005efe <_dtoa_r+0x8f6>
 8005e56:	1e7b      	subs	r3, r7, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	220a      	movs	r2, #10
 8005e60:	4658      	mov	r0, fp
 8005e62:	f000 faf7 	bl	8006454 <__multadd>
 8005e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e68:	4681      	mov	r9, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8172 	beq.w	8006154 <_dtoa_r+0xb4c>
 8005e70:	2300      	movs	r3, #0
 8005e72:	4629      	mov	r1, r5
 8005e74:	220a      	movs	r2, #10
 8005e76:	4658      	mov	r0, fp
 8005e78:	f000 faec 	bl	8006454 <__multadd>
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	4605      	mov	r5, r0
 8005e82:	dc67      	bgt.n	8005f54 <_dtoa_r+0x94c>
 8005e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	dc41      	bgt.n	8005f0e <_dtoa_r+0x906>
 8005e8a:	e063      	b.n	8005f54 <_dtoa_r+0x94c>
 8005e8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e92:	e746      	b.n	8005d22 <_dtoa_r+0x71a>
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	1e5c      	subs	r4, r3, #1
 8005e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e9a:	42a3      	cmp	r3, r4
 8005e9c:	bfbf      	itttt	lt
 8005e9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ea0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005ea2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005ea4:	1ae3      	sublt	r3, r4, r3
 8005ea6:	bfb4      	ite	lt
 8005ea8:	18d2      	addlt	r2, r2, r3
 8005eaa:	1b1c      	subge	r4, r3, r4
 8005eac:	9b07      	ldr	r3, [sp, #28]
 8005eae:	bfbc      	itt	lt
 8005eb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005eb2:	2400      	movlt	r4, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb5      	itete	lt
 8005eb8:	eba8 0603 	sublt.w	r6, r8, r3
 8005ebc:	9b07      	ldrge	r3, [sp, #28]
 8005ebe:	2300      	movlt	r3, #0
 8005ec0:	4646      	movge	r6, r8
 8005ec2:	e730      	b.n	8005d26 <_dtoa_r+0x71e>
 8005ec4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ec6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ec8:	4646      	mov	r6, r8
 8005eca:	e735      	b.n	8005d38 <_dtoa_r+0x730>
 8005ecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ece:	e75c      	b.n	8005d8a <_dtoa_r+0x782>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e788      	b.n	8005de6 <_dtoa_r+0x7de>
 8005ed4:	3fe00000 	.word	0x3fe00000
 8005ed8:	40240000 	.word	0x40240000
 8005edc:	40140000 	.word	0x40140000
 8005ee0:	9b02      	ldr	r3, [sp, #8]
 8005ee2:	e780      	b.n	8005de6 <_dtoa_r+0x7de>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee8:	e782      	b.n	8005df0 <_dtoa_r+0x7e8>
 8005eea:	d099      	beq.n	8005e20 <_dtoa_r+0x818>
 8005eec:	9a08      	ldr	r2, [sp, #32]
 8005eee:	331c      	adds	r3, #28
 8005ef0:	441a      	add	r2, r3
 8005ef2:	4498      	add	r8, r3
 8005ef4:	441e      	add	r6, r3
 8005ef6:	9208      	str	r2, [sp, #32]
 8005ef8:	e792      	b.n	8005e20 <_dtoa_r+0x818>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e7f6      	b.n	8005eec <_dtoa_r+0x8e4>
 8005efe:	9b07      	ldr	r3, [sp, #28]
 8005f00:	9704      	str	r7, [sp, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dc20      	bgt.n	8005f48 <_dtoa_r+0x940>
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	dd1e      	ble.n	8005f4c <_dtoa_r+0x944>
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f aec0 	bne.w	8005c96 <_dtoa_r+0x68e>
 8005f16:	4621      	mov	r1, r4
 8005f18:	2205      	movs	r2, #5
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	f000 fa9a 	bl	8006454 <__multadd>
 8005f20:	4601      	mov	r1, r0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4648      	mov	r0, r9
 8005f26:	f000 fcad 	bl	8006884 <__mcmp>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f77f aeb3 	ble.w	8005c96 <_dtoa_r+0x68e>
 8005f30:	4656      	mov	r6, sl
 8005f32:	2331      	movs	r3, #49	@ 0x31
 8005f34:	f806 3b01 	strb.w	r3, [r6], #1
 8005f38:	9b04      	ldr	r3, [sp, #16]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	e6ae      	b.n	8005c9e <_dtoa_r+0x696>
 8005f40:	9c07      	ldr	r4, [sp, #28]
 8005f42:	9704      	str	r7, [sp, #16]
 8005f44:	4625      	mov	r5, r4
 8005f46:	e7f3      	b.n	8005f30 <_dtoa_r+0x928>
 8005f48:	9b07      	ldr	r3, [sp, #28]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8104 	beq.w	800615c <_dtoa_r+0xb54>
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	dd05      	ble.n	8005f64 <_dtoa_r+0x95c>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	f000 fc25 	bl	80067ac <__lshift>
 8005f62:	4605      	mov	r5, r0
 8005f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d05a      	beq.n	8006020 <_dtoa_r+0xa18>
 8005f6a:	6869      	ldr	r1, [r5, #4]
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fa0f 	bl	8006390 <_Balloc>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b928      	cbnz	r0, 8005f82 <_dtoa_r+0x97a>
 8005f76:	4b84      	ldr	r3, [pc, #528]	@ (8006188 <_dtoa_r+0xb80>)
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f7e:	f7ff bb5a 	b.w	8005636 <_dtoa_r+0x2e>
 8005f82:	692a      	ldr	r2, [r5, #16]
 8005f84:	3202      	adds	r2, #2
 8005f86:	0092      	lsls	r2, r2, #2
 8005f88:	f105 010c 	add.w	r1, r5, #12
 8005f8c:	300c      	adds	r0, #12
 8005f8e:	f000 fe3d 	bl	8006c0c <memcpy>
 8005f92:	2201      	movs	r2, #1
 8005f94:	4631      	mov	r1, r6
 8005f96:	4658      	mov	r0, fp
 8005f98:	f000 fc08 	bl	80067ac <__lshift>
 8005f9c:	f10a 0301 	add.w	r3, sl, #1
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	4453      	add	r3, sl
 8005fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	462f      	mov	r7, r5
 8005fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	4648      	mov	r0, r9
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	f7ff fa98 	bl	80054f2 <quorem>
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005fca:	4648      	mov	r0, r9
 8005fcc:	f000 fc5a 	bl	8006884 <__mcmp>
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	9008      	str	r0, [sp, #32]
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4658      	mov	r0, fp
 8005fd8:	f000 fc70 	bl	80068bc <__mdiff>
 8005fdc:	68c2      	ldr	r2, [r0, #12]
 8005fde:	4606      	mov	r6, r0
 8005fe0:	bb02      	cbnz	r2, 8006024 <_dtoa_r+0xa1c>
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f000 fc4d 	bl	8006884 <__mcmp>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4631      	mov	r1, r6
 8005fee:	4658      	mov	r0, fp
 8005ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ff2:	f000 fa0d 	bl	8006410 <_Bfree>
 8005ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ffa:	9e07      	ldr	r6, [sp, #28]
 8005ffc:	ea43 0102 	orr.w	r1, r3, r2
 8006000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006002:	4319      	orrs	r1, r3
 8006004:	d110      	bne.n	8006028 <_dtoa_r+0xa20>
 8006006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800600a:	d029      	beq.n	8006060 <_dtoa_r+0xa58>
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd02      	ble.n	8006018 <_dtoa_r+0xa10>
 8006012:	9b02      	ldr	r3, [sp, #8]
 8006014:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006018:	9b00      	ldr	r3, [sp, #0]
 800601a:	f883 8000 	strb.w	r8, [r3]
 800601e:	e63f      	b.n	8005ca0 <_dtoa_r+0x698>
 8006020:	4628      	mov	r0, r5
 8006022:	e7bb      	b.n	8005f9c <_dtoa_r+0x994>
 8006024:	2201      	movs	r2, #1
 8006026:	e7e1      	b.n	8005fec <_dtoa_r+0x9e4>
 8006028:	9b08      	ldr	r3, [sp, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	db04      	blt.n	8006038 <_dtoa_r+0xa30>
 800602e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006030:	430b      	orrs	r3, r1
 8006032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006034:	430b      	orrs	r3, r1
 8006036:	d120      	bne.n	800607a <_dtoa_r+0xa72>
 8006038:	2a00      	cmp	r2, #0
 800603a:	dded      	ble.n	8006018 <_dtoa_r+0xa10>
 800603c:	4649      	mov	r1, r9
 800603e:	2201      	movs	r2, #1
 8006040:	4658      	mov	r0, fp
 8006042:	f000 fbb3 	bl	80067ac <__lshift>
 8006046:	4621      	mov	r1, r4
 8006048:	4681      	mov	r9, r0
 800604a:	f000 fc1b 	bl	8006884 <__mcmp>
 800604e:	2800      	cmp	r0, #0
 8006050:	dc03      	bgt.n	800605a <_dtoa_r+0xa52>
 8006052:	d1e1      	bne.n	8006018 <_dtoa_r+0xa10>
 8006054:	f018 0f01 	tst.w	r8, #1
 8006058:	d0de      	beq.n	8006018 <_dtoa_r+0xa10>
 800605a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800605e:	d1d8      	bne.n	8006012 <_dtoa_r+0xa0a>
 8006060:	9a00      	ldr	r2, [sp, #0]
 8006062:	2339      	movs	r3, #57	@ 0x39
 8006064:	7013      	strb	r3, [r2, #0]
 8006066:	4633      	mov	r3, r6
 8006068:	461e      	mov	r6, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006070:	2a39      	cmp	r2, #57	@ 0x39
 8006072:	d052      	beq.n	800611a <_dtoa_r+0xb12>
 8006074:	3201      	adds	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e612      	b.n	8005ca0 <_dtoa_r+0x698>
 800607a:	2a00      	cmp	r2, #0
 800607c:	dd07      	ble.n	800608e <_dtoa_r+0xa86>
 800607e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006082:	d0ed      	beq.n	8006060 <_dtoa_r+0xa58>
 8006084:	9a00      	ldr	r2, [sp, #0]
 8006086:	f108 0301 	add.w	r3, r8, #1
 800608a:	7013      	strb	r3, [r2, #0]
 800608c:	e608      	b.n	8005ca0 <_dtoa_r+0x698>
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	9a07      	ldr	r2, [sp, #28]
 8006092:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006098:	4293      	cmp	r3, r2
 800609a:	d028      	beq.n	80060ee <_dtoa_r+0xae6>
 800609c:	4649      	mov	r1, r9
 800609e:	2300      	movs	r3, #0
 80060a0:	220a      	movs	r2, #10
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 f9d6 	bl	8006454 <__multadd>
 80060a8:	42af      	cmp	r7, r5
 80060aa:	4681      	mov	r9, r0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f04f 020a 	mov.w	r2, #10
 80060b4:	4639      	mov	r1, r7
 80060b6:	4658      	mov	r0, fp
 80060b8:	d107      	bne.n	80060ca <_dtoa_r+0xac2>
 80060ba:	f000 f9cb 	bl	8006454 <__multadd>
 80060be:	4607      	mov	r7, r0
 80060c0:	4605      	mov	r5, r0
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	3301      	adds	r3, #1
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	e774      	b.n	8005fb4 <_dtoa_r+0x9ac>
 80060ca:	f000 f9c3 	bl	8006454 <__multadd>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4607      	mov	r7, r0
 80060d2:	2300      	movs	r3, #0
 80060d4:	220a      	movs	r2, #10
 80060d6:	4658      	mov	r0, fp
 80060d8:	f000 f9bc 	bl	8006454 <__multadd>
 80060dc:	4605      	mov	r5, r0
 80060de:	e7f0      	b.n	80060c2 <_dtoa_r+0xaba>
 80060e0:	9b00      	ldr	r3, [sp, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfcc      	ite	gt
 80060e6:	461e      	movgt	r6, r3
 80060e8:	2601      	movle	r6, #1
 80060ea:	4456      	add	r6, sl
 80060ec:	2700      	movs	r7, #0
 80060ee:	4649      	mov	r1, r9
 80060f0:	2201      	movs	r2, #1
 80060f2:	4658      	mov	r0, fp
 80060f4:	f000 fb5a 	bl	80067ac <__lshift>
 80060f8:	4621      	mov	r1, r4
 80060fa:	4681      	mov	r9, r0
 80060fc:	f000 fbc2 	bl	8006884 <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	dcb0      	bgt.n	8006066 <_dtoa_r+0xa5e>
 8006104:	d102      	bne.n	800610c <_dtoa_r+0xb04>
 8006106:	f018 0f01 	tst.w	r8, #1
 800610a:	d1ac      	bne.n	8006066 <_dtoa_r+0xa5e>
 800610c:	4633      	mov	r3, r6
 800610e:	461e      	mov	r6, r3
 8006110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006114:	2a30      	cmp	r2, #48	@ 0x30
 8006116:	d0fa      	beq.n	800610e <_dtoa_r+0xb06>
 8006118:	e5c2      	b.n	8005ca0 <_dtoa_r+0x698>
 800611a:	459a      	cmp	sl, r3
 800611c:	d1a4      	bne.n	8006068 <_dtoa_r+0xa60>
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	3301      	adds	r3, #1
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	2331      	movs	r3, #49	@ 0x31
 8006126:	f88a 3000 	strb.w	r3, [sl]
 800612a:	e5b9      	b.n	8005ca0 <_dtoa_r+0x698>
 800612c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800612e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800618c <_dtoa_r+0xb84>
 8006132:	b11b      	cbz	r3, 800613c <_dtoa_r+0xb34>
 8006134:	f10a 0308 	add.w	r3, sl, #8
 8006138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4650      	mov	r0, sl
 800613e:	b019      	add	sp, #100	@ 0x64
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006146:	2b01      	cmp	r3, #1
 8006148:	f77f ae37 	ble.w	8005dba <_dtoa_r+0x7b2>
 800614c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800614e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006150:	2001      	movs	r0, #1
 8006152:	e655      	b.n	8005e00 <_dtoa_r+0x7f8>
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f77f aed6 	ble.w	8005f08 <_dtoa_r+0x900>
 800615c:	4656      	mov	r6, sl
 800615e:	4621      	mov	r1, r4
 8006160:	4648      	mov	r0, r9
 8006162:	f7ff f9c6 	bl	80054f2 <quorem>
 8006166:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800616a:	f806 8b01 	strb.w	r8, [r6], #1
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	eba6 020a 	sub.w	r2, r6, sl
 8006174:	4293      	cmp	r3, r2
 8006176:	ddb3      	ble.n	80060e0 <_dtoa_r+0xad8>
 8006178:	4649      	mov	r1, r9
 800617a:	2300      	movs	r3, #0
 800617c:	220a      	movs	r2, #10
 800617e:	4658      	mov	r0, fp
 8006180:	f000 f968 	bl	8006454 <__multadd>
 8006184:	4681      	mov	r9, r0
 8006186:	e7ea      	b.n	800615e <_dtoa_r+0xb56>
 8006188:	08007a00 	.word	0x08007a00
 800618c:	08007984 	.word	0x08007984

08006190 <_free_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4605      	mov	r5, r0
 8006194:	2900      	cmp	r1, #0
 8006196:	d041      	beq.n	800621c <_free_r+0x8c>
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f0c      	subs	r4, r1, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	18e4      	addlt	r4, r4, r3
 80061a4:	f000 f8e8 	bl	8006378 <__malloc_lock>
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <_free_r+0x90>)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	b933      	cbnz	r3, 80061bc <_free_r+0x2c>
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	6014      	str	r4, [r2, #0]
 80061b2:	4628      	mov	r0, r5
 80061b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b8:	f000 b8e4 	b.w	8006384 <__malloc_unlock>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d908      	bls.n	80061d2 <_free_r+0x42>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	1821      	adds	r1, r4, r0
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf01      	itttt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	1809      	addeq	r1, r1, r0
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	e7ed      	b.n	80061ae <_free_r+0x1e>
 80061d2:	461a      	mov	r2, r3
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b10b      	cbz	r3, 80061dc <_free_r+0x4c>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d9fa      	bls.n	80061d2 <_free_r+0x42>
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	1850      	adds	r0, r2, r1
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d10b      	bne.n	80061fc <_free_r+0x6c>
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	4401      	add	r1, r0
 80061e8:	1850      	adds	r0, r2, r1
 80061ea:	4283      	cmp	r3, r0
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	d1e0      	bne.n	80061b2 <_free_r+0x22>
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	4408      	add	r0, r1
 80061f8:	6010      	str	r0, [r2, #0]
 80061fa:	e7da      	b.n	80061b2 <_free_r+0x22>
 80061fc:	d902      	bls.n	8006204 <_free_r+0x74>
 80061fe:	230c      	movs	r3, #12
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	e7d6      	b.n	80061b2 <_free_r+0x22>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf04      	itt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	bf04      	itt	eq
 8006214:	1809      	addeq	r1, r1, r0
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	6054      	str	r4, [r2, #4]
 800621a:	e7ca      	b.n	80061b2 <_free_r+0x22>
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	bf00      	nop
 8006220:	20000864 	.word	0x20000864

08006224 <malloc>:
 8006224:	4b02      	ldr	r3, [pc, #8]	@ (8006230 <malloc+0xc>)
 8006226:	4601      	mov	r1, r0
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f000 b825 	b.w	8006278 <_malloc_r>
 800622e:	bf00      	nop
 8006230:	20000018 	.word	0x20000018

08006234 <sbrk_aligned>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4e0f      	ldr	r6, [pc, #60]	@ (8006274 <sbrk_aligned+0x40>)
 8006238:	460c      	mov	r4, r1
 800623a:	6831      	ldr	r1, [r6, #0]
 800623c:	4605      	mov	r5, r0
 800623e:	b911      	cbnz	r1, 8006246 <sbrk_aligned+0x12>
 8006240:	f000 fcd4 	bl	8006bec <_sbrk_r>
 8006244:	6030      	str	r0, [r6, #0]
 8006246:	4621      	mov	r1, r4
 8006248:	4628      	mov	r0, r5
 800624a:	f000 fccf 	bl	8006bec <_sbrk_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d103      	bne.n	800625a <sbrk_aligned+0x26>
 8006252:	f04f 34ff 	mov.w	r4, #4294967295
 8006256:	4620      	mov	r0, r4
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	1cc4      	adds	r4, r0, #3
 800625c:	f024 0403 	bic.w	r4, r4, #3
 8006260:	42a0      	cmp	r0, r4
 8006262:	d0f8      	beq.n	8006256 <sbrk_aligned+0x22>
 8006264:	1a21      	subs	r1, r4, r0
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fcc0 	bl	8006bec <_sbrk_r>
 800626c:	3001      	adds	r0, #1
 800626e:	d1f2      	bne.n	8006256 <sbrk_aligned+0x22>
 8006270:	e7ef      	b.n	8006252 <sbrk_aligned+0x1e>
 8006272:	bf00      	nop
 8006274:	20000860 	.word	0x20000860

08006278 <_malloc_r>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	1ccd      	adds	r5, r1, #3
 800627e:	f025 0503 	bic.w	r5, r5, #3
 8006282:	3508      	adds	r5, #8
 8006284:	2d0c      	cmp	r5, #12
 8006286:	bf38      	it	cc
 8006288:	250c      	movcc	r5, #12
 800628a:	2d00      	cmp	r5, #0
 800628c:	4606      	mov	r6, r0
 800628e:	db01      	blt.n	8006294 <_malloc_r+0x1c>
 8006290:	42a9      	cmp	r1, r5
 8006292:	d904      	bls.n	800629e <_malloc_r+0x26>
 8006294:	230c      	movs	r3, #12
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	2000      	movs	r0, #0
 800629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006374 <_malloc_r+0xfc>
 80062a2:	f000 f869 	bl	8006378 <__malloc_lock>
 80062a6:	f8d8 3000 	ldr.w	r3, [r8]
 80062aa:	461c      	mov	r4, r3
 80062ac:	bb44      	cbnz	r4, 8006300 <_malloc_r+0x88>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff ffbf 	bl	8006234 <sbrk_aligned>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	4604      	mov	r4, r0
 80062ba:	d158      	bne.n	800636e <_malloc_r+0xf6>
 80062bc:	f8d8 4000 	ldr.w	r4, [r8]
 80062c0:	4627      	mov	r7, r4
 80062c2:	2f00      	cmp	r7, #0
 80062c4:	d143      	bne.n	800634e <_malloc_r+0xd6>
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	d04b      	beq.n	8006362 <_malloc_r+0xea>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	4639      	mov	r1, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	eb04 0903 	add.w	r9, r4, r3
 80062d4:	f000 fc8a 	bl	8006bec <_sbrk_r>
 80062d8:	4581      	cmp	r9, r0
 80062da:	d142      	bne.n	8006362 <_malloc_r+0xea>
 80062dc:	6821      	ldr	r1, [r4, #0]
 80062de:	1a6d      	subs	r5, r5, r1
 80062e0:	4629      	mov	r1, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ffa6 	bl	8006234 <sbrk_aligned>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d03a      	beq.n	8006362 <_malloc_r+0xea>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	442b      	add	r3, r5
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	f8d8 3000 	ldr.w	r3, [r8]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	bb62      	cbnz	r2, 8006354 <_malloc_r+0xdc>
 80062fa:	f8c8 7000 	str.w	r7, [r8]
 80062fe:	e00f      	b.n	8006320 <_malloc_r+0xa8>
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	1b52      	subs	r2, r2, r5
 8006304:	d420      	bmi.n	8006348 <_malloc_r+0xd0>
 8006306:	2a0b      	cmp	r2, #11
 8006308:	d917      	bls.n	800633a <_malloc_r+0xc2>
 800630a:	1961      	adds	r1, r4, r5
 800630c:	42a3      	cmp	r3, r4
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	bf18      	it	ne
 8006312:	6059      	strne	r1, [r3, #4]
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	bf08      	it	eq
 8006318:	f8c8 1000 	streq.w	r1, [r8]
 800631c:	5162      	str	r2, [r4, r5]
 800631e:	604b      	str	r3, [r1, #4]
 8006320:	4630      	mov	r0, r6
 8006322:	f000 f82f 	bl	8006384 <__malloc_unlock>
 8006326:	f104 000b 	add.w	r0, r4, #11
 800632a:	1d23      	adds	r3, r4, #4
 800632c:	f020 0007 	bic.w	r0, r0, #7
 8006330:	1ac2      	subs	r2, r0, r3
 8006332:	bf1c      	itt	ne
 8006334:	1a1b      	subne	r3, r3, r0
 8006336:	50a3      	strne	r3, [r4, r2]
 8006338:	e7af      	b.n	800629a <_malloc_r+0x22>
 800633a:	6862      	ldr	r2, [r4, #4]
 800633c:	42a3      	cmp	r3, r4
 800633e:	bf0c      	ite	eq
 8006340:	f8c8 2000 	streq.w	r2, [r8]
 8006344:	605a      	strne	r2, [r3, #4]
 8006346:	e7eb      	b.n	8006320 <_malloc_r+0xa8>
 8006348:	4623      	mov	r3, r4
 800634a:	6864      	ldr	r4, [r4, #4]
 800634c:	e7ae      	b.n	80062ac <_malloc_r+0x34>
 800634e:	463c      	mov	r4, r7
 8006350:	687f      	ldr	r7, [r7, #4]
 8006352:	e7b6      	b.n	80062c2 <_malloc_r+0x4a>
 8006354:	461a      	mov	r2, r3
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	42a3      	cmp	r3, r4
 800635a:	d1fb      	bne.n	8006354 <_malloc_r+0xdc>
 800635c:	2300      	movs	r3, #0
 800635e:	6053      	str	r3, [r2, #4]
 8006360:	e7de      	b.n	8006320 <_malloc_r+0xa8>
 8006362:	230c      	movs	r3, #12
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	4630      	mov	r0, r6
 8006368:	f000 f80c 	bl	8006384 <__malloc_unlock>
 800636c:	e794      	b.n	8006298 <_malloc_r+0x20>
 800636e:	6005      	str	r5, [r0, #0]
 8006370:	e7d6      	b.n	8006320 <_malloc_r+0xa8>
 8006372:	bf00      	nop
 8006374:	20000864 	.word	0x20000864

08006378 <__malloc_lock>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__malloc_lock+0x8>)
 800637a:	f7ff b8b8 	b.w	80054ee <__retarget_lock_acquire_recursive>
 800637e:	bf00      	nop
 8006380:	2000085c 	.word	0x2000085c

08006384 <__malloc_unlock>:
 8006384:	4801      	ldr	r0, [pc, #4]	@ (800638c <__malloc_unlock+0x8>)
 8006386:	f7ff b8b3 	b.w	80054f0 <__retarget_lock_release_recursive>
 800638a:	bf00      	nop
 800638c:	2000085c 	.word	0x2000085c

08006390 <_Balloc>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	69c6      	ldr	r6, [r0, #28]
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	b976      	cbnz	r6, 80063b8 <_Balloc+0x28>
 800639a:	2010      	movs	r0, #16
 800639c:	f7ff ff42 	bl	8006224 <malloc>
 80063a0:	4602      	mov	r2, r0
 80063a2:	61e0      	str	r0, [r4, #28]
 80063a4:	b920      	cbnz	r0, 80063b0 <_Balloc+0x20>
 80063a6:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <_Balloc+0x78>)
 80063a8:	4818      	ldr	r0, [pc, #96]	@ (800640c <_Balloc+0x7c>)
 80063aa:	216b      	movs	r1, #107	@ 0x6b
 80063ac:	f000 fc3c 	bl	8006c28 <__assert_func>
 80063b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063b4:	6006      	str	r6, [r0, #0]
 80063b6:	60c6      	str	r6, [r0, #12]
 80063b8:	69e6      	ldr	r6, [r4, #28]
 80063ba:	68f3      	ldr	r3, [r6, #12]
 80063bc:	b183      	cbz	r3, 80063e0 <_Balloc+0x50>
 80063be:	69e3      	ldr	r3, [r4, #28]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063c6:	b9b8      	cbnz	r0, 80063f8 <_Balloc+0x68>
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f605 	lsl.w	r6, r1, r5
 80063ce:	1d72      	adds	r2, r6, #5
 80063d0:	0092      	lsls	r2, r2, #2
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fc46 	bl	8006c64 <_calloc_r>
 80063d8:	b160      	cbz	r0, 80063f4 <_Balloc+0x64>
 80063da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063de:	e00e      	b.n	80063fe <_Balloc+0x6e>
 80063e0:	2221      	movs	r2, #33	@ 0x21
 80063e2:	2104      	movs	r1, #4
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fc3d 	bl	8006c64 <_calloc_r>
 80063ea:	69e3      	ldr	r3, [r4, #28]
 80063ec:	60f0      	str	r0, [r6, #12]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e4      	bne.n	80063be <_Balloc+0x2e>
 80063f4:	2000      	movs	r0, #0
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	6802      	ldr	r2, [r0, #0]
 80063fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063fe:	2300      	movs	r3, #0
 8006400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006404:	e7f7      	b.n	80063f6 <_Balloc+0x66>
 8006406:	bf00      	nop
 8006408:	08007991 	.word	0x08007991
 800640c:	08007a11 	.word	0x08007a11

08006410 <_Bfree>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	69c6      	ldr	r6, [r0, #28]
 8006414:	4605      	mov	r5, r0
 8006416:	460c      	mov	r4, r1
 8006418:	b976      	cbnz	r6, 8006438 <_Bfree+0x28>
 800641a:	2010      	movs	r0, #16
 800641c:	f7ff ff02 	bl	8006224 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	61e8      	str	r0, [r5, #28]
 8006424:	b920      	cbnz	r0, 8006430 <_Bfree+0x20>
 8006426:	4b09      	ldr	r3, [pc, #36]	@ (800644c <_Bfree+0x3c>)
 8006428:	4809      	ldr	r0, [pc, #36]	@ (8006450 <_Bfree+0x40>)
 800642a:	218f      	movs	r1, #143	@ 0x8f
 800642c:	f000 fbfc 	bl	8006c28 <__assert_func>
 8006430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006434:	6006      	str	r6, [r0, #0]
 8006436:	60c6      	str	r6, [r0, #12]
 8006438:	b13c      	cbz	r4, 800644a <_Bfree+0x3a>
 800643a:	69eb      	ldr	r3, [r5, #28]
 800643c:	6862      	ldr	r2, [r4, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006444:	6021      	str	r1, [r4, #0]
 8006446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	08007991 	.word	0x08007991
 8006450:	08007a11 	.word	0x08007a11

08006454 <__multadd>:
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	690d      	ldr	r5, [r1, #16]
 800645a:	4607      	mov	r7, r0
 800645c:	460c      	mov	r4, r1
 800645e:	461e      	mov	r6, r3
 8006460:	f101 0c14 	add.w	ip, r1, #20
 8006464:	2000      	movs	r0, #0
 8006466:	f8dc 3000 	ldr.w	r3, [ip]
 800646a:	b299      	uxth	r1, r3
 800646c:	fb02 6101 	mla	r1, r2, r1, r6
 8006470:	0c1e      	lsrs	r6, r3, #16
 8006472:	0c0b      	lsrs	r3, r1, #16
 8006474:	fb02 3306 	mla	r3, r2, r6, r3
 8006478:	b289      	uxth	r1, r1
 800647a:	3001      	adds	r0, #1
 800647c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006480:	4285      	cmp	r5, r0
 8006482:	f84c 1b04 	str.w	r1, [ip], #4
 8006486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800648a:	dcec      	bgt.n	8006466 <__multadd+0x12>
 800648c:	b30e      	cbz	r6, 80064d2 <__multadd+0x7e>
 800648e:	68a3      	ldr	r3, [r4, #8]
 8006490:	42ab      	cmp	r3, r5
 8006492:	dc19      	bgt.n	80064c8 <__multadd+0x74>
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4638      	mov	r0, r7
 8006498:	3101      	adds	r1, #1
 800649a:	f7ff ff79 	bl	8006390 <_Balloc>
 800649e:	4680      	mov	r8, r0
 80064a0:	b928      	cbnz	r0, 80064ae <__multadd+0x5a>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <__multadd+0x84>)
 80064a6:	480d      	ldr	r0, [pc, #52]	@ (80064dc <__multadd+0x88>)
 80064a8:	21ba      	movs	r1, #186	@ 0xba
 80064aa:	f000 fbbd 	bl	8006c28 <__assert_func>
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	3202      	adds	r2, #2
 80064b2:	f104 010c 	add.w	r1, r4, #12
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	300c      	adds	r0, #12
 80064ba:	f000 fba7 	bl	8006c0c <memcpy>
 80064be:	4621      	mov	r1, r4
 80064c0:	4638      	mov	r0, r7
 80064c2:	f7ff ffa5 	bl	8006410 <_Bfree>
 80064c6:	4644      	mov	r4, r8
 80064c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064cc:	3501      	adds	r5, #1
 80064ce:	615e      	str	r6, [r3, #20]
 80064d0:	6125      	str	r5, [r4, #16]
 80064d2:	4620      	mov	r0, r4
 80064d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d8:	08007a00 	.word	0x08007a00
 80064dc:	08007a11 	.word	0x08007a11

080064e0 <__hi0bits>:
 80064e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064e4:	4603      	mov	r3, r0
 80064e6:	bf36      	itet	cc
 80064e8:	0403      	lslcc	r3, r0, #16
 80064ea:	2000      	movcs	r0, #0
 80064ec:	2010      	movcc	r0, #16
 80064ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064f2:	bf3c      	itt	cc
 80064f4:	021b      	lslcc	r3, r3, #8
 80064f6:	3008      	addcc	r0, #8
 80064f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064fc:	bf3c      	itt	cc
 80064fe:	011b      	lslcc	r3, r3, #4
 8006500:	3004      	addcc	r0, #4
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006506:	bf3c      	itt	cc
 8006508:	009b      	lslcc	r3, r3, #2
 800650a:	3002      	addcc	r0, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	db05      	blt.n	800651c <__hi0bits+0x3c>
 8006510:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006514:	f100 0001 	add.w	r0, r0, #1
 8006518:	bf08      	it	eq
 800651a:	2020      	moveq	r0, #32
 800651c:	4770      	bx	lr

0800651e <__lo0bits>:
 800651e:	6803      	ldr	r3, [r0, #0]
 8006520:	4602      	mov	r2, r0
 8006522:	f013 0007 	ands.w	r0, r3, #7
 8006526:	d00b      	beq.n	8006540 <__lo0bits+0x22>
 8006528:	07d9      	lsls	r1, r3, #31
 800652a:	d421      	bmi.n	8006570 <__lo0bits+0x52>
 800652c:	0798      	lsls	r0, r3, #30
 800652e:	bf49      	itett	mi
 8006530:	085b      	lsrmi	r3, r3, #1
 8006532:	089b      	lsrpl	r3, r3, #2
 8006534:	2001      	movmi	r0, #1
 8006536:	6013      	strmi	r3, [r2, #0]
 8006538:	bf5c      	itt	pl
 800653a:	6013      	strpl	r3, [r2, #0]
 800653c:	2002      	movpl	r0, #2
 800653e:	4770      	bx	lr
 8006540:	b299      	uxth	r1, r3
 8006542:	b909      	cbnz	r1, 8006548 <__lo0bits+0x2a>
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	2010      	movs	r0, #16
 8006548:	b2d9      	uxtb	r1, r3
 800654a:	b909      	cbnz	r1, 8006550 <__lo0bits+0x32>
 800654c:	3008      	adds	r0, #8
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	0719      	lsls	r1, r3, #28
 8006552:	bf04      	itt	eq
 8006554:	091b      	lsreq	r3, r3, #4
 8006556:	3004      	addeq	r0, #4
 8006558:	0799      	lsls	r1, r3, #30
 800655a:	bf04      	itt	eq
 800655c:	089b      	lsreq	r3, r3, #2
 800655e:	3002      	addeq	r0, #2
 8006560:	07d9      	lsls	r1, r3, #31
 8006562:	d403      	bmi.n	800656c <__lo0bits+0x4e>
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	f100 0001 	add.w	r0, r0, #1
 800656a:	d003      	beq.n	8006574 <__lo0bits+0x56>
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4770      	bx	lr
 8006570:	2000      	movs	r0, #0
 8006572:	4770      	bx	lr
 8006574:	2020      	movs	r0, #32
 8006576:	4770      	bx	lr

08006578 <__i2b>:
 8006578:	b510      	push	{r4, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	2101      	movs	r1, #1
 800657e:	f7ff ff07 	bl	8006390 <_Balloc>
 8006582:	4602      	mov	r2, r0
 8006584:	b928      	cbnz	r0, 8006592 <__i2b+0x1a>
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <__i2b+0x24>)
 8006588:	4805      	ldr	r0, [pc, #20]	@ (80065a0 <__i2b+0x28>)
 800658a:	f240 1145 	movw	r1, #325	@ 0x145
 800658e:	f000 fb4b 	bl	8006c28 <__assert_func>
 8006592:	2301      	movs	r3, #1
 8006594:	6144      	str	r4, [r0, #20]
 8006596:	6103      	str	r3, [r0, #16]
 8006598:	bd10      	pop	{r4, pc}
 800659a:	bf00      	nop
 800659c:	08007a00 	.word	0x08007a00
 80065a0:	08007a11 	.word	0x08007a11

080065a4 <__multiply>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	4614      	mov	r4, r2
 80065aa:	690a      	ldr	r2, [r1, #16]
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bfa8      	it	ge
 80065b2:	4623      	movge	r3, r4
 80065b4:	460f      	mov	r7, r1
 80065b6:	bfa4      	itt	ge
 80065b8:	460c      	movge	r4, r1
 80065ba:	461f      	movge	r7, r3
 80065bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80065c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80065c4:	68a3      	ldr	r3, [r4, #8]
 80065c6:	6861      	ldr	r1, [r4, #4]
 80065c8:	eb0a 0609 	add.w	r6, sl, r9
 80065cc:	42b3      	cmp	r3, r6
 80065ce:	b085      	sub	sp, #20
 80065d0:	bfb8      	it	lt
 80065d2:	3101      	addlt	r1, #1
 80065d4:	f7ff fedc 	bl	8006390 <_Balloc>
 80065d8:	b930      	cbnz	r0, 80065e8 <__multiply+0x44>
 80065da:	4602      	mov	r2, r0
 80065dc:	4b44      	ldr	r3, [pc, #272]	@ (80066f0 <__multiply+0x14c>)
 80065de:	4845      	ldr	r0, [pc, #276]	@ (80066f4 <__multiply+0x150>)
 80065e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065e4:	f000 fb20 	bl	8006c28 <__assert_func>
 80065e8:	f100 0514 	add.w	r5, r0, #20
 80065ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065f0:	462b      	mov	r3, r5
 80065f2:	2200      	movs	r2, #0
 80065f4:	4543      	cmp	r3, r8
 80065f6:	d321      	bcc.n	800663c <__multiply+0x98>
 80065f8:	f107 0114 	add.w	r1, r7, #20
 80065fc:	f104 0214 	add.w	r2, r4, #20
 8006600:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006604:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	1b13      	subs	r3, r2, r4
 800660c:	3b15      	subs	r3, #21
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	3304      	adds	r3, #4
 8006614:	f104 0715 	add.w	r7, r4, #21
 8006618:	42ba      	cmp	r2, r7
 800661a:	bf38      	it	cc
 800661c:	2304      	movcc	r3, #4
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	9103      	str	r1, [sp, #12]
 8006624:	428b      	cmp	r3, r1
 8006626:	d80c      	bhi.n	8006642 <__multiply+0x9e>
 8006628:	2e00      	cmp	r6, #0
 800662a:	dd03      	ble.n	8006634 <__multiply+0x90>
 800662c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05b      	beq.n	80066ec <__multiply+0x148>
 8006634:	6106      	str	r6, [r0, #16]
 8006636:	b005      	add	sp, #20
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	f843 2b04 	str.w	r2, [r3], #4
 8006640:	e7d8      	b.n	80065f4 <__multiply+0x50>
 8006642:	f8b1 a000 	ldrh.w	sl, [r1]
 8006646:	f1ba 0f00 	cmp.w	sl, #0
 800664a:	d024      	beq.n	8006696 <__multiply+0xf2>
 800664c:	f104 0e14 	add.w	lr, r4, #20
 8006650:	46a9      	mov	r9, r5
 8006652:	f04f 0c00 	mov.w	ip, #0
 8006656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800665a:	f8d9 3000 	ldr.w	r3, [r9]
 800665e:	fa1f fb87 	uxth.w	fp, r7
 8006662:	b29b      	uxth	r3, r3
 8006664:	fb0a 330b 	mla	r3, sl, fp, r3
 8006668:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800666c:	f8d9 7000 	ldr.w	r7, [r9]
 8006670:	4463      	add	r3, ip
 8006672:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006676:	fb0a c70b 	mla	r7, sl, fp, ip
 800667a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006684:	4572      	cmp	r2, lr
 8006686:	f849 3b04 	str.w	r3, [r9], #4
 800668a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800668e:	d8e2      	bhi.n	8006656 <__multiply+0xb2>
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	f845 c003 	str.w	ip, [r5, r3]
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800669c:	3104      	adds	r1, #4
 800669e:	f1b9 0f00 	cmp.w	r9, #0
 80066a2:	d021      	beq.n	80066e8 <__multiply+0x144>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	f104 0c14 	add.w	ip, r4, #20
 80066aa:	46ae      	mov	lr, r5
 80066ac:	f04f 0a00 	mov.w	sl, #0
 80066b0:	f8bc b000 	ldrh.w	fp, [ip]
 80066b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80066b8:	fb09 770b 	mla	r7, r9, fp, r7
 80066bc:	4457      	add	r7, sl
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066c4:	f84e 3b04 	str.w	r3, [lr], #4
 80066c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066d0:	f8be 3000 	ldrh.w	r3, [lr]
 80066d4:	fb09 330a 	mla	r3, r9, sl, r3
 80066d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80066dc:	4562      	cmp	r2, ip
 80066de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066e2:	d8e5      	bhi.n	80066b0 <__multiply+0x10c>
 80066e4:	9f01      	ldr	r7, [sp, #4]
 80066e6:	51eb      	str	r3, [r5, r7]
 80066e8:	3504      	adds	r5, #4
 80066ea:	e799      	b.n	8006620 <__multiply+0x7c>
 80066ec:	3e01      	subs	r6, #1
 80066ee:	e79b      	b.n	8006628 <__multiply+0x84>
 80066f0:	08007a00 	.word	0x08007a00
 80066f4:	08007a11 	.word	0x08007a11

080066f8 <__pow5mult>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	4615      	mov	r5, r2
 80066fe:	f012 0203 	ands.w	r2, r2, #3
 8006702:	4607      	mov	r7, r0
 8006704:	460e      	mov	r6, r1
 8006706:	d007      	beq.n	8006718 <__pow5mult+0x20>
 8006708:	4c25      	ldr	r4, [pc, #148]	@ (80067a0 <__pow5mult+0xa8>)
 800670a:	3a01      	subs	r2, #1
 800670c:	2300      	movs	r3, #0
 800670e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006712:	f7ff fe9f 	bl	8006454 <__multadd>
 8006716:	4606      	mov	r6, r0
 8006718:	10ad      	asrs	r5, r5, #2
 800671a:	d03d      	beq.n	8006798 <__pow5mult+0xa0>
 800671c:	69fc      	ldr	r4, [r7, #28]
 800671e:	b97c      	cbnz	r4, 8006740 <__pow5mult+0x48>
 8006720:	2010      	movs	r0, #16
 8006722:	f7ff fd7f 	bl	8006224 <malloc>
 8006726:	4602      	mov	r2, r0
 8006728:	61f8      	str	r0, [r7, #28]
 800672a:	b928      	cbnz	r0, 8006738 <__pow5mult+0x40>
 800672c:	4b1d      	ldr	r3, [pc, #116]	@ (80067a4 <__pow5mult+0xac>)
 800672e:	481e      	ldr	r0, [pc, #120]	@ (80067a8 <__pow5mult+0xb0>)
 8006730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006734:	f000 fa78 	bl	8006c28 <__assert_func>
 8006738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800673c:	6004      	str	r4, [r0, #0]
 800673e:	60c4      	str	r4, [r0, #12]
 8006740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006748:	b94c      	cbnz	r4, 800675e <__pow5mult+0x66>
 800674a:	f240 2171 	movw	r1, #625	@ 0x271
 800674e:	4638      	mov	r0, r7
 8006750:	f7ff ff12 	bl	8006578 <__i2b>
 8006754:	2300      	movs	r3, #0
 8006756:	f8c8 0008 	str.w	r0, [r8, #8]
 800675a:	4604      	mov	r4, r0
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	07eb      	lsls	r3, r5, #31
 8006764:	d50a      	bpl.n	800677c <__pow5mult+0x84>
 8006766:	4631      	mov	r1, r6
 8006768:	4622      	mov	r2, r4
 800676a:	4638      	mov	r0, r7
 800676c:	f7ff ff1a 	bl	80065a4 <__multiply>
 8006770:	4631      	mov	r1, r6
 8006772:	4680      	mov	r8, r0
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff fe4b 	bl	8006410 <_Bfree>
 800677a:	4646      	mov	r6, r8
 800677c:	106d      	asrs	r5, r5, #1
 800677e:	d00b      	beq.n	8006798 <__pow5mult+0xa0>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	b938      	cbnz	r0, 8006794 <__pow5mult+0x9c>
 8006784:	4622      	mov	r2, r4
 8006786:	4621      	mov	r1, r4
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff0b 	bl	80065a4 <__multiply>
 800678e:	6020      	str	r0, [r4, #0]
 8006790:	f8c0 9000 	str.w	r9, [r0]
 8006794:	4604      	mov	r4, r0
 8006796:	e7e4      	b.n	8006762 <__pow5mult+0x6a>
 8006798:	4630      	mov	r0, r6
 800679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679e:	bf00      	nop
 80067a0:	08007a6c 	.word	0x08007a6c
 80067a4:	08007991 	.word	0x08007991
 80067a8:	08007a11 	.word	0x08007a11

080067ac <__lshift>:
 80067ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b0:	460c      	mov	r4, r1
 80067b2:	6849      	ldr	r1, [r1, #4]
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	4607      	mov	r7, r0
 80067be:	4691      	mov	r9, r2
 80067c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067c4:	f108 0601 	add.w	r6, r8, #1
 80067c8:	42b3      	cmp	r3, r6
 80067ca:	db0b      	blt.n	80067e4 <__lshift+0x38>
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff fddf 	bl	8006390 <_Balloc>
 80067d2:	4605      	mov	r5, r0
 80067d4:	b948      	cbnz	r0, 80067ea <__lshift+0x3e>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b28      	ldr	r3, [pc, #160]	@ (800687c <__lshift+0xd0>)
 80067da:	4829      	ldr	r0, [pc, #164]	@ (8006880 <__lshift+0xd4>)
 80067dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067e0:	f000 fa22 	bl	8006c28 <__assert_func>
 80067e4:	3101      	adds	r1, #1
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	e7ee      	b.n	80067c8 <__lshift+0x1c>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f100 0114 	add.w	r1, r0, #20
 80067f0:	f100 0210 	add.w	r2, r0, #16
 80067f4:	4618      	mov	r0, r3
 80067f6:	4553      	cmp	r3, sl
 80067f8:	db33      	blt.n	8006862 <__lshift+0xb6>
 80067fa:	6920      	ldr	r0, [r4, #16]
 80067fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006800:	f104 0314 	add.w	r3, r4, #20
 8006804:	f019 091f 	ands.w	r9, r9, #31
 8006808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800680c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006810:	d02b      	beq.n	800686a <__lshift+0xbe>
 8006812:	f1c9 0e20 	rsb	lr, r9, #32
 8006816:	468a      	mov	sl, r1
 8006818:	2200      	movs	r2, #0
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	fa00 f009 	lsl.w	r0, r0, r9
 8006820:	4310      	orrs	r0, r2
 8006822:	f84a 0b04 	str.w	r0, [sl], #4
 8006826:	f853 2b04 	ldr.w	r2, [r3], #4
 800682a:	459c      	cmp	ip, r3
 800682c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006830:	d8f3      	bhi.n	800681a <__lshift+0x6e>
 8006832:	ebac 0304 	sub.w	r3, ip, r4
 8006836:	3b15      	subs	r3, #21
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	3304      	adds	r3, #4
 800683e:	f104 0015 	add.w	r0, r4, #21
 8006842:	4584      	cmp	ip, r0
 8006844:	bf38      	it	cc
 8006846:	2304      	movcc	r3, #4
 8006848:	50ca      	str	r2, [r1, r3]
 800684a:	b10a      	cbz	r2, 8006850 <__lshift+0xa4>
 800684c:	f108 0602 	add.w	r6, r8, #2
 8006850:	3e01      	subs	r6, #1
 8006852:	4638      	mov	r0, r7
 8006854:	612e      	str	r6, [r5, #16]
 8006856:	4621      	mov	r1, r4
 8006858:	f7ff fdda 	bl	8006410 <_Bfree>
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	f842 0f04 	str.w	r0, [r2, #4]!
 8006866:	3301      	adds	r3, #1
 8006868:	e7c5      	b.n	80067f6 <__lshift+0x4a>
 800686a:	3904      	subs	r1, #4
 800686c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006870:	f841 2f04 	str.w	r2, [r1, #4]!
 8006874:	459c      	cmp	ip, r3
 8006876:	d8f9      	bhi.n	800686c <__lshift+0xc0>
 8006878:	e7ea      	b.n	8006850 <__lshift+0xa4>
 800687a:	bf00      	nop
 800687c:	08007a00 	.word	0x08007a00
 8006880:	08007a11 	.word	0x08007a11

08006884 <__mcmp>:
 8006884:	690a      	ldr	r2, [r1, #16]
 8006886:	4603      	mov	r3, r0
 8006888:	6900      	ldr	r0, [r0, #16]
 800688a:	1a80      	subs	r0, r0, r2
 800688c:	b530      	push	{r4, r5, lr}
 800688e:	d10e      	bne.n	80068ae <__mcmp+0x2a>
 8006890:	3314      	adds	r3, #20
 8006892:	3114      	adds	r1, #20
 8006894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800689c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068a4:	4295      	cmp	r5, r2
 80068a6:	d003      	beq.n	80068b0 <__mcmp+0x2c>
 80068a8:	d205      	bcs.n	80068b6 <__mcmp+0x32>
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	bd30      	pop	{r4, r5, pc}
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d3f3      	bcc.n	800689c <__mcmp+0x18>
 80068b4:	e7fb      	b.n	80068ae <__mcmp+0x2a>
 80068b6:	2001      	movs	r0, #1
 80068b8:	e7f9      	b.n	80068ae <__mcmp+0x2a>
	...

080068bc <__mdiff>:
 80068bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	4689      	mov	r9, r1
 80068c2:	4606      	mov	r6, r0
 80068c4:	4611      	mov	r1, r2
 80068c6:	4648      	mov	r0, r9
 80068c8:	4614      	mov	r4, r2
 80068ca:	f7ff ffdb 	bl	8006884 <__mcmp>
 80068ce:	1e05      	subs	r5, r0, #0
 80068d0:	d112      	bne.n	80068f8 <__mdiff+0x3c>
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff fd5b 	bl	8006390 <_Balloc>
 80068da:	4602      	mov	r2, r0
 80068dc:	b928      	cbnz	r0, 80068ea <__mdiff+0x2e>
 80068de:	4b3f      	ldr	r3, [pc, #252]	@ (80069dc <__mdiff+0x120>)
 80068e0:	f240 2137 	movw	r1, #567	@ 0x237
 80068e4:	483e      	ldr	r0, [pc, #248]	@ (80069e0 <__mdiff+0x124>)
 80068e6:	f000 f99f 	bl	8006c28 <__assert_func>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068f0:	4610      	mov	r0, r2
 80068f2:	b003      	add	sp, #12
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	bfbc      	itt	lt
 80068fa:	464b      	movlt	r3, r9
 80068fc:	46a1      	movlt	r9, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006904:	bfba      	itte	lt
 8006906:	461c      	movlt	r4, r3
 8006908:	2501      	movlt	r5, #1
 800690a:	2500      	movge	r5, #0
 800690c:	f7ff fd40 	bl	8006390 <_Balloc>
 8006910:	4602      	mov	r2, r0
 8006912:	b918      	cbnz	r0, 800691c <__mdiff+0x60>
 8006914:	4b31      	ldr	r3, [pc, #196]	@ (80069dc <__mdiff+0x120>)
 8006916:	f240 2145 	movw	r1, #581	@ 0x245
 800691a:	e7e3      	b.n	80068e4 <__mdiff+0x28>
 800691c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006920:	6926      	ldr	r6, [r4, #16]
 8006922:	60c5      	str	r5, [r0, #12]
 8006924:	f109 0310 	add.w	r3, r9, #16
 8006928:	f109 0514 	add.w	r5, r9, #20
 800692c:	f104 0e14 	add.w	lr, r4, #20
 8006930:	f100 0b14 	add.w	fp, r0, #20
 8006934:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006938:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	46d9      	mov	r9, fp
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	f85e 0b04 	ldr.w	r0, [lr], #4
 800694a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	fa1f f38a 	uxth.w	r3, sl
 8006954:	4619      	mov	r1, r3
 8006956:	b283      	uxth	r3, r0
 8006958:	1acb      	subs	r3, r1, r3
 800695a:	0c00      	lsrs	r0, r0, #16
 800695c:	4463      	add	r3, ip
 800695e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006962:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006966:	b29b      	uxth	r3, r3
 8006968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800696c:	4576      	cmp	r6, lr
 800696e:	f849 3b04 	str.w	r3, [r9], #4
 8006972:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006976:	d8e5      	bhi.n	8006944 <__mdiff+0x88>
 8006978:	1b33      	subs	r3, r6, r4
 800697a:	3b15      	subs	r3, #21
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	3415      	adds	r4, #21
 8006982:	3304      	adds	r3, #4
 8006984:	42a6      	cmp	r6, r4
 8006986:	bf38      	it	cc
 8006988:	2304      	movcc	r3, #4
 800698a:	441d      	add	r5, r3
 800698c:	445b      	add	r3, fp
 800698e:	461e      	mov	r6, r3
 8006990:	462c      	mov	r4, r5
 8006992:	4544      	cmp	r4, r8
 8006994:	d30e      	bcc.n	80069b4 <__mdiff+0xf8>
 8006996:	f108 0103 	add.w	r1, r8, #3
 800699a:	1b49      	subs	r1, r1, r5
 800699c:	f021 0103 	bic.w	r1, r1, #3
 80069a0:	3d03      	subs	r5, #3
 80069a2:	45a8      	cmp	r8, r5
 80069a4:	bf38      	it	cc
 80069a6:	2100      	movcc	r1, #0
 80069a8:	440b      	add	r3, r1
 80069aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069ae:	b191      	cbz	r1, 80069d6 <__mdiff+0x11a>
 80069b0:	6117      	str	r7, [r2, #16]
 80069b2:	e79d      	b.n	80068f0 <__mdiff+0x34>
 80069b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80069b8:	46e6      	mov	lr, ip
 80069ba:	0c08      	lsrs	r0, r1, #16
 80069bc:	fa1c fc81 	uxtah	ip, ip, r1
 80069c0:	4471      	add	r1, lr
 80069c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069c6:	b289      	uxth	r1, r1
 80069c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069cc:	f846 1b04 	str.w	r1, [r6], #4
 80069d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069d4:	e7dd      	b.n	8006992 <__mdiff+0xd6>
 80069d6:	3f01      	subs	r7, #1
 80069d8:	e7e7      	b.n	80069aa <__mdiff+0xee>
 80069da:	bf00      	nop
 80069dc:	08007a00 	.word	0x08007a00
 80069e0:	08007a11 	.word	0x08007a11

080069e4 <__d2b>:
 80069e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	460f      	mov	r7, r1
 80069ea:	2101      	movs	r1, #1
 80069ec:	ec59 8b10 	vmov	r8, r9, d0
 80069f0:	4616      	mov	r6, r2
 80069f2:	f7ff fccd 	bl	8006390 <_Balloc>
 80069f6:	4604      	mov	r4, r0
 80069f8:	b930      	cbnz	r0, 8006a08 <__d2b+0x24>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b23      	ldr	r3, [pc, #140]	@ (8006a8c <__d2b+0xa8>)
 80069fe:	4824      	ldr	r0, [pc, #144]	@ (8006a90 <__d2b+0xac>)
 8006a00:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a04:	f000 f910 	bl	8006c28 <__assert_func>
 8006a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a10:	b10d      	cbz	r5, 8006a16 <__d2b+0x32>
 8006a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	f1b8 0300 	subs.w	r3, r8, #0
 8006a1c:	d023      	beq.n	8006a66 <__d2b+0x82>
 8006a1e:	4668      	mov	r0, sp
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	f7ff fd7c 	bl	800651e <__lo0bits>
 8006a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a2a:	b1d0      	cbz	r0, 8006a62 <__d2b+0x7e>
 8006a2c:	f1c0 0320 	rsb	r3, r0, #32
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	430b      	orrs	r3, r1
 8006a36:	40c2      	lsrs	r2, r0
 8006a38:	6163      	str	r3, [r4, #20]
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	61a3      	str	r3, [r4, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bf0c      	ite	eq
 8006a44:	2201      	moveq	r2, #1
 8006a46:	2202      	movne	r2, #2
 8006a48:	6122      	str	r2, [r4, #16]
 8006a4a:	b1a5      	cbz	r5, 8006a76 <__d2b+0x92>
 8006a4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a50:	4405      	add	r5, r0
 8006a52:	603d      	str	r5, [r7, #0]
 8006a54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	b003      	add	sp, #12
 8006a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a62:	6161      	str	r1, [r4, #20]
 8006a64:	e7ea      	b.n	8006a3c <__d2b+0x58>
 8006a66:	a801      	add	r0, sp, #4
 8006a68:	f7ff fd59 	bl	800651e <__lo0bits>
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	6163      	str	r3, [r4, #20]
 8006a70:	3020      	adds	r0, #32
 8006a72:	2201      	movs	r2, #1
 8006a74:	e7e8      	b.n	8006a48 <__d2b+0x64>
 8006a76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a7e:	6038      	str	r0, [r7, #0]
 8006a80:	6918      	ldr	r0, [r3, #16]
 8006a82:	f7ff fd2d 	bl	80064e0 <__hi0bits>
 8006a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a8a:	e7e5      	b.n	8006a58 <__d2b+0x74>
 8006a8c:	08007a00 	.word	0x08007a00
 8006a90:	08007a11 	.word	0x08007a11

08006a94 <__sflush_r>:
 8006a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	0716      	lsls	r6, r2, #28
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d454      	bmi.n	8006b4e <__sflush_r+0xba>
 8006aa4:	684b      	ldr	r3, [r1, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dc02      	bgt.n	8006ab0 <__sflush_r+0x1c>
 8006aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd48      	ble.n	8006b42 <__sflush_r+0xae>
 8006ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d045      	beq.n	8006b42 <__sflush_r+0xae>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006abc:	682f      	ldr	r7, [r5, #0]
 8006abe:	6a21      	ldr	r1, [r4, #32]
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	d030      	beq.n	8006b26 <__sflush_r+0x92>
 8006ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	0759      	lsls	r1, r3, #29
 8006aca:	d505      	bpl.n	8006ad8 <__sflush_r+0x44>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ad2:	b10b      	cbz	r3, 8006ad8 <__sflush_r+0x44>
 8006ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	d106      	bne.n	8006af6 <__sflush_r+0x62>
 8006ae8:	6829      	ldr	r1, [r5, #0]
 8006aea:	291d      	cmp	r1, #29
 8006aec:	d82b      	bhi.n	8006b46 <__sflush_r+0xb2>
 8006aee:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <__sflush_r+0x104>)
 8006af0:	410a      	asrs	r2, r1
 8006af2:	07d6      	lsls	r6, r2, #31
 8006af4:	d427      	bmi.n	8006b46 <__sflush_r+0xb2>
 8006af6:	2200      	movs	r2, #0
 8006af8:	6062      	str	r2, [r4, #4]
 8006afa:	04d9      	lsls	r1, r3, #19
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	6022      	str	r2, [r4, #0]
 8006b00:	d504      	bpl.n	8006b0c <__sflush_r+0x78>
 8006b02:	1c42      	adds	r2, r0, #1
 8006b04:	d101      	bne.n	8006b0a <__sflush_r+0x76>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b903      	cbnz	r3, 8006b0c <__sflush_r+0x78>
 8006b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	b1b9      	cbz	r1, 8006b42 <__sflush_r+0xae>
 8006b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b16:	4299      	cmp	r1, r3
 8006b18:	d002      	beq.n	8006b20 <__sflush_r+0x8c>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7ff fb38 	bl	8006190 <_free_r>
 8006b20:	2300      	movs	r3, #0
 8006b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b24:	e00d      	b.n	8006b42 <__sflush_r+0xae>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	1c50      	adds	r0, r2, #1
 8006b30:	d1c9      	bne.n	8006ac6 <__sflush_r+0x32>
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0c6      	beq.n	8006ac6 <__sflush_r+0x32>
 8006b38:	2b1d      	cmp	r3, #29
 8006b3a:	d001      	beq.n	8006b40 <__sflush_r+0xac>
 8006b3c:	2b16      	cmp	r3, #22
 8006b3e:	d11e      	bne.n	8006b7e <__sflush_r+0xea>
 8006b40:	602f      	str	r7, [r5, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e022      	b.n	8006b8c <__sflush_r+0xf8>
 8006b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	e01b      	b.n	8006b86 <__sflush_r+0xf2>
 8006b4e:	690f      	ldr	r7, [r1, #16]
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	d0f6      	beq.n	8006b42 <__sflush_r+0xae>
 8006b54:	0793      	lsls	r3, r2, #30
 8006b56:	680e      	ldr	r6, [r1, #0]
 8006b58:	bf08      	it	eq
 8006b5a:	694b      	ldreq	r3, [r1, #20]
 8006b5c:	600f      	str	r7, [r1, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	2300      	movne	r3, #0
 8006b62:	eba6 0807 	sub.w	r8, r6, r7
 8006b66:	608b      	str	r3, [r1, #8]
 8006b68:	f1b8 0f00 	cmp.w	r8, #0
 8006b6c:	dde9      	ble.n	8006b42 <__sflush_r+0xae>
 8006b6e:	6a21      	ldr	r1, [r4, #32]
 8006b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b72:	4643      	mov	r3, r8
 8006b74:	463a      	mov	r2, r7
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b0      	blx	r6
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	dc08      	bgt.n	8006b90 <__sflush_r+0xfc>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	4407      	add	r7, r0
 8006b92:	eba8 0800 	sub.w	r8, r8, r0
 8006b96:	e7e7      	b.n	8006b68 <__sflush_r+0xd4>
 8006b98:	dfbffffe 	.word	0xdfbffffe

08006b9c <_fflush_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	690b      	ldr	r3, [r1, #16]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b913      	cbnz	r3, 8006bac <_fflush_r+0x10>
 8006ba6:	2500      	movs	r5, #0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	b118      	cbz	r0, 8006bb6 <_fflush_r+0x1a>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <_fflush_r+0x1a>
 8006bb2:	f7fe fba5 	bl	8005300 <__sinit>
 8006bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f3      	beq.n	8006ba6 <_fflush_r+0xa>
 8006bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bc0:	07d0      	lsls	r0, r2, #31
 8006bc2:	d404      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc4:	0599      	lsls	r1, r3, #22
 8006bc6:	d402      	bmi.n	8006bce <_fflush_r+0x32>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bca:	f7fe fc90 	bl	80054ee <__retarget_lock_acquire_recursive>
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	f7ff ff5f 	bl	8006a94 <__sflush_r>
 8006bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bd8:	07da      	lsls	r2, r3, #31
 8006bda:	4605      	mov	r5, r0
 8006bdc:	d4e4      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	059b      	lsls	r3, r3, #22
 8006be2:	d4e1      	bmi.n	8006ba8 <_fflush_r+0xc>
 8006be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be6:	f7fe fc83 	bl	80054f0 <__retarget_lock_release_recursive>
 8006bea:	e7dd      	b.n	8006ba8 <_fflush_r+0xc>

08006bec <_sbrk_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	@ (8006c08 <_sbrk_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fb f9d8 	bl	8001fac <_sbrk>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_sbrk_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_sbrk_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000858 	.word	0x20000858

08006c0c <memcpy>:
 8006c0c:	440a      	add	r2, r1
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c14:	d100      	bne.n	8006c18 <memcpy+0xc>
 8006c16:	4770      	bx	lr
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c22:	4291      	cmp	r1, r2
 8006c24:	d1f9      	bne.n	8006c1a <memcpy+0xe>
 8006c26:	bd10      	pop	{r4, pc}

08006c28 <__assert_func>:
 8006c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c2a:	4614      	mov	r4, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b09      	ldr	r3, [pc, #36]	@ (8006c54 <__assert_func+0x2c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4605      	mov	r5, r0
 8006c34:	68d8      	ldr	r0, [r3, #12]
 8006c36:	b954      	cbnz	r4, 8006c4e <__assert_func+0x26>
 8006c38:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <__assert_func+0x30>)
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c40:	9100      	str	r1, [sp, #0]
 8006c42:	462b      	mov	r3, r5
 8006c44:	4905      	ldr	r1, [pc, #20]	@ (8006c5c <__assert_func+0x34>)
 8006c46:	f000 f841 	bl	8006ccc <fiprintf>
 8006c4a:	f000 f851 	bl	8006cf0 <abort>
 8006c4e:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__assert_func+0x38>)
 8006c50:	e7f4      	b.n	8006c3c <__assert_func+0x14>
 8006c52:	bf00      	nop
 8006c54:	20000018 	.word	0x20000018
 8006c58:	08007bad 	.word	0x08007bad
 8006c5c:	08007b7f 	.word	0x08007b7f
 8006c60:	08007b72 	.word	0x08007b72

08006c64 <_calloc_r>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	fba1 5402 	umull	r5, r4, r1, r2
 8006c6a:	b93c      	cbnz	r4, 8006c7c <_calloc_r+0x18>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7ff fb03 	bl	8006278 <_malloc_r>
 8006c72:	4606      	mov	r6, r0
 8006c74:	b928      	cbnz	r0, 8006c82 <_calloc_r+0x1e>
 8006c76:	2600      	movs	r6, #0
 8006c78:	4630      	mov	r0, r6
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	220c      	movs	r2, #12
 8006c7e:	6002      	str	r2, [r0, #0]
 8006c80:	e7f9      	b.n	8006c76 <_calloc_r+0x12>
 8006c82:	462a      	mov	r2, r5
 8006c84:	4621      	mov	r1, r4
 8006c86:	f7fe fbb4 	bl	80053f2 <memset>
 8006c8a:	e7f5      	b.n	8006c78 <_calloc_r+0x14>

08006c8c <__ascii_mbtowc>:
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	b901      	cbnz	r1, 8006c92 <__ascii_mbtowc+0x6>
 8006c90:	a901      	add	r1, sp, #4
 8006c92:	b142      	cbz	r2, 8006ca6 <__ascii_mbtowc+0x1a>
 8006c94:	b14b      	cbz	r3, 8006caa <__ascii_mbtowc+0x1e>
 8006c96:	7813      	ldrb	r3, [r2, #0]
 8006c98:	600b      	str	r3, [r1, #0]
 8006c9a:	7812      	ldrb	r2, [r2, #0]
 8006c9c:	1e10      	subs	r0, r2, #0
 8006c9e:	bf18      	it	ne
 8006ca0:	2001      	movne	r0, #1
 8006ca2:	b002      	add	sp, #8
 8006ca4:	4770      	bx	lr
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	e7fb      	b.n	8006ca2 <__ascii_mbtowc+0x16>
 8006caa:	f06f 0001 	mvn.w	r0, #1
 8006cae:	e7f8      	b.n	8006ca2 <__ascii_mbtowc+0x16>

08006cb0 <__ascii_wctomb>:
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	b141      	cbz	r1, 8006cc8 <__ascii_wctomb+0x18>
 8006cb6:	2aff      	cmp	r2, #255	@ 0xff
 8006cb8:	d904      	bls.n	8006cc4 <__ascii_wctomb+0x14>
 8006cba:	228a      	movs	r2, #138	@ 0x8a
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	4770      	bx	lr
 8006cc4:	700a      	strb	r2, [r1, #0]
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	4770      	bx	lr
	...

08006ccc <fiprintf>:
 8006ccc:	b40e      	push	{r1, r2, r3}
 8006cce:	b503      	push	{r0, r1, lr}
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	ab03      	add	r3, sp, #12
 8006cd4:	4805      	ldr	r0, [pc, #20]	@ (8006cec <fiprintf+0x20>)
 8006cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	f000 f837 	bl	8006d50 <_vfiprintf_r>
 8006ce2:	b002      	add	sp, #8
 8006ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce8:	b003      	add	sp, #12
 8006cea:	4770      	bx	lr
 8006cec:	20000018 	.word	0x20000018

08006cf0 <abort>:
 8006cf0:	b508      	push	{r3, lr}
 8006cf2:	2006      	movs	r0, #6
 8006cf4:	f000 fa00 	bl	80070f8 <raise>
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f7fb f8de 	bl	8001eba <_exit>

08006cfe <__sfputc_r>:
 8006cfe:	6893      	ldr	r3, [r2, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	b410      	push	{r4}
 8006d06:	6093      	str	r3, [r2, #8]
 8006d08:	da08      	bge.n	8006d1c <__sfputc_r+0x1e>
 8006d0a:	6994      	ldr	r4, [r2, #24]
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	db01      	blt.n	8006d14 <__sfputc_r+0x16>
 8006d10:	290a      	cmp	r1, #10
 8006d12:	d103      	bne.n	8006d1c <__sfputc_r+0x1e>
 8006d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d18:	f000 b932 	b.w	8006f80 <__swbuf_r>
 8006d1c:	6813      	ldr	r3, [r2, #0]
 8006d1e:	1c58      	adds	r0, r3, #1
 8006d20:	6010      	str	r0, [r2, #0]
 8006d22:	7019      	strb	r1, [r3, #0]
 8006d24:	4608      	mov	r0, r1
 8006d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <__sfputs_r>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	4614      	mov	r4, r2
 8006d34:	18d5      	adds	r5, r2, r3
 8006d36:	42ac      	cmp	r4, r5
 8006d38:	d101      	bne.n	8006d3e <__sfputs_r+0x12>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e007      	b.n	8006d4e <__sfputs_r+0x22>
 8006d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d42:	463a      	mov	r2, r7
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff ffda 	bl	8006cfe <__sfputc_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	d1f3      	bne.n	8006d36 <__sfputs_r+0xa>
 8006d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d50 <_vfiprintf_r>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	460d      	mov	r5, r1
 8006d56:	b09d      	sub	sp, #116	@ 0x74
 8006d58:	4614      	mov	r4, r2
 8006d5a:	4698      	mov	r8, r3
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	b118      	cbz	r0, 8006d68 <_vfiprintf_r+0x18>
 8006d60:	6a03      	ldr	r3, [r0, #32]
 8006d62:	b90b      	cbnz	r3, 8006d68 <_vfiprintf_r+0x18>
 8006d64:	f7fe facc 	bl	8005300 <__sinit>
 8006d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d6a:	07d9      	lsls	r1, r3, #31
 8006d6c:	d405      	bmi.n	8006d7a <_vfiprintf_r+0x2a>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	059a      	lsls	r2, r3, #22
 8006d72:	d402      	bmi.n	8006d7a <_vfiprintf_r+0x2a>
 8006d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d76:	f7fe fbba 	bl	80054ee <__retarget_lock_acquire_recursive>
 8006d7a:	89ab      	ldrh	r3, [r5, #12]
 8006d7c:	071b      	lsls	r3, r3, #28
 8006d7e:	d501      	bpl.n	8006d84 <_vfiprintf_r+0x34>
 8006d80:	692b      	ldr	r3, [r5, #16]
 8006d82:	b99b      	cbnz	r3, 8006dac <_vfiprintf_r+0x5c>
 8006d84:	4629      	mov	r1, r5
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 f938 	bl	8006ffc <__swsetup_r>
 8006d8c:	b170      	cbz	r0, 8006dac <_vfiprintf_r+0x5c>
 8006d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d90:	07dc      	lsls	r4, r3, #31
 8006d92:	d504      	bpl.n	8006d9e <_vfiprintf_r+0x4e>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	b01d      	add	sp, #116	@ 0x74
 8006d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	0598      	lsls	r0, r3, #22
 8006da2:	d4f7      	bmi.n	8006d94 <_vfiprintf_r+0x44>
 8006da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006da6:	f7fe fba3 	bl	80054f0 <__retarget_lock_release_recursive>
 8006daa:	e7f3      	b.n	8006d94 <_vfiprintf_r+0x44>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db0:	2320      	movs	r3, #32
 8006db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dba:	2330      	movs	r3, #48	@ 0x30
 8006dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f6c <_vfiprintf_r+0x21c>
 8006dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc4:	f04f 0901 	mov.w	r9, #1
 8006dc8:	4623      	mov	r3, r4
 8006dca:	469a      	mov	sl, r3
 8006dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd0:	b10a      	cbz	r2, 8006dd6 <_vfiprintf_r+0x86>
 8006dd2:	2a25      	cmp	r2, #37	@ 0x25
 8006dd4:	d1f9      	bne.n	8006dca <_vfiprintf_r+0x7a>
 8006dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dda:	d00b      	beq.n	8006df4 <_vfiprintf_r+0xa4>
 8006ddc:	465b      	mov	r3, fp
 8006dde:	4622      	mov	r2, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff ffa2 	bl	8006d2c <__sfputs_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	f000 80a7 	beq.w	8006f3c <_vfiprintf_r+0x1ec>
 8006dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df0:	445a      	add	r2, fp
 8006df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df4:	f89a 3000 	ldrb.w	r3, [sl]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 809f 	beq.w	8006f3c <_vfiprintf_r+0x1ec>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e08:	f10a 0a01 	add.w	sl, sl, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e16:	4654      	mov	r4, sl
 8006e18:	2205      	movs	r2, #5
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	4853      	ldr	r0, [pc, #332]	@ (8006f6c <_vfiprintf_r+0x21c>)
 8006e20:	f7f9 f9de 	bl	80001e0 <memchr>
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	b9d8      	cbnz	r0, 8006e60 <_vfiprintf_r+0x110>
 8006e28:	06d1      	lsls	r1, r2, #27
 8006e2a:	bf44      	itt	mi
 8006e2c:	2320      	movmi	r3, #32
 8006e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e32:	0713      	lsls	r3, r2, #28
 8006e34:	bf44      	itt	mi
 8006e36:	232b      	movmi	r3, #43	@ 0x2b
 8006e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e42:	d015      	beq.n	8006e70 <_vfiprintf_r+0x120>
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	4654      	mov	r4, sl
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f04f 0c0a 	mov.w	ip, #10
 8006e4e:	4621      	mov	r1, r4
 8006e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e54:	3b30      	subs	r3, #48	@ 0x30
 8006e56:	2b09      	cmp	r3, #9
 8006e58:	d94b      	bls.n	8006ef2 <_vfiprintf_r+0x1a2>
 8006e5a:	b1b0      	cbz	r0, 8006e8a <_vfiprintf_r+0x13a>
 8006e5c:	9207      	str	r2, [sp, #28]
 8006e5e:	e014      	b.n	8006e8a <_vfiprintf_r+0x13a>
 8006e60:	eba0 0308 	sub.w	r3, r0, r8
 8006e64:	fa09 f303 	lsl.w	r3, r9, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	46a2      	mov	sl, r4
 8006e6e:	e7d2      	b.n	8006e16 <_vfiprintf_r+0xc6>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	1d19      	adds	r1, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	9103      	str	r1, [sp, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfbb      	ittet	lt
 8006e7c:	425b      	neglt	r3, r3
 8006e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e82:	9307      	strge	r3, [sp, #28]
 8006e84:	9307      	strlt	r3, [sp, #28]
 8006e86:	bfb8      	it	lt
 8006e88:	9204      	strlt	r2, [sp, #16]
 8006e8a:	7823      	ldrb	r3, [r4, #0]
 8006e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e8e:	d10a      	bne.n	8006ea6 <_vfiprintf_r+0x156>
 8006e90:	7863      	ldrb	r3, [r4, #1]
 8006e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e94:	d132      	bne.n	8006efc <_vfiprintf_r+0x1ac>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	1d1a      	adds	r2, r3, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	9203      	str	r2, [sp, #12]
 8006e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ea2:	3402      	adds	r4, #2
 8006ea4:	9305      	str	r3, [sp, #20]
 8006ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f7c <_vfiprintf_r+0x22c>
 8006eaa:	7821      	ldrb	r1, [r4, #0]
 8006eac:	2203      	movs	r2, #3
 8006eae:	4650      	mov	r0, sl
 8006eb0:	f7f9 f996 	bl	80001e0 <memchr>
 8006eb4:	b138      	cbz	r0, 8006ec6 <_vfiprintf_r+0x176>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	eba0 000a 	sub.w	r0, r0, sl
 8006ebc:	2240      	movs	r2, #64	@ 0x40
 8006ebe:	4082      	lsls	r2, r0
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	3401      	adds	r4, #1
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eca:	4829      	ldr	r0, [pc, #164]	@ (8006f70 <_vfiprintf_r+0x220>)
 8006ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ed0:	2206      	movs	r2, #6
 8006ed2:	f7f9 f985 	bl	80001e0 <memchr>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d03f      	beq.n	8006f5a <_vfiprintf_r+0x20a>
 8006eda:	4b26      	ldr	r3, [pc, #152]	@ (8006f74 <_vfiprintf_r+0x224>)
 8006edc:	bb1b      	cbnz	r3, 8006f26 <_vfiprintf_r+0x1d6>
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	f023 0307 	bic.w	r3, r3, #7
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	9303      	str	r3, [sp, #12]
 8006eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eec:	443b      	add	r3, r7
 8006eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef0:	e76a      	b.n	8006dc8 <_vfiprintf_r+0x78>
 8006ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e7a8      	b.n	8006e4e <_vfiprintf_r+0xfe>
 8006efc:	2300      	movs	r3, #0
 8006efe:	3401      	adds	r4, #1
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	4619      	mov	r1, r3
 8006f04:	f04f 0c0a 	mov.w	ip, #10
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0e:	3a30      	subs	r2, #48	@ 0x30
 8006f10:	2a09      	cmp	r2, #9
 8006f12:	d903      	bls.n	8006f1c <_vfiprintf_r+0x1cc>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0c6      	beq.n	8006ea6 <_vfiprintf_r+0x156>
 8006f18:	9105      	str	r1, [sp, #20]
 8006f1a:	e7c4      	b.n	8006ea6 <_vfiprintf_r+0x156>
 8006f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f20:	4604      	mov	r4, r0
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7f0      	b.n	8006f08 <_vfiprintf_r+0x1b8>
 8006f26:	ab03      	add	r3, sp, #12
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	462a      	mov	r2, r5
 8006f2c:	4b12      	ldr	r3, [pc, #72]	@ (8006f78 <_vfiprintf_r+0x228>)
 8006f2e:	a904      	add	r1, sp, #16
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7fd fda1 	bl	8004a78 <_printf_float>
 8006f36:	4607      	mov	r7, r0
 8006f38:	1c78      	adds	r0, r7, #1
 8006f3a:	d1d6      	bne.n	8006eea <_vfiprintf_r+0x19a>
 8006f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	d405      	bmi.n	8006f4e <_vfiprintf_r+0x1fe>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	059a      	lsls	r2, r3, #22
 8006f46:	d402      	bmi.n	8006f4e <_vfiprintf_r+0x1fe>
 8006f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f4a:	f7fe fad1 	bl	80054f0 <__retarget_lock_release_recursive>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	065b      	lsls	r3, r3, #25
 8006f52:	f53f af1f 	bmi.w	8006d94 <_vfiprintf_r+0x44>
 8006f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f58:	e71e      	b.n	8006d98 <_vfiprintf_r+0x48>
 8006f5a:	ab03      	add	r3, sp, #12
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <_vfiprintf_r+0x228>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7fe f81f 	bl	8004fa8 <_printf_i>
 8006f6a:	e7e4      	b.n	8006f36 <_vfiprintf_r+0x1e6>
 8006f6c:	08007caf 	.word	0x08007caf
 8006f70:	08007cb9 	.word	0x08007cb9
 8006f74:	08004a79 	.word	0x08004a79
 8006f78:	08006d2d 	.word	0x08006d2d
 8006f7c:	08007cb5 	.word	0x08007cb5

08006f80 <__swbuf_r>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	460e      	mov	r6, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	4605      	mov	r5, r0
 8006f88:	b118      	cbz	r0, 8006f92 <__swbuf_r+0x12>
 8006f8a:	6a03      	ldr	r3, [r0, #32]
 8006f8c:	b90b      	cbnz	r3, 8006f92 <__swbuf_r+0x12>
 8006f8e:	f7fe f9b7 	bl	8005300 <__sinit>
 8006f92:	69a3      	ldr	r3, [r4, #24]
 8006f94:	60a3      	str	r3, [r4, #8]
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	071a      	lsls	r2, r3, #28
 8006f9a:	d501      	bpl.n	8006fa0 <__swbuf_r+0x20>
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	b943      	cbnz	r3, 8006fb2 <__swbuf_r+0x32>
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 f82a 	bl	8006ffc <__swsetup_r>
 8006fa8:	b118      	cbz	r0, 8006fb2 <__swbuf_r+0x32>
 8006faa:	f04f 37ff 	mov.w	r7, #4294967295
 8006fae:	4638      	mov	r0, r7
 8006fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	1a98      	subs	r0, r3, r2
 8006fb8:	6963      	ldr	r3, [r4, #20]
 8006fba:	b2f6      	uxtb	r6, r6
 8006fbc:	4283      	cmp	r3, r0
 8006fbe:	4637      	mov	r7, r6
 8006fc0:	dc05      	bgt.n	8006fce <__swbuf_r+0x4e>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7ff fde9 	bl	8006b9c <_fflush_r>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d1ed      	bne.n	8006faa <__swbuf_r+0x2a>
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	60a3      	str	r3, [r4, #8]
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	6022      	str	r2, [r4, #0]
 8006fda:	701e      	strb	r6, [r3, #0]
 8006fdc:	6962      	ldr	r2, [r4, #20]
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d004      	beq.n	8006fee <__swbuf_r+0x6e>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	07db      	lsls	r3, r3, #31
 8006fe8:	d5e1      	bpl.n	8006fae <__swbuf_r+0x2e>
 8006fea:	2e0a      	cmp	r6, #10
 8006fec:	d1df      	bne.n	8006fae <__swbuf_r+0x2e>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f7ff fdd3 	bl	8006b9c <_fflush_r>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d0d9      	beq.n	8006fae <__swbuf_r+0x2e>
 8006ffa:	e7d6      	b.n	8006faa <__swbuf_r+0x2a>

08006ffc <__swsetup_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4b29      	ldr	r3, [pc, #164]	@ (80070a4 <__swsetup_r+0xa8>)
 8007000:	4605      	mov	r5, r0
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	460c      	mov	r4, r1
 8007006:	b118      	cbz	r0, 8007010 <__swsetup_r+0x14>
 8007008:	6a03      	ldr	r3, [r0, #32]
 800700a:	b90b      	cbnz	r3, 8007010 <__swsetup_r+0x14>
 800700c:	f7fe f978 	bl	8005300 <__sinit>
 8007010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007014:	0719      	lsls	r1, r3, #28
 8007016:	d422      	bmi.n	800705e <__swsetup_r+0x62>
 8007018:	06da      	lsls	r2, r3, #27
 800701a:	d407      	bmi.n	800702c <__swsetup_r+0x30>
 800701c:	2209      	movs	r2, #9
 800701e:	602a      	str	r2, [r5, #0]
 8007020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
 800702a:	e033      	b.n	8007094 <__swsetup_r+0x98>
 800702c:	0758      	lsls	r0, r3, #29
 800702e:	d512      	bpl.n	8007056 <__swsetup_r+0x5a>
 8007030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007032:	b141      	cbz	r1, 8007046 <__swsetup_r+0x4a>
 8007034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <__swsetup_r+0x46>
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff f8a7 	bl	8006190 <_free_r>
 8007042:	2300      	movs	r3, #0
 8007044:	6363      	str	r3, [r4, #52]	@ 0x34
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	2300      	movs	r3, #0
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f043 0308 	orr.w	r3, r3, #8
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	b94b      	cbnz	r3, 8007076 <__swsetup_r+0x7a>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800706c:	d003      	beq.n	8007076 <__swsetup_r+0x7a>
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f883 	bl	800717c <__smakebuf_r>
 8007076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707a:	f013 0201 	ands.w	r2, r3, #1
 800707e:	d00a      	beq.n	8007096 <__swsetup_r+0x9a>
 8007080:	2200      	movs	r2, #0
 8007082:	60a2      	str	r2, [r4, #8]
 8007084:	6962      	ldr	r2, [r4, #20]
 8007086:	4252      	negs	r2, r2
 8007088:	61a2      	str	r2, [r4, #24]
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	b942      	cbnz	r2, 80070a0 <__swsetup_r+0xa4>
 800708e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007092:	d1c5      	bne.n	8007020 <__swsetup_r+0x24>
 8007094:	bd38      	pop	{r3, r4, r5, pc}
 8007096:	0799      	lsls	r1, r3, #30
 8007098:	bf58      	it	pl
 800709a:	6962      	ldrpl	r2, [r4, #20]
 800709c:	60a2      	str	r2, [r4, #8]
 800709e:	e7f4      	b.n	800708a <__swsetup_r+0x8e>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e7f7      	b.n	8007094 <__swsetup_r+0x98>
 80070a4:	20000018 	.word	0x20000018

080070a8 <_raise_r>:
 80070a8:	291f      	cmp	r1, #31
 80070aa:	b538      	push	{r3, r4, r5, lr}
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	d904      	bls.n	80070bc <_raise_r+0x14>
 80070b2:	2316      	movs	r3, #22
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070be:	b112      	cbz	r2, 80070c6 <_raise_r+0x1e>
 80070c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070c4:	b94b      	cbnz	r3, 80070da <_raise_r+0x32>
 80070c6:	4628      	mov	r0, r5
 80070c8:	f000 f830 	bl	800712c <_getpid_r>
 80070cc:	4622      	mov	r2, r4
 80070ce:	4601      	mov	r1, r0
 80070d0:	4628      	mov	r0, r5
 80070d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d6:	f000 b817 	b.w	8007108 <_kill_r>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00a      	beq.n	80070f4 <_raise_r+0x4c>
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	d103      	bne.n	80070ea <_raise_r+0x42>
 80070e2:	2316      	movs	r3, #22
 80070e4:	6003      	str	r3, [r0, #0]
 80070e6:	2001      	movs	r0, #1
 80070e8:	e7e7      	b.n	80070ba <_raise_r+0x12>
 80070ea:	2100      	movs	r1, #0
 80070ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070f0:	4620      	mov	r0, r4
 80070f2:	4798      	blx	r3
 80070f4:	2000      	movs	r0, #0
 80070f6:	e7e0      	b.n	80070ba <_raise_r+0x12>

080070f8 <raise>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	@ (8007104 <raise+0xc>)
 80070fa:	4601      	mov	r1, r0
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f7ff bfd3 	b.w	80070a8 <_raise_r>
 8007102:	bf00      	nop
 8007104:	20000018 	.word	0x20000018

08007108 <_kill_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_kill_r+0x20>)
 800710c:	2300      	movs	r3, #0
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	4611      	mov	r1, r2
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	f7fa fec0 	bl	8001e9a <_kill>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d102      	bne.n	8007124 <_kill_r+0x1c>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	b103      	cbz	r3, 8007124 <_kill_r+0x1c>
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	bd38      	pop	{r3, r4, r5, pc}
 8007126:	bf00      	nop
 8007128:	20000858 	.word	0x20000858

0800712c <_getpid_r>:
 800712c:	f7fa bead 	b.w	8001e8a <_getpid>

08007130 <__swhatbuf_r>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	460c      	mov	r4, r1
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	2900      	cmp	r1, #0
 800713a:	b096      	sub	sp, #88	@ 0x58
 800713c:	4615      	mov	r5, r2
 800713e:	461e      	mov	r6, r3
 8007140:	da0d      	bge.n	800715e <__swhatbuf_r+0x2e>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007148:	f04f 0100 	mov.w	r1, #0
 800714c:	bf14      	ite	ne
 800714e:	2340      	movne	r3, #64	@ 0x40
 8007150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007154:	2000      	movs	r0, #0
 8007156:	6031      	str	r1, [r6, #0]
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	b016      	add	sp, #88	@ 0x58
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	466a      	mov	r2, sp
 8007160:	f000 f848 	bl	80071f4 <_fstat_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	dbec      	blt.n	8007142 <__swhatbuf_r+0x12>
 8007168:	9901      	ldr	r1, [sp, #4]
 800716a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800716e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007172:	4259      	negs	r1, r3
 8007174:	4159      	adcs	r1, r3
 8007176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800717a:	e7eb      	b.n	8007154 <__swhatbuf_r+0x24>

0800717c <__smakebuf_r>:
 800717c:	898b      	ldrh	r3, [r1, #12]
 800717e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007180:	079d      	lsls	r5, r3, #30
 8007182:	4606      	mov	r6, r0
 8007184:	460c      	mov	r4, r1
 8007186:	d507      	bpl.n	8007198 <__smakebuf_r+0x1c>
 8007188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	2301      	movs	r3, #1
 8007192:	6163      	str	r3, [r4, #20]
 8007194:	b003      	add	sp, #12
 8007196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007198:	ab01      	add	r3, sp, #4
 800719a:	466a      	mov	r2, sp
 800719c:	f7ff ffc8 	bl	8007130 <__swhatbuf_r>
 80071a0:	9f00      	ldr	r7, [sp, #0]
 80071a2:	4605      	mov	r5, r0
 80071a4:	4639      	mov	r1, r7
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff f866 	bl	8006278 <_malloc_r>
 80071ac:	b948      	cbnz	r0, 80071c2 <__smakebuf_r+0x46>
 80071ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b2:	059a      	lsls	r2, r3, #22
 80071b4:	d4ee      	bmi.n	8007194 <__smakebuf_r+0x18>
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	f043 0302 	orr.w	r3, r3, #2
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	e7e2      	b.n	8007188 <__smakebuf_r+0xc>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	6020      	str	r0, [r4, #0]
 80071c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071d2:	b15b      	cbz	r3, 80071ec <__smakebuf_r+0x70>
 80071d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d8:	4630      	mov	r0, r6
 80071da:	f000 f81d 	bl	8007218 <_isatty_r>
 80071de:	b128      	cbz	r0, 80071ec <__smakebuf_r+0x70>
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	81a3      	strh	r3, [r4, #12]
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	431d      	orrs	r5, r3
 80071f0:	81a5      	strh	r5, [r4, #12]
 80071f2:	e7cf      	b.n	8007194 <__smakebuf_r+0x18>

080071f4 <_fstat_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	@ (8007214 <_fstat_r+0x20>)
 80071f8:	2300      	movs	r3, #0
 80071fa:	4604      	mov	r4, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	4611      	mov	r1, r2
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	f7fa feaa 	bl	8001f5a <_fstat>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	d102      	bne.n	8007210 <_fstat_r+0x1c>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	b103      	cbz	r3, 8007210 <_fstat_r+0x1c>
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	20000858 	.word	0x20000858

08007218 <_isatty_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d06      	ldr	r5, [pc, #24]	@ (8007234 <_isatty_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fa fea9 	bl	8001f7a <_isatty>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_isatty_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_isatty_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20000858 	.word	0x20000858

08007238 <atan2>:
 8007238:	f000 baaa 	b.w	8007790 <__ieee754_atan2>

0800723c <sqrt>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	ed2d 8b02 	vpush	{d8}
 8007242:	ec55 4b10 	vmov	r4, r5, d0
 8007246:	f000 f9c7 	bl	80075d8 <__ieee754_sqrt>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	eeb0 8a40 	vmov.f32	s16, s0
 8007256:	eef0 8a60 	vmov.f32	s17, s1
 800725a:	f7f9 fc6f 	bl	8000b3c <__aeabi_dcmpun>
 800725e:	b990      	cbnz	r0, 8007286 <sqrt+0x4a>
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 fc40 	bl	8000aec <__aeabi_dcmplt>
 800726c:	b158      	cbz	r0, 8007286 <sqrt+0x4a>
 800726e:	f7fe f913 	bl	8005498 <__errno>
 8007272:	2321      	movs	r3, #33	@ 0x21
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	f7f9 faed 	bl	800085c <__aeabi_ddiv>
 8007282:	ec41 0b18 	vmov	d8, r0, r1
 8007286:	eeb0 0a48 	vmov.f32	s0, s16
 800728a:	eef0 0a68 	vmov.f32	s1, s17
 800728e:	ecbd 8b02 	vpop	{d8}
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	0000      	movs	r0, r0
	...

08007298 <atan>:
 8007298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	ec55 4b10 	vmov	r4, r5, d0
 80072a0:	4bbf      	ldr	r3, [pc, #764]	@ (80075a0 <atan+0x308>)
 80072a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80072a6:	429e      	cmp	r6, r3
 80072a8:	46ab      	mov	fp, r5
 80072aa:	d918      	bls.n	80072de <atan+0x46>
 80072ac:	4bbd      	ldr	r3, [pc, #756]	@ (80075a4 <atan+0x30c>)
 80072ae:	429e      	cmp	r6, r3
 80072b0:	d801      	bhi.n	80072b6 <atan+0x1e>
 80072b2:	d109      	bne.n	80072c8 <atan+0x30>
 80072b4:	b144      	cbz	r4, 80072c8 <atan+0x30>
 80072b6:	4622      	mov	r2, r4
 80072b8:	462b      	mov	r3, r5
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f8 ffed 	bl	800029c <__adddf3>
 80072c2:	4604      	mov	r4, r0
 80072c4:	460d      	mov	r5, r1
 80072c6:	e006      	b.n	80072d6 <atan+0x3e>
 80072c8:	f1bb 0f00 	cmp.w	fp, #0
 80072cc:	f340 812b 	ble.w	8007526 <atan+0x28e>
 80072d0:	a597      	add	r5, pc, #604	@ (adr r5, 8007530 <atan+0x298>)
 80072d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072d6:	ec45 4b10 	vmov	d0, r4, r5
 80072da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	4bb2      	ldr	r3, [pc, #712]	@ (80075a8 <atan+0x310>)
 80072e0:	429e      	cmp	r6, r3
 80072e2:	d813      	bhi.n	800730c <atan+0x74>
 80072e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80072e8:	429e      	cmp	r6, r3
 80072ea:	d80c      	bhi.n	8007306 <atan+0x6e>
 80072ec:	a392      	add	r3, pc, #584	@ (adr r3, 8007538 <atan+0x2a0>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	4620      	mov	r0, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f8 ffd1 	bl	800029c <__adddf3>
 80072fa:	4bac      	ldr	r3, [pc, #688]	@ (80075ac <atan+0x314>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	f7f9 fc13 	bl	8000b28 <__aeabi_dcmpgt>
 8007302:	2800      	cmp	r0, #0
 8007304:	d1e7      	bne.n	80072d6 <atan+0x3e>
 8007306:	f04f 3aff 	mov.w	sl, #4294967295
 800730a:	e029      	b.n	8007360 <atan+0xc8>
 800730c:	f000 f95c 	bl	80075c8 <fabs>
 8007310:	4ba7      	ldr	r3, [pc, #668]	@ (80075b0 <atan+0x318>)
 8007312:	429e      	cmp	r6, r3
 8007314:	ec55 4b10 	vmov	r4, r5, d0
 8007318:	f200 80bc 	bhi.w	8007494 <atan+0x1fc>
 800731c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007320:	429e      	cmp	r6, r3
 8007322:	f200 809e 	bhi.w	8007462 <atan+0x1ca>
 8007326:	4622      	mov	r2, r4
 8007328:	462b      	mov	r3, r5
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f8 ffb5 	bl	800029c <__adddf3>
 8007332:	4b9e      	ldr	r3, [pc, #632]	@ (80075ac <atan+0x314>)
 8007334:	2200      	movs	r2, #0
 8007336:	f7f8 ffaf 	bl	8000298 <__aeabi_dsub>
 800733a:	2200      	movs	r2, #0
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f8 ffa8 	bl	800029c <__adddf3>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f9 fa82 	bl	800085c <__aeabi_ddiv>
 8007358:	f04f 0a00 	mov.w	sl, #0
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	4622      	mov	r2, r4
 8007362:	462b      	mov	r3, r5
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 f94e 	bl	8000608 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4680      	mov	r8, r0
 8007372:	4689      	mov	r9, r1
 8007374:	f7f9 f948 	bl	8000608 <__aeabi_dmul>
 8007378:	a371      	add	r3, pc, #452	@ (adr r3, 8007540 <atan+0x2a8>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	f7f9 f941 	bl	8000608 <__aeabi_dmul>
 8007386:	a370      	add	r3, pc, #448	@ (adr r3, 8007548 <atan+0x2b0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f8 ff86 	bl	800029c <__adddf3>
 8007390:	4632      	mov	r2, r6
 8007392:	463b      	mov	r3, r7
 8007394:	f7f9 f938 	bl	8000608 <__aeabi_dmul>
 8007398:	a36d      	add	r3, pc, #436	@ (adr r3, 8007550 <atan+0x2b8>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f8 ff7d 	bl	800029c <__adddf3>
 80073a2:	4632      	mov	r2, r6
 80073a4:	463b      	mov	r3, r7
 80073a6:	f7f9 f92f 	bl	8000608 <__aeabi_dmul>
 80073aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007558 <atan+0x2c0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f8 ff74 	bl	800029c <__adddf3>
 80073b4:	4632      	mov	r2, r6
 80073b6:	463b      	mov	r3, r7
 80073b8:	f7f9 f926 	bl	8000608 <__aeabi_dmul>
 80073bc:	a368      	add	r3, pc, #416	@ (adr r3, 8007560 <atan+0x2c8>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff6b 	bl	800029c <__adddf3>
 80073c6:	4632      	mov	r2, r6
 80073c8:	463b      	mov	r3, r7
 80073ca:	f7f9 f91d 	bl	8000608 <__aeabi_dmul>
 80073ce:	a366      	add	r3, pc, #408	@ (adr r3, 8007568 <atan+0x2d0>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f8 ff62 	bl	800029c <__adddf3>
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	a363      	add	r3, pc, #396	@ (adr r3, 8007570 <atan+0x2d8>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	4680      	mov	r8, r0
 80073e8:	4689      	mov	r9, r1
 80073ea:	4630      	mov	r0, r6
 80073ec:	4639      	mov	r1, r7
 80073ee:	f7f9 f90b 	bl	8000608 <__aeabi_dmul>
 80073f2:	a361      	add	r3, pc, #388	@ (adr r3, 8007578 <atan+0x2e0>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f8 ff4e 	bl	8000298 <__aeabi_dsub>
 80073fc:	4632      	mov	r2, r6
 80073fe:	463b      	mov	r3, r7
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	a35e      	add	r3, pc, #376	@ (adr r3, 8007580 <atan+0x2e8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 ff45 	bl	8000298 <__aeabi_dsub>
 800740e:	4632      	mov	r2, r6
 8007410:	463b      	mov	r3, r7
 8007412:	f7f9 f8f9 	bl	8000608 <__aeabi_dmul>
 8007416:	a35c      	add	r3, pc, #368	@ (adr r3, 8007588 <atan+0x2f0>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f8 ff3c 	bl	8000298 <__aeabi_dsub>
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	f7f9 f8f0 	bl	8000608 <__aeabi_dmul>
 8007428:	a359      	add	r3, pc, #356	@ (adr r3, 8007590 <atan+0x2f8>)
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	f7f8 ff33 	bl	8000298 <__aeabi_dsub>
 8007432:	4632      	mov	r2, r6
 8007434:	463b      	mov	r3, r7
 8007436:	f7f9 f8e7 	bl	8000608 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f8 ff2b 	bl	800029c <__adddf3>
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	f7f9 f8dd 	bl	8000608 <__aeabi_dmul>
 800744e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	d148      	bne.n	80074ea <atan+0x252>
 8007458:	4620      	mov	r0, r4
 800745a:	4629      	mov	r1, r5
 800745c:	f7f8 ff1c 	bl	8000298 <__aeabi_dsub>
 8007460:	e72f      	b.n	80072c2 <atan+0x2a>
 8007462:	4b52      	ldr	r3, [pc, #328]	@ (80075ac <atan+0x314>)
 8007464:	2200      	movs	r2, #0
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f7f8 ff15 	bl	8000298 <__aeabi_dsub>
 800746e:	4b4f      	ldr	r3, [pc, #316]	@ (80075ac <atan+0x314>)
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	2200      	movs	r2, #0
 8007476:	4620      	mov	r0, r4
 8007478:	4629      	mov	r1, r5
 800747a:	f7f8 ff0f 	bl	800029c <__adddf3>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f9 f9e9 	bl	800085c <__aeabi_ddiv>
 800748a:	f04f 0a01 	mov.w	sl, #1
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	e765      	b.n	8007360 <atan+0xc8>
 8007494:	4b47      	ldr	r3, [pc, #284]	@ (80075b4 <atan+0x31c>)
 8007496:	429e      	cmp	r6, r3
 8007498:	d21c      	bcs.n	80074d4 <atan+0x23c>
 800749a:	4b47      	ldr	r3, [pc, #284]	@ (80075b8 <atan+0x320>)
 800749c:	2200      	movs	r2, #0
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f8 fef9 	bl	8000298 <__aeabi_dsub>
 80074a6:	4b44      	ldr	r3, [pc, #272]	@ (80075b8 <atan+0x320>)
 80074a8:	4606      	mov	r6, r0
 80074aa:	460f      	mov	r7, r1
 80074ac:	2200      	movs	r2, #0
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f9 f8a9 	bl	8000608 <__aeabi_dmul>
 80074b6:	4b3d      	ldr	r3, [pc, #244]	@ (80075ac <atan+0x314>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	f7f8 feef 	bl	800029c <__adddf3>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 f9c9 	bl	800085c <__aeabi_ddiv>
 80074ca:	f04f 0a02 	mov.w	sl, #2
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	e745      	b.n	8007360 <atan+0xc8>
 80074d4:	4622      	mov	r2, r4
 80074d6:	462b      	mov	r3, r5
 80074d8:	4938      	ldr	r1, [pc, #224]	@ (80075bc <atan+0x324>)
 80074da:	2000      	movs	r0, #0
 80074dc:	f7f9 f9be 	bl	800085c <__aeabi_ddiv>
 80074e0:	f04f 0a03 	mov.w	sl, #3
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	e73a      	b.n	8007360 <atan+0xc8>
 80074ea:	4b35      	ldr	r3, [pc, #212]	@ (80075c0 <atan+0x328>)
 80074ec:	4e35      	ldr	r6, [pc, #212]	@ (80075c4 <atan+0x32c>)
 80074ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f8 fecf 	bl	8000298 <__aeabi_dsub>
 80074fa:	4622      	mov	r2, r4
 80074fc:	462b      	mov	r3, r5
 80074fe:	f7f8 fecb 	bl	8000298 <__aeabi_dsub>
 8007502:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800750e:	f7f8 fec3 	bl	8000298 <__aeabi_dsub>
 8007512:	f1bb 0f00 	cmp.w	fp, #0
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	f6bf aedc 	bge.w	80072d6 <atan+0x3e>
 800751e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007522:	461d      	mov	r5, r3
 8007524:	e6d7      	b.n	80072d6 <atan+0x3e>
 8007526:	a51c      	add	r5, pc, #112	@ (adr r5, 8007598 <atan+0x300>)
 8007528:	e9d5 4500 	ldrd	r4, r5, [r5]
 800752c:	e6d3      	b.n	80072d6 <atan+0x3e>
 800752e:	bf00      	nop
 8007530:	54442d18 	.word	0x54442d18
 8007534:	3ff921fb 	.word	0x3ff921fb
 8007538:	8800759c 	.word	0x8800759c
 800753c:	7e37e43c 	.word	0x7e37e43c
 8007540:	e322da11 	.word	0xe322da11
 8007544:	3f90ad3a 	.word	0x3f90ad3a
 8007548:	24760deb 	.word	0x24760deb
 800754c:	3fa97b4b 	.word	0x3fa97b4b
 8007550:	a0d03d51 	.word	0xa0d03d51
 8007554:	3fb10d66 	.word	0x3fb10d66
 8007558:	c54c206e 	.word	0xc54c206e
 800755c:	3fb745cd 	.word	0x3fb745cd
 8007560:	920083ff 	.word	0x920083ff
 8007564:	3fc24924 	.word	0x3fc24924
 8007568:	5555550d 	.word	0x5555550d
 800756c:	3fd55555 	.word	0x3fd55555
 8007570:	2c6a6c2f 	.word	0x2c6a6c2f
 8007574:	bfa2b444 	.word	0xbfa2b444
 8007578:	52defd9a 	.word	0x52defd9a
 800757c:	3fadde2d 	.word	0x3fadde2d
 8007580:	af749a6d 	.word	0xaf749a6d
 8007584:	3fb3b0f2 	.word	0x3fb3b0f2
 8007588:	fe231671 	.word	0xfe231671
 800758c:	3fbc71c6 	.word	0x3fbc71c6
 8007590:	9998ebc4 	.word	0x9998ebc4
 8007594:	3fc99999 	.word	0x3fc99999
 8007598:	54442d18 	.word	0x54442d18
 800759c:	bff921fb 	.word	0xbff921fb
 80075a0:	440fffff 	.word	0x440fffff
 80075a4:	7ff00000 	.word	0x7ff00000
 80075a8:	3fdbffff 	.word	0x3fdbffff
 80075ac:	3ff00000 	.word	0x3ff00000
 80075b0:	3ff2ffff 	.word	0x3ff2ffff
 80075b4:	40038000 	.word	0x40038000
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	bff00000 	.word	0xbff00000
 80075c0:	08007cc0 	.word	0x08007cc0
 80075c4:	08007ce0 	.word	0x08007ce0

080075c8 <fabs>:
 80075c8:	ec51 0b10 	vmov	r0, r1, d0
 80075cc:	4602      	mov	r2, r0
 80075ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075d2:	ec43 2b10 	vmov	d0, r2, r3
 80075d6:	4770      	bx	lr

080075d8 <__ieee754_sqrt>:
 80075d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	4a68      	ldr	r2, [pc, #416]	@ (8007780 <__ieee754_sqrt+0x1a8>)
 80075de:	ec55 4b10 	vmov	r4, r5, d0
 80075e2:	43aa      	bics	r2, r5
 80075e4:	462b      	mov	r3, r5
 80075e6:	4621      	mov	r1, r4
 80075e8:	d110      	bne.n	800760c <__ieee754_sqrt+0x34>
 80075ea:	4622      	mov	r2, r4
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f9 f80a 	bl	8000608 <__aeabi_dmul>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f8 fe4e 	bl	800029c <__adddf3>
 8007600:	4604      	mov	r4, r0
 8007602:	460d      	mov	r5, r1
 8007604:	ec45 4b10 	vmov	d0, r4, r5
 8007608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	2d00      	cmp	r5, #0
 800760e:	dc0e      	bgt.n	800762e <__ieee754_sqrt+0x56>
 8007610:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007614:	4322      	orrs	r2, r4
 8007616:	d0f5      	beq.n	8007604 <__ieee754_sqrt+0x2c>
 8007618:	b19d      	cbz	r5, 8007642 <__ieee754_sqrt+0x6a>
 800761a:	4622      	mov	r2, r4
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	f7f9 f918 	bl	800085c <__aeabi_ddiv>
 800762c:	e7e8      	b.n	8007600 <__ieee754_sqrt+0x28>
 800762e:	152a      	asrs	r2, r5, #20
 8007630:	d115      	bne.n	800765e <__ieee754_sqrt+0x86>
 8007632:	2000      	movs	r0, #0
 8007634:	e009      	b.n	800764a <__ieee754_sqrt+0x72>
 8007636:	0acb      	lsrs	r3, r1, #11
 8007638:	3a15      	subs	r2, #21
 800763a:	0549      	lsls	r1, r1, #21
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0fa      	beq.n	8007636 <__ieee754_sqrt+0x5e>
 8007640:	e7f7      	b.n	8007632 <__ieee754_sqrt+0x5a>
 8007642:	462a      	mov	r2, r5
 8007644:	e7fa      	b.n	800763c <__ieee754_sqrt+0x64>
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	3001      	adds	r0, #1
 800764a:	02dc      	lsls	r4, r3, #11
 800764c:	d5fb      	bpl.n	8007646 <__ieee754_sqrt+0x6e>
 800764e:	1e44      	subs	r4, r0, #1
 8007650:	1b12      	subs	r2, r2, r4
 8007652:	f1c0 0420 	rsb	r4, r0, #32
 8007656:	fa21 f404 	lsr.w	r4, r1, r4
 800765a:	4323      	orrs	r3, r4
 800765c:	4081      	lsls	r1, r0
 800765e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007662:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800766a:	07d2      	lsls	r2, r2, #31
 800766c:	bf5c      	itt	pl
 800766e:	005b      	lslpl	r3, r3, #1
 8007670:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007678:	bf58      	it	pl
 800767a:	0049      	lslpl	r1, r1, #1
 800767c:	2600      	movs	r6, #0
 800767e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007682:	106d      	asrs	r5, r5, #1
 8007684:	0049      	lsls	r1, r1, #1
 8007686:	2016      	movs	r0, #22
 8007688:	4632      	mov	r2, r6
 800768a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800768e:	1917      	adds	r7, r2, r4
 8007690:	429f      	cmp	r7, r3
 8007692:	bfde      	ittt	le
 8007694:	193a      	addle	r2, r7, r4
 8007696:	1bdb      	suble	r3, r3, r7
 8007698:	1936      	addle	r6, r6, r4
 800769a:	0fcf      	lsrs	r7, r1, #31
 800769c:	3801      	subs	r0, #1
 800769e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80076a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80076a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80076aa:	d1f0      	bne.n	800768e <__ieee754_sqrt+0xb6>
 80076ac:	4604      	mov	r4, r0
 80076ae:	2720      	movs	r7, #32
 80076b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80076b4:	429a      	cmp	r2, r3
 80076b6:	eb00 0e0c 	add.w	lr, r0, ip
 80076ba:	db02      	blt.n	80076c2 <__ieee754_sqrt+0xea>
 80076bc:	d113      	bne.n	80076e6 <__ieee754_sqrt+0x10e>
 80076be:	458e      	cmp	lr, r1
 80076c0:	d811      	bhi.n	80076e6 <__ieee754_sqrt+0x10e>
 80076c2:	f1be 0f00 	cmp.w	lr, #0
 80076c6:	eb0e 000c 	add.w	r0, lr, ip
 80076ca:	da42      	bge.n	8007752 <__ieee754_sqrt+0x17a>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	db40      	blt.n	8007752 <__ieee754_sqrt+0x17a>
 80076d0:	f102 0801 	add.w	r8, r2, #1
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	458e      	cmp	lr, r1
 80076d8:	bf88      	it	hi
 80076da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80076de:	eba1 010e 	sub.w	r1, r1, lr
 80076e2:	4464      	add	r4, ip
 80076e4:	4642      	mov	r2, r8
 80076e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80076ea:	3f01      	subs	r7, #1
 80076ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80076f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80076f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80076f8:	d1dc      	bne.n	80076b4 <__ieee754_sqrt+0xdc>
 80076fa:	4319      	orrs	r1, r3
 80076fc:	d01b      	beq.n	8007736 <__ieee754_sqrt+0x15e>
 80076fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007784 <__ieee754_sqrt+0x1ac>
 8007702:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007788 <__ieee754_sqrt+0x1b0>
 8007706:	e9da 0100 	ldrd	r0, r1, [sl]
 800770a:	e9db 2300 	ldrd	r2, r3, [fp]
 800770e:	f7f8 fdc3 	bl	8000298 <__aeabi_dsub>
 8007712:	e9da 8900 	ldrd	r8, r9, [sl]
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	f7f9 f9ef 	bl	8000b00 <__aeabi_dcmple>
 8007722:	b140      	cbz	r0, 8007736 <__ieee754_sqrt+0x15e>
 8007724:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007728:	e9da 0100 	ldrd	r0, r1, [sl]
 800772c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007730:	d111      	bne.n	8007756 <__ieee754_sqrt+0x17e>
 8007732:	3601      	adds	r6, #1
 8007734:	463c      	mov	r4, r7
 8007736:	1072      	asrs	r2, r6, #1
 8007738:	0863      	lsrs	r3, r4, #1
 800773a:	07f1      	lsls	r1, r6, #31
 800773c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007740:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007744:	bf48      	it	mi
 8007746:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800774a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800774e:	4618      	mov	r0, r3
 8007750:	e756      	b.n	8007600 <__ieee754_sqrt+0x28>
 8007752:	4690      	mov	r8, r2
 8007754:	e7be      	b.n	80076d4 <__ieee754_sqrt+0xfc>
 8007756:	f7f8 fda1 	bl	800029c <__adddf3>
 800775a:	e9da 8900 	ldrd	r8, r9, [sl]
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4640      	mov	r0, r8
 8007764:	4649      	mov	r1, r9
 8007766:	f7f9 f9c1 	bl	8000aec <__aeabi_dcmplt>
 800776a:	b120      	cbz	r0, 8007776 <__ieee754_sqrt+0x19e>
 800776c:	1ca0      	adds	r0, r4, #2
 800776e:	bf08      	it	eq
 8007770:	3601      	addeq	r6, #1
 8007772:	3402      	adds	r4, #2
 8007774:	e7df      	b.n	8007736 <__ieee754_sqrt+0x15e>
 8007776:	1c63      	adds	r3, r4, #1
 8007778:	f023 0401 	bic.w	r4, r3, #1
 800777c:	e7db      	b.n	8007736 <__ieee754_sqrt+0x15e>
 800777e:	bf00      	nop
 8007780:	7ff00000 	.word	0x7ff00000
 8007784:	200001e0 	.word	0x200001e0
 8007788:	200001d8 	.word	0x200001d8
 800778c:	00000000 	.word	0x00000000

08007790 <__ieee754_atan2>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	ec57 6b11 	vmov	r6, r7, d1
 8007798:	4273      	negs	r3, r6
 800779a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007918 <__ieee754_atan2+0x188>
 800779e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80077a2:	4333      	orrs	r3, r6
 80077a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80077a8:	4543      	cmp	r3, r8
 80077aa:	ec51 0b10 	vmov	r0, r1, d0
 80077ae:	4635      	mov	r5, r6
 80077b0:	d809      	bhi.n	80077c6 <__ieee754_atan2+0x36>
 80077b2:	4244      	negs	r4, r0
 80077b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80077b8:	4304      	orrs	r4, r0
 80077ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80077be:	4544      	cmp	r4, r8
 80077c0:	468e      	mov	lr, r1
 80077c2:	4681      	mov	r9, r0
 80077c4:	d907      	bls.n	80077d6 <__ieee754_atan2+0x46>
 80077c6:	4632      	mov	r2, r6
 80077c8:	463b      	mov	r3, r7
 80077ca:	f7f8 fd67 	bl	800029c <__adddf3>
 80077ce:	ec41 0b10 	vmov	d0, r0, r1
 80077d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80077da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80077de:	4334      	orrs	r4, r6
 80077e0:	d103      	bne.n	80077ea <__ieee754_atan2+0x5a>
 80077e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e6:	f7ff bd57 	b.w	8007298 <atan>
 80077ea:	17bc      	asrs	r4, r7, #30
 80077ec:	f004 0402 	and.w	r4, r4, #2
 80077f0:	ea53 0909 	orrs.w	r9, r3, r9
 80077f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80077f8:	d107      	bne.n	800780a <__ieee754_atan2+0x7a>
 80077fa:	2c02      	cmp	r4, #2
 80077fc:	d05f      	beq.n	80078be <__ieee754_atan2+0x12e>
 80077fe:	2c03      	cmp	r4, #3
 8007800:	d1e5      	bne.n	80077ce <__ieee754_atan2+0x3e>
 8007802:	a141      	add	r1, pc, #260	@ (adr r1, 8007908 <__ieee754_atan2+0x178>)
 8007804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007808:	e7e1      	b.n	80077ce <__ieee754_atan2+0x3e>
 800780a:	4315      	orrs	r5, r2
 800780c:	d106      	bne.n	800781c <__ieee754_atan2+0x8c>
 800780e:	f1be 0f00 	cmp.w	lr, #0
 8007812:	da5f      	bge.n	80078d4 <__ieee754_atan2+0x144>
 8007814:	a13e      	add	r1, pc, #248	@ (adr r1, 8007910 <__ieee754_atan2+0x180>)
 8007816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800781a:	e7d8      	b.n	80077ce <__ieee754_atan2+0x3e>
 800781c:	4542      	cmp	r2, r8
 800781e:	d10f      	bne.n	8007840 <__ieee754_atan2+0xb0>
 8007820:	4293      	cmp	r3, r2
 8007822:	f104 34ff 	add.w	r4, r4, #4294967295
 8007826:	d107      	bne.n	8007838 <__ieee754_atan2+0xa8>
 8007828:	2c02      	cmp	r4, #2
 800782a:	d84c      	bhi.n	80078c6 <__ieee754_atan2+0x136>
 800782c:	4b34      	ldr	r3, [pc, #208]	@ (8007900 <__ieee754_atan2+0x170>)
 800782e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007836:	e7ca      	b.n	80077ce <__ieee754_atan2+0x3e>
 8007838:	2c02      	cmp	r4, #2
 800783a:	d848      	bhi.n	80078ce <__ieee754_atan2+0x13e>
 800783c:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <__ieee754_atan2+0x174>)
 800783e:	e7f6      	b.n	800782e <__ieee754_atan2+0x9e>
 8007840:	4543      	cmp	r3, r8
 8007842:	d0e4      	beq.n	800780e <__ieee754_atan2+0x7e>
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800784a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800784e:	da1e      	bge.n	800788e <__ieee754_atan2+0xfe>
 8007850:	2f00      	cmp	r7, #0
 8007852:	da01      	bge.n	8007858 <__ieee754_atan2+0xc8>
 8007854:	323c      	adds	r2, #60	@ 0x3c
 8007856:	db1e      	blt.n	8007896 <__ieee754_atan2+0x106>
 8007858:	4632      	mov	r2, r6
 800785a:	463b      	mov	r3, r7
 800785c:	f7f8 fffe 	bl	800085c <__aeabi_ddiv>
 8007860:	ec41 0b10 	vmov	d0, r0, r1
 8007864:	f7ff feb0 	bl	80075c8 <fabs>
 8007868:	f7ff fd16 	bl	8007298 <atan>
 800786c:	ec51 0b10 	vmov	r0, r1, d0
 8007870:	2c01      	cmp	r4, #1
 8007872:	d013      	beq.n	800789c <__ieee754_atan2+0x10c>
 8007874:	2c02      	cmp	r4, #2
 8007876:	d015      	beq.n	80078a4 <__ieee754_atan2+0x114>
 8007878:	2c00      	cmp	r4, #0
 800787a:	d0a8      	beq.n	80077ce <__ieee754_atan2+0x3e>
 800787c:	a318      	add	r3, pc, #96	@ (adr r3, 80078e0 <__ieee754_atan2+0x150>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fd09 	bl	8000298 <__aeabi_dsub>
 8007886:	a318      	add	r3, pc, #96	@ (adr r3, 80078e8 <__ieee754_atan2+0x158>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	e014      	b.n	80078b8 <__ieee754_atan2+0x128>
 800788e:	a118      	add	r1, pc, #96	@ (adr r1, 80078f0 <__ieee754_atan2+0x160>)
 8007890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007894:	e7ec      	b.n	8007870 <__ieee754_atan2+0xe0>
 8007896:	2000      	movs	r0, #0
 8007898:	2100      	movs	r1, #0
 800789a:	e7e9      	b.n	8007870 <__ieee754_atan2+0xe0>
 800789c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078a0:	4619      	mov	r1, r3
 80078a2:	e794      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80078e0 <__ieee754_atan2+0x150>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fcf5 	bl	8000298 <__aeabi_dsub>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	a10d      	add	r1, pc, #52	@ (adr r1, 80078e8 <__ieee754_atan2+0x158>)
 80078b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b8:	f7f8 fcee 	bl	8000298 <__aeabi_dsub>
 80078bc:	e787      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078be:	a10a      	add	r1, pc, #40	@ (adr r1, 80078e8 <__ieee754_atan2+0x158>)
 80078c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c4:	e783      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078c6:	a10c      	add	r1, pc, #48	@ (adr r1, 80078f8 <__ieee754_atan2+0x168>)
 80078c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078cc:	e77f      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078ce:	2000      	movs	r0, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	e77c      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078d4:	a106      	add	r1, pc, #24	@ (adr r1, 80078f0 <__ieee754_atan2+0x160>)
 80078d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078da:	e778      	b.n	80077ce <__ieee754_atan2+0x3e>
 80078dc:	f3af 8000 	nop.w
 80078e0:	33145c07 	.word	0x33145c07
 80078e4:	3ca1a626 	.word	0x3ca1a626
 80078e8:	54442d18 	.word	0x54442d18
 80078ec:	400921fb 	.word	0x400921fb
 80078f0:	54442d18 	.word	0x54442d18
 80078f4:	3ff921fb 	.word	0x3ff921fb
 80078f8:	54442d18 	.word	0x54442d18
 80078fc:	3fe921fb 	.word	0x3fe921fb
 8007900:	08007d18 	.word	0x08007d18
 8007904:	08007d00 	.word	0x08007d00
 8007908:	54442d18 	.word	0x54442d18
 800790c:	c00921fb 	.word	0xc00921fb
 8007910:	54442d18 	.word	0x54442d18
 8007914:	bff921fb 	.word	0xbff921fb
 8007918:	7ff00000 	.word	0x7ff00000

0800791c <_init>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	bf00      	nop
 8007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007922:	bc08      	pop	{r3}
 8007924:	469e      	mov	lr, r3
 8007926:	4770      	bx	lr

08007928 <_fini>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	bf00      	nop
 800792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792e:	bc08      	pop	{r3}
 8007930:	469e      	mov	lr, r3
 8007932:	4770      	bx	lr
>>>>>>> Stashed changes
