
MECSOL2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080076a0  080076a0  000086a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a98  08007a98  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a98  08007a98  00008a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa0  08007aa0  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00008aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007aa8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200001e8  08007c90  000091e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08007c90  00009630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc2b  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec7  00000000  00000000  00014e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00016d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f2  00000000  00000000  00017758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bf  00000000  00000000  00017f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4f7  00000000  00000000  0002f109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9bd  00000000  00000000  0003e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8fbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  000c9000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007684 	.word	0x08007684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08007684 	.word	0x08007684

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a1e      	ldr	r2, [pc, #120]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_GPIO_Init+0xd0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <MX_GPIO_Init+0xd4>)
 8000f34:	f001 fad2 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_GPIO_Init+0xd8>)
 8000f50:	f001 f940 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f54:	2320      	movs	r3, #32
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_GPIO_Init+0xd4>)
 8000f6c:	f001 f932 	bl	80021d4 <HAL_GPIO_Init>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020800 	.word	0x40020800

08000f84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <MX_I2C1_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_I2C1_Init+0x50>)
 8000fc2:	f001 faa5 	bl	8002510 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f9d4 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000204 	.word	0x20000204
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	000186a0 	.word	0x000186a0

08000fe0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_I2C2_Init+0x50>)
 8000fe6:	4a13      	ldr	r2, [pc, #76]	@ (8001034 <MX_I2C2_Init+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_I2C2_Init+0x50>)
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_I2C2_Init+0x58>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_I2C2_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_I2C2_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_I2C2_Init+0x50>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001002:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_I2C2_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_I2C2_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_I2C2_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_I2C2_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_I2C2_Init+0x50>)
 800101e:	f001 fa77 	bl	8002510 <HAL_I2C_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001028:	f000 f9a6 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000258 	.word	0x20000258
 8001034:	40005800 	.word	0x40005800
 8001038:	000186a0 	.word	0x000186a0

0800103c <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a64      	ldr	r2, [pc, #400]	@ (80011ec <HAL_I2C_MspInit+0x1b0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12c      	bne.n	80010b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
 8001062:	4b63      	ldr	r3, [pc, #396]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a62      	ldr	r2, [pc, #392]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b60      	ldr	r3, [pc, #384]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107a:	23c0      	movs	r3, #192	@ 0xc0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108a:	2304      	movs	r3, #4
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4857      	ldr	r0, [pc, #348]	@ (80011f4 <HAL_I2C_MspInit+0x1b8>)
 8001096:	f001 f89d 	bl	80021d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	4b54      	ldr	r3, [pc, #336]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a53      	ldr	r2, [pc, #332]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b51      	ldr	r3, [pc, #324]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010b6:	e094      	b.n	80011e2 <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	@ (80011f8 <HAL_I2C_MspInit+0x1bc>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13e      	bne.n	8001140 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b4a      	ldr	r3, [pc, #296]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a49      	ldr	r2, [pc, #292]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b47      	ldr	r3, [pc, #284]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010f0:	2304      	movs	r3, #4
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	483e      	ldr	r0, [pc, #248]	@ (80011f4 <HAL_I2C_MspInit+0x1b8>)
 80010fc:	f001 f86a 	bl	80021d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001106:	2312      	movs	r3, #18
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001112:	2309      	movs	r3, #9
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <HAL_I2C_MspInit+0x1b8>)
 800111e:	f001 f859 	bl	80021d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a31      	ldr	r2, [pc, #196]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
}
 800113e:	e050      	b.n	80011e2 <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <HAL_I2C_MspInit+0x1c0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d14b      	bne.n	80011e2 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a27      	ldr	r2, [pc, #156]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a20      	ldr	r2, [pc, #128]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001188:	2312      	movs	r3, #18
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001194:	2304      	movs	r3, #4
 8001196:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <HAL_I2C_MspInit+0x1c4>)
 80011a0:	f001 f818 	bl	80021d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011b6:	2304      	movs	r3, #4
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4810      	ldr	r0, [pc, #64]	@ (8001204 <HAL_I2C_MspInit+0x1c8>)
 80011c2:	f001 f807 	bl	80021d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80011d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_I2C_MspInit+0x1b4>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
}
 80011e2:	bf00      	nop
 80011e4:	3738      	adds	r7, #56	@ 0x38
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40005400 	.word	0x40005400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40005800 	.word	0x40005800
 80011fc:	40005c00 	.word	0x40005c00
 8001200:	40020800 	.word	0x40020800
 8001204:	40020000 	.word	0x40020000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fe66 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f836 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f7ff fe48 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001218:	f000 fdc4 	bl	8001da4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800121c:	f7ff feb2 	bl	8000f84 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001220:	f7ff fede 	bl	8000fe0 <MX_I2C2_Init>
//  MX_I2C3_Init();
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <main+0x68>)
 8001226:	f001 f973 	bl	8002510 <HAL_I2C_Init>
//  HAL_Delay(1000);
  while (MPU6050_Init(&MPU60501, &hi2c1, MPU6050_ADDR) == 1);
 800122a:	bf00      	nop
 800122c:	22d0      	movs	r2, #208	@ 0xd0
 800122e:	4910      	ldr	r1, [pc, #64]	@ (8001270 <main+0x68>)
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <main+0x6c>)
 8001232:	f000 f8a9 	bl	8001388 <MPU6050_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d0f7      	beq.n	800122c <main+0x24>
  HAL_I2C_Init(&hi2c2);
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <main+0x70>)
 800123e:	f001 f967 	bl	8002510 <HAL_I2C_Init>
//  HAL_Delay(1000);
  while (MPU6050_Init(&MPU60502, &hi2c2, MPU6050_ADDR) == 1);
 8001242:	bf00      	nop
 8001244:	22d0      	movs	r2, #208	@ 0xd0
 8001246:	490c      	ldr	r1, [pc, #48]	@ (8001278 <main+0x70>)
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <main+0x74>)
 800124a:	f000 f89d 	bl	8001388 <MPU6050_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d0f7      	beq.n	8001244 <main+0x3c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU60501);
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <main+0x6c>)
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <main+0x68>)
 8001258:	f000 f92e 	bl	80014b8 <MPU6050_Read_All>
	  MPU6050_Read_All(&hi2c2, &MPU60502);
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <main+0x74>)
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <main+0x70>)
 8001260:	f000 f92a 	bl	80014b8 <MPU6050_Read_All>
	  HAL_Delay (100);
 8001264:	2064      	movs	r0, #100	@ 0x64
 8001266:	f000 feab 	bl	8001fc0 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU60501);
 800126a:	bf00      	nop
 800126c:	e7f2      	b.n	8001254 <main+0x4c>
 800126e:	bf00      	nop
 8001270:	20000204 	.word	0x20000204
 8001274:	200002b0 	.word	0x200002b0
 8001278:	20000258 	.word	0x20000258
 800127c:	200003a0 	.word	0x200003a0

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	@ 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 ff63 	bl	800515a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b28      	ldr	r3, [pc, #160]	@ (800134c <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a27      	ldr	r2, [pc, #156]	@ (800134c <SystemClock_Config+0xcc>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <SystemClock_Config+0xcc>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a21      	ldr	r2, [pc, #132]	@ (8001350 <SystemClock_Config+0xd0>)
 80012ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <SystemClock_Config+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012f0:	2310      	movs	r3, #16
 80012f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012fe:	2304      	movs	r3, #4
 8001300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	4618      	mov	r0, r3
 8001308:	f002 f926 	bl	8003558 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001312:	f000 f831 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fb88 	bl	8003a48 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133e:	f000 f81b 	bl	8001378 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	@ 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000

08001354 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800135c:	1d39      	adds	r1, r7, #4
 800135e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001362:	2201      	movs	r2, #1
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <__io_putchar+0x20>)
 8001366:	f002 fddf 	bl	8003f28 <HAL_UART_Transmit>

  return ch;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000498 	.word	0x20000498

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>
 8001384:	0000      	movs	r0, r0
	...

08001388 <MPU6050_Init>:
const uint16_t i2c_timeout = 100;
const double Accel_Z_corrector = 14418.0;

uint32_t timer;

uint8_t MPU6050_Init(MPU6050_t *mpu, I2C_HandleTypeDef *I2Cx, uint8_t address) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af04      	add	r7, sp, #16
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4613      	mov	r3, r2
 8001394:	71fb      	strb	r3, [r7, #7]

	mpu -> KalmanX.Q_angle = 0.001f;
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	a341      	add	r3, pc, #260	@ (adr r3, 80014a0 <MPU6050_Init+0x118>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	mpu -> KalmanX.Q_bias = 0.003f;
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	a340      	add	r3, pc, #256	@ (adr r3, 80014a8 <MPU6050_Init+0x120>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	mpu -> KalmanX.R_measure = 0.03f;
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	a33f      	add	r3, pc, #252	@ (adr r3, 80014b0 <MPU6050_Init+0x128>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	mpu -> KalmanY.Q_bias = 0.003f;
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	a33a      	add	r3, pc, #232	@ (adr r3, 80014a8 <MPU6050_Init+0x120>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	mpu -> KalmanY.R_measure = 0.03f;
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	a339      	add	r3, pc, #228	@ (adr r3, 80014b0 <MPU6050_Init+0x128>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
	mpu -> KalmanY.Q_angle = 0.001f;
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	a332      	add	r3, pc, #200	@ (adr r3, 80014a0 <MPU6050_Init+0x118>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	mpu -> address = address;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]

    uint8_t check = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	75fb      	strb	r3, [r7, #23]
    uint8_t Data = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75bb      	strb	r3, [r7, #22]

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, address, WHO_AM_I_REG, 1, &check, 1, 10000);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	b299      	uxth	r1, r3
 80013f0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	f107 0317 	add.w	r3, r7, #23
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	2275      	movs	r2, #117	@ 0x75
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f001 fac1 	bl	800298c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b68      	cmp	r3, #104	@ 0x68
 800140e:	d141      	bne.n	8001494 <MPU6050_Init+0x10c>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	b299      	uxth	r1, r3
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 0316 	add.w	r3, r7, #22
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	226b      	movs	r2, #107	@ 0x6b
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f001 f9b4 	bl	8002798 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001430:	2307      	movs	r3, #7
 8001432:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	b299      	uxth	r1, r3
 8001438:	2364      	movs	r3, #100	@ 0x64
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	f107 0316 	add.w	r3, r7, #22
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	2219      	movs	r2, #25
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f001 f9a4 	bl	8002798 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001450:	2300      	movs	r3, #0
 8001452:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	b299      	uxth	r1, r3
 8001458:	2364      	movs	r3, #100	@ 0x64
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2301      	movs	r3, #1
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f107 0316 	add.w	r3, r7, #22
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	221c      	movs	r2, #28
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f001 f994 	bl	8002798 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001470:	2300      	movs	r3, #0
 8001472:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, address, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	b299      	uxth	r1, r3
 8001478:	2364      	movs	r3, #100	@ 0x64
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2301      	movs	r3, #1
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	f107 0316 	add.w	r3, r7, #22
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	221b      	movs	r2, #27
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f001 f984 	bl	8002798 <HAL_I2C_Mem_Write>
        return 0;
 8001490:	2300      	movs	r3, #0
 8001492:	e000      	b.n	8001496 <MPU6050_Init+0x10e>
    }
    return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e0000000 	.word	0xe0000000
 80014a4:	3f50624d 	.word	0x3f50624d
 80014a8:	c0000000 	.word	0xc0000000
 80014ac:	3f689374 	.word	0x3f689374
 80014b0:	e0000000 	.word	0xe0000000
 80014b4:	3f9eb851 	.word	0x3f9eb851

080014b8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b094      	sub	sp, #80	@ 0x50
 80014be:	af04      	add	r7, sp, #16
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, DataStruct->address, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b299      	uxth	r1, r3
 80014ca:	2364      	movs	r3, #100	@ 0x64
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	230e      	movs	r3, #14
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	223b      	movs	r2, #59	@ 0x3b
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f001 fa55 	bl	800298c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7a7b      	ldrb	r3, [r7, #9]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	809a      	strh	r2, [r3, #4]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80014f4:	7abb      	ldrb	r3, [r7, #10]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21a      	sxth	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	80da      	strh	r2, [r3, #6]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	811a      	strh	r2, [r3, #8]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001526:	7c3b      	ldrb	r3, [r7, #16]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7c7b      	ldrb	r3, [r7, #17]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	851a      	strh	r2, [r3, #40]	@ 0x28
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001538:	7cbb      	ldrb	r3, [r7, #18]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	855a      	strh	r2, [r3, #42]	@ 0x2a
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800154a:	7d3b      	ldrb	r3, [r7, #20]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	859a      	strh	r2, [r3, #44]	@ 0x2c

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffe6 	bl	8000534 <__aeabi_i2d>
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4bc0      	ldr	r3, [pc, #768]	@ (8001870 <MPU6050_Read_All+0x3b8>)
 800156e:	f7ff f975 	bl	800085c <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffd6 	bl	8000534 <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4bb8      	ldr	r3, [pc, #736]	@ (8001870 <MPU6050_Read_All+0x3b8>)
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffc6 	bl	8000534 <__aeabi_i2d>
 80015a8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8001858 <MPU6050_Read_All+0x3a0>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f955 	bl	800085c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80015bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c8:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8001874 <MPU6050_Read_All+0x3bc>
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001878 <MPU6050_Read_All+0x3c0>
 80015d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffa5 	bl	8000534 <__aeabi_i2d>
 80015ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8001860 <MPU6050_Read_All+0x3a8>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f934 	bl	800085c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	a395      	add	r3, pc, #596	@ (adr r3, 8001860 <MPU6050_Read_All+0x3a8>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f924 	bl	800085c <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff85 	bl	8000534 <__aeabi_i2d>
 800162a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001860 <MPU6050_Read_All+0x3a8>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff f914 	bl	800085c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800163e:	f000 fcb3 	bl	8001fa8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	4b8d      	ldr	r3, [pc, #564]	@ (800187c <MPU6050_Read_All+0x3c4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff62 	bl	8000514 <__aeabi_ui2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b8a      	ldr	r3, [pc, #552]	@ (8001880 <MPU6050_Read_All+0x3c8>)
 8001656:	f7ff f901 	bl	800085c <__aeabi_ddiv>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001662:	f000 fca1 	bl	8001fa8 <HAL_GetTick>
 8001666:	4603      	mov	r3, r0
 8001668:	4a84      	ldr	r2, [pc, #528]	@ (800187c <MPU6050_Read_All+0x3c4>)
 800166a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800167a:	fb03 f202 	mul.w	r2, r3, r2
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001684:	4619      	mov	r1, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff4e 	bl	8000534 <__aeabi_i2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	ec43 2b10 	vmov	d0, r2, r3
 80016a0:	f005 fc80 	bl	8006fa4 <sqrt>
 80016a4:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016b4:	f7ff fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d11f      	bne.n	80016fe <MPU6050_Read_All+0x246>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff35 	bl	8000534 <__aeabi_i2d>
 80016ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ce:	f7ff f8c5 	bl	800085c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	ec43 2b17 	vmov	d7, r2, r3
 80016da:	eeb0 0a47 	vmov.f32	s0, s14
 80016de:	eef0 0a67 	vmov.f32	s1, s15
 80016e2:	f005 fc8d 	bl	8007000 <atan>
 80016e6:	ec51 0b10 	vmov	r0, r1, d0
 80016ea:	a35f      	add	r3, pc, #380	@ (adr r3, 8001868 <MPU6050_Read_All+0x3b0>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff8a 	bl	8000608 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80016fc:	e005      	b.n	800170a <MPU6050_Read_All+0x252>
    } else {
        roll = 0.0;
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001710:	425b      	negs	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff0e 	bl	8000534 <__aeabi_i2d>
 8001718:	4682      	mov	sl, r0
 800171a:	468b      	mov	fp, r1
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff06 	bl	8000534 <__aeabi_i2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ec43 2b11 	vmov	d1, r2, r3
 8001730:	ec4b ab10 	vmov	d0, sl, fp
 8001734:	f005 fc34 	bl	8006fa0 <atan2>
 8001738:	ec51 0b10 	vmov	r0, r1, d0
 800173c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001868 <MPU6050_Read_All+0x3b0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff61 	bl	8000608 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b4c      	ldr	r3, [pc, #304]	@ (8001884 <MPU6050_Read_All+0x3cc>)
 8001754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001758:	f7ff f9c8 	bl	8000aec <__aeabi_dcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00a      	beq.n	8001778 <MPU6050_Read_All+0x2c0>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <MPU6050_Read_All+0x3d0>)
 800176e:	f7ff f9db 	bl	8000b28 <__aeabi_dcmpgt>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d114      	bne.n	80017a2 <MPU6050_Read_All+0x2ea>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <MPU6050_Read_All+0x3d0>)
 800177e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001782:	f7ff f9d1 	bl	8000b28 <__aeabi_dcmpgt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d015      	beq.n	80017b8 <MPU6050_Read_All+0x300>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <MPU6050_Read_All+0x3cc>)
 8001798:	f7ff f9a8 	bl	8000aec <__aeabi_dcmplt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <MPU6050_Read_All+0x300>
        DataStruct->KalmanY.angle = pitch;
 80017a2:	6839      	ldr	r1, [r7, #0]
 80017a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a8:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
        DataStruct->KalmanAngleY = pitch;
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 80017b6:	e017      	b.n	80017e8 <MPU6050_Read_All+0x330>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&(DataStruct->KalmanY), pitch, DataStruct->Gy, dt);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80017c4:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80017c8:	eeb0 1a47 	vmov.f32	s2, s14
 80017cc:	eef0 1a67 	vmov.f32	s3, s15
 80017d0:	ed97 0b06 	vldr	d0, [r7, #24]
 80017d4:	4610      	mov	r0, r2
 80017d6:	f000 f859 	bl	800188c <Kalman_getAngle>
 80017da:	eeb0 7a40 	vmov.f32	s14, s0
 80017de:	eef0 7a60 	vmov.f32	s15, s1
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80017ee:	4690      	mov	r8, r2
 80017f0:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <MPU6050_Read_All+0x3d0>)
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7ff f993 	bl	8000b28 <__aeabi_dcmpgt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <MPU6050_Read_All+0x362>
        DataStruct->Gx = -DataStruct->Gx;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800180e:	4614      	mov	r4, r2
 8001810:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
    DataStruct->KalmanAngleX = Kalman_getAngle(&(DataStruct->KalmanX), roll, DataStruct->Gy, dt);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001826:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800182a:	eeb0 1a47 	vmov.f32	s2, s14
 800182e:	eef0 1a67 	vmov.f32	s3, s15
 8001832:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001836:	4610      	mov	r0, r2
 8001838:	f000 f828 	bl	800188c <Kalman_getAngle>
 800183c:	eeb0 7a40 	vmov.f32	s14, s0
 8001840:	eef0 7a60 	vmov.f32	s15, s1
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50

}
 800184a:	bf00      	nop
 800184c:	3740      	adds	r7, #64	@ 0x40
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	00000000 	.word	0x00000000
 800185c:	40cc2900 	.word	0x40cc2900
 8001860:	00000000 	.word	0x00000000
 8001864:	40606000 	.word	0x40606000
 8001868:	1a63c1f8 	.word	0x1a63c1f8
 800186c:	404ca5dc 	.word	0x404ca5dc
 8001870:	40d00000 	.word	0x40d00000
 8001874:	43aa0000 	.word	0x43aa0000
 8001878:	42121eb8 	.word	0x42121eb8
 800187c:	20000490 	.word	0x20000490
 8001880:	408f4000 	.word	0x408f4000
 8001884:	c0568000 	.word	0xc0568000
 8001888:	40568000 	.word	0x40568000

0800188c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b096      	sub	sp, #88	@ 0x58
 8001890:	af00      	add	r7, sp, #0
 8001892:	61f8      	str	r0, [r7, #28]
 8001894:	ed87 0b04 	vstr	d0, [r7, #16]
 8001898:	ed87 1b02 	vstr	d1, [r7, #8]
 800189c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018aa:	f7fe fcf5 	bl	8000298 <__aeabi_dsub>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c4:	f7fe fea0 	bl	8000608 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe fce4 	bl	800029c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	69f9      	ldr	r1, [r7, #28]
 80018da:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80018ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ee:	f7fe fe8b 	bl	8000608 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001900:	f7fe fcca 	bl	8000298 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001912:	f7fe fcc1 	bl	8000298 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fcba 	bl	800029c <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001934:	f7fe fe68 	bl	8000608 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fcac 	bl	800029c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	69f9      	ldr	r1, [r7, #28]
 800194a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800195a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800195e:	f7fe fe53 	bl	8000608 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fc95 	bl	8000298 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	69f9      	ldr	r1, [r7, #28]
 8001974:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001988:	f7fe fe3e 	bl	8000608 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fc80 	bl	8000298 <__aeabi_dsub>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019b2:	f7fe fe29 	bl	8000608 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc6d 	bl	800029c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	69f9      	ldr	r1, [r7, #28]
 80019c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019d8:	f7fe fc60 	bl	800029c <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80019ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019ee:	f7fe ff35 	bl	800085c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a04:	f7fe ff2a 	bl	800085c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a1a:	f7fe fc3d 	bl	8000298 <__aeabi_dsub>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a34:	f7fe fde8 	bl	8000608 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	4629      	mov	r1, r5
 8001a40:	f7fe fc2c 	bl	800029c <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	69f9      	ldr	r1, [r7, #28]
 8001a4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001a54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a5c:	f7fe fdd4 	bl	8000608 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fc18 	bl	800029c <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	69f9      	ldr	r1, [r7, #28]
 8001a72:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a98:	f7fe fdb6 	bl	8000608 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fbf8 	bl	8000298 <__aeabi_dsub>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	69f9      	ldr	r1, [r7, #28]
 8001aae:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001ab8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001abc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ac0:	f7fe fda2 	bl	8000608 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fbe4 	bl	8000298 <__aeabi_dsub>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	69f9      	ldr	r1, [r7, #28]
 8001ad6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001ae0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ae8:	f7fe fd8e 	bl	8000608 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fbd0 	bl	8000298 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	69f9      	ldr	r1, [r7, #28]
 8001afe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b10:	f7fe fd7a 	bl	8000608 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fbbc 	bl	8000298 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	69f9      	ldr	r1, [r7, #28]
 8001b26:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b30:	ec43 2b17 	vmov	d7, r2, r3
};
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	3758      	adds	r7, #88	@ 0x58
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f000 faf2 	bl	800216c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 f9c9 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_kill>:

int _kill(int pid, int sig)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0c:	f003 faf8 	bl	8005200 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2216      	movs	r2, #22
 8001c14:	601a      	str	r2, [r3, #0]
  return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_exit>:

void _exit (int status)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffe7 	bl	8001c02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <_exit+0x12>

08001c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
  }

  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb61 	bl	8001354 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
  }
  return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f003 fa5c 	bl	8005200 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000494 	.word	0x20000494
 8001d7c:	20000630 	.word	0x20000630

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <MX_USART2_UART_Init+0x50>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f002 f854 	bl	8003e88 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001de6:	f7ff fac7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000498 	.word	0x20000498
 8001df4:	40004400 	.word	0x40004400

08001df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_UART_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	230c      	movs	r3, #12
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e62:	2307      	movs	r3, #7
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <HAL_UART_MspInit+0x8c>)
 8001e6e:	f000 f9b1 	bl	80021d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8c:	f7ff ff78 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f003 f9a9 	bl	800520c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff f9a5 	bl	8001208 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ecc:	08007aa8 	.word	0x08007aa8
  ldr r2, =_sbss
 8001ed0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ed4:	20000630 	.word	0x20000630

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f931 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fe18 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f93b 	bl	80021ba <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f911 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	@ (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	200004e0 	.word	0x200004e0

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
	}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200004e0 	.word	0x200004e0

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff47 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff5c 	bl	8002050 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb0 	bl	8002128 <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e159      	b.n	80024a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8148 	bne.w	800249e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a2 	beq.w	800249e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a52      	ldr	r2, [pc, #328]	@ (80024c0 <HAL_GPIO_Init+0x2ec>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x202>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_GPIO_Init+0x2f4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x1fe>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a47      	ldr	r2, [pc, #284]	@ (80024cc <HAL_GPIO_Init+0x2f8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x1fa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a46      	ldr	r2, [pc, #280]	@ (80024d0 <HAL_GPIO_Init+0x2fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x1f6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	@ (80024d4 <HAL_GPIO_Init+0x300>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x1f2>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	@ (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a0f      	ldr	r2, [pc, #60]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f aea2 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	619a      	str	r2, [r3, #24]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e12b      	b.n	800277a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fd80 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	@ 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002574:	f001 fc60 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a81      	ldr	r2, [pc, #516]	@ (8002784 <HAL_I2C_Init+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d807      	bhi.n	8002594 <HAL_I2C_Init+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a80      	ldr	r2, [pc, #512]	@ (8002788 <HAL_I2C_Init+0x278>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e006      	b.n	80025a2 <HAL_I2C_Init+0x92>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7d      	ldr	r2, [pc, #500]	@ (800278c <HAL_I2C_Init+0x27c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0e7      	b.n	800277a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a78      	ldr	r2, [pc, #480]	@ (8002790 <HAL_I2C_Init+0x280>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002784 <HAL_I2C_Init+0x274>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d802      	bhi.n	80025e4 <HAL_I2C_Init+0xd4>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3301      	adds	r3, #1
 80025e2:	e009      	b.n	80025f8 <HAL_I2C_Init+0xe8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	4a69      	ldr	r2, [pc, #420]	@ (8002794 <HAL_I2C_Init+0x284>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800260a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	495c      	ldr	r1, [pc, #368]	@ (8002784 <HAL_I2C_Init+0x274>)
 8002614:	428b      	cmp	r3, r1
 8002616:	d819      	bhi.n	800264c <HAL_I2C_Init+0x13c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e59      	subs	r1, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb1 f3f3 	udiv	r3, r1, r3
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800262c:	400b      	ands	r3, r1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_I2C_Init+0x138>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e59      	subs	r1, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	e051      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 8002648:	2304      	movs	r3, #4
 800264a:	e04f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <HAL_I2C_Init+0x168>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e012      	b.n	800269e <HAL_I2C_Init+0x18e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x196>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <HAL_I2C_Init+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e58      	subs	r0, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	440b      	add	r3, r1
 80026bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	6809      	ldr	r1, [r1, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800271a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6911      	ldr	r1, [r2, #16]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	000186a0 	.word	0x000186a0
 8002788:	001e847f 	.word	0x001e847f
 800278c:	003d08ff 	.word	0x003d08ff
 8002790:	431bde83 	.word	0x431bde83
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b2:	f7ff fbf9 	bl	8001fa8 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	f040 80d9 	bne.w	8002978 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2319      	movs	r3, #25
 80027cc:	2201      	movs	r2, #1
 80027ce:	496d      	ldr	r1, [pc, #436]	@ (8002984 <HAL_I2C_Mem_Write+0x1ec>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fc8b 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	e0cc      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_I2C_Mem_Write+0x56>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0c5      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d007      	beq.n	8002814 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2221      	movs	r2, #33	@ 0x21
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a4d      	ldr	r2, [pc, #308]	@ (8002988 <HAL_I2C_Mem_Write+0x1f0>)
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002856:	88f8      	ldrh	r0, [r7, #6]
 8002858:	893a      	ldrh	r2, [r7, #8]
 800285a:	8979      	ldrh	r1, [r7, #10]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4603      	mov	r3, r0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fac2 	bl	8002df0 <I2C_RequestMemoryWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d052      	beq.n	8002918 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e081      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fd50 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d107      	bne.n	800289e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06b      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11b      	bne.n	8002918 <HAL_I2C_Mem_Write+0x180>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1aa      	bne.n	8002876 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fd43 	bl	80033b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002946:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e016      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	00100002 	.word	0x00100002
 8002988:	ffff0000 	.word	0xffff0000

0800298c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	@ 0x30
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7ff faff 	bl	8001fa8 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	f040 8214 	bne.w	8002de2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2319      	movs	r3, #25
 80029c0:	2201      	movs	r2, #1
 80029c2:	497b      	ldr	r1, [pc, #492]	@ (8002bb0 <HAL_I2C_Mem_Read+0x224>)
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fb91 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	e207      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_I2C_Mem_Read+0x56>
 80029de:	2302      	movs	r3, #2
 80029e0:	e200      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d007      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2222      	movs	r2, #34	@ 0x22
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	@ 0x40
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb4 <HAL_I2C_Mem_Read+0x228>)
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a4a:	88f8      	ldrh	r0, [r7, #6]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	8979      	ldrh	r1, [r7, #10]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa5e 	bl	8002f1c <I2C_RequestMemoryRead>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e1bc      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d113      	bne.n	8002a9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	623b      	str	r3, [r7, #32]
 8002a86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e190      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d11b      	bne.n	8002ada <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e170      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d11b      	bne.n	8002b1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	e150      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b30:	e144      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 80f1 	bhi.w	8002d1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d123      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fc79 	bl	8003440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e145      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b8a:	e117      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d14e      	bne.n	8002c32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4906      	ldr	r1, [pc, #24]	@ (8002bb8 <HAL_I2C_Mem_Read+0x22c>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 faa4 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e11a      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000
 8002bb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c30:	e0c4      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	2200      	movs	r2, #0
 8002c3a:	496c      	ldr	r1, [pc, #432]	@ (8002dec <HAL_I2C_Mem_Read+0x460>)
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fa55 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cb      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c94:	2200      	movs	r2, #0
 8002c96:	4955      	ldr	r1, [pc, #340]	@ (8002dec <HAL_I2C_Mem_Read+0x460>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fa27 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e09d      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d1c:	e04e      	b.n	8002dbc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb8c 	bl	8003440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e058      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d124      	bne.n	8002dbc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d107      	bne.n	8002d8a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f aeb6 	bne.w	8002b32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3728      	adds	r7, #40	@ 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	00010004 	.word	0x00010004

08002df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f960 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e40:	d103      	bne.n	8002e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e05f      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	492d      	ldr	r1, [pc, #180]	@ (8002f18 <I2C_RequestMemoryWrite+0x128>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f9bb 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04c      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa46 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d107      	bne.n	8002eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e02b      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e021      	b.n	8002f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed8:	6a39      	ldr	r1, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa20 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d107      	bne.n	8002efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e005      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f02:	893b      	ldrh	r3, [r7, #8]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00010002 	.word	0x00010002

08002f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8c2 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7c:	d103      	bne.n	8002f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0aa      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	4952      	ldr	r1, [pc, #328]	@ (80030e8 <I2C_RequestMemoryRead+0x1cc>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f91d 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e097      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f9a8 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d107      	bne.n	8002fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e076      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e021      	b.n	8003048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b29b      	uxth	r3, r3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f982 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e050      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f967 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e035      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2200      	movs	r2, #0
 800308c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f82b 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030aa:	d103      	bne.n	80030b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e013      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	4906      	ldr	r1, [pc, #24]	@ (80030e8 <I2C_RequestMemoryRead+0x1cc>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f886 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	00010002 	.word	0x00010002

080030ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fc:	e048      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d044      	beq.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
    	if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe ff4f 	bl	8001fa8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d139      	bne.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10d      	bne.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	e00c      	b.n	800315c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	429a      	cmp	r2, r3
 8003160:	d116      	bne.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e023      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10d      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	e00c      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d093      	beq.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ee:	e071      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fe:	d123      	bne.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e067      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d041      	beq.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fe feaa 	bl	8001fa8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d136      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10c      	bne.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e00b      	b.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e021      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10c      	bne.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e00b      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f af6d 	bne.w	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332c:	e034      	b.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8e3 	bl	80034fa <I2C_IsAcknowledgeFailed>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e034      	b.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d028      	beq.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fe2f 	bl	8001fa8 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11d      	bne.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d1c3      	bne.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033bc:	e034      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f89b 	bl	80034fa <I2C_IsAcknowledgeFailed>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e034      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d028      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fde7 	bl	8001fa8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d11d      	bne.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d016      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d1c3      	bne.n	80033be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800344c:	e049      	b.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d119      	bne.n	8003490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0210 	mvn.w	r2, #16
 8003464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e030      	b.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7fe fd8a 	bl	8001fa8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d016      	beq.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d1ae      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003510:	d11b      	bne.n	800354a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800351a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e267      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d075      	beq.n	8003662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	4b88      	ldr	r3, [pc, #544]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00c      	beq.n	800359c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b85      	ldr	r3, [pc, #532]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358a:	2b08      	cmp	r3, #8
 800358c:	d112      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800359a:	d10b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	4b7e      	ldr	r3, [pc, #504]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05b      	beq.n	8003660 <HAL_RCC_OscConfig+0x108>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d157      	bne.n	8003660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e242      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x74>
 80035be:	4b76      	ldr	r3, [pc, #472]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a75      	ldr	r2, [pc, #468]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e01d      	b.n	8003608 <HAL_RCC_OscConfig+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x98>
 80035d6:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6f      	ldr	r2, [pc, #444]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0xb0>
 80035f0:	4b69      	ldr	r3, [pc, #420]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a68      	ldr	r2, [pc, #416]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b66      	ldr	r3, [pc, #408]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fcca 	bl	8001fa8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe fcc6 	bl	8001fa8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	@ 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e207      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b5b      	ldr	r3, [pc, #364]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0xc0>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe fcb6 	bl	8001fa8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe fcb2 	bl	8001fa8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1f3      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003652:	4b51      	ldr	r3, [pc, #324]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0xe8>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	4b4a      	ldr	r3, [pc, #296]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367a:	4b47      	ldr	r3, [pc, #284]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003682:	2b08      	cmp	r3, #8
 8003684:	d11c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003686:	4b44      	ldr	r3, [pc, #272]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	4b41      	ldr	r3, [pc, #260]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x152>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1c7      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4937      	ldr	r1, [pc, #220]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	e03a      	b.n	8003736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c8:	4b34      	ldr	r3, [pc, #208]	@ (800379c <HAL_RCC_OscConfig+0x244>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fc6b 	bl	8001fa8 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fe fc67 	bl	8001fa8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1a8      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b28      	ldr	r3, [pc, #160]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4925      	ldr	r1, [pc, #148]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b24      	ldr	r3, [pc, #144]	@ (800379c <HAL_RCC_OscConfig+0x244>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe fc4a 	bl	8001fa8 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003718:	f7fe fc46 	bl	8001fa8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e187      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d036      	beq.n	80037b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374a:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_RCC_OscConfig+0x248>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe fc2a 	bl	8001fa8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe fc26 	bl	8001fa8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e167      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_RCC_OscConfig+0x240>)
 800376c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x200>
 8003776:	e01b      	b.n	80037b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCC_OscConfig+0x248>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fe fc13 	bl	8001fa8 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	e00e      	b.n	80037a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003786:	f7fe fc0f 	bl	8001fa8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d907      	bls.n	80037a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e150      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
 8003798:	40023800 	.word	0x40023800
 800379c:	42470000 	.word	0x42470000
 80037a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ea      	bne.n	8003786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8097 	beq.w	80038ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b81      	ldr	r3, [pc, #516]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	4b7d      	ldr	r3, [pc, #500]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a7c      	ldr	r2, [pc, #496]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037de:	4b7a      	ldr	r3, [pc, #488]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b77      	ldr	r3, [pc, #476]	@ (80039cc <HAL_RCC_OscConfig+0x474>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b74      	ldr	r3, [pc, #464]	@ (80039cc <HAL_RCC_OscConfig+0x474>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a73      	ldr	r2, [pc, #460]	@ (80039cc <HAL_RCC_OscConfig+0x474>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fe fbcf 	bl	8001fa8 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe fbcb 	bl	8001fa8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e10c      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_OscConfig+0x474>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x2ea>
 8003834:	4b64      	ldr	r3, [pc, #400]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003838:	4a63      	ldr	r2, [pc, #396]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003840:	e01c      	b.n	800387c <HAL_RCC_OscConfig+0x324>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b05      	cmp	r3, #5
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x30c>
 800384a:	4b5f      	ldr	r3, [pc, #380]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	4a5e      	ldr	r2, [pc, #376]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6713      	str	r3, [r2, #112]	@ 0x70
 8003856:	4b5c      	ldr	r3, [pc, #368]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	4a5b      	ldr	r2, [pc, #364]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	@ 0x70
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x324>
 8003864:	4b58      	ldr	r3, [pc, #352]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	4a57      	ldr	r2, [pc, #348]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003870:	4b55      	ldr	r3, [pc, #340]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a54      	ldr	r2, [pc, #336]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe fb90 	bl	8001fa8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fb8c 	bl	8001fa8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0cb      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCC_OscConfig+0x334>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fe fb7a 	bl	8001fa8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fe fb76 	bl	8001fa8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0b5      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	4b3e      	ldr	r3, [pc, #248]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ee      	bne.n	80038b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b39      	ldr	r3, [pc, #228]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	4a38      	ldr	r2, [pc, #224]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80a1 	beq.w	8003a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f6:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d05c      	beq.n	80039bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d141      	bne.n	800398e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <HAL_RCC_OscConfig+0x478>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fb4a 	bl	8001fa8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fb46 	bl	8001fa8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e087      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	491b      	ldr	r1, [pc, #108]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <HAL_RCC_OscConfig+0x478>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fe fb1f 	bl	8001fa8 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396e:	f7fe fb1b 	bl	8001fa8 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e05c      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003980:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x416>
 800398c:	e054      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <HAL_RCC_OscConfig+0x478>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fb08 	bl	8001fa8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fe fb04 	bl	8001fa8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e045      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCC_OscConfig+0x470>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
 80039ba:	e03d      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e038      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x4ec>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d028      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d121      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d11a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0cc      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b68      	ldr	r3, [pc, #416]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d90c      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b65      	ldr	r3, [pc, #404]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b63      	ldr	r3, [pc, #396]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0b8      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a9c:	4b59      	ldr	r3, [pc, #356]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab4:	4b53      	ldr	r3, [pc, #332]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a52      	ldr	r2, [pc, #328]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b50      	ldr	r3, [pc, #320]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	494d      	ldr	r1, [pc, #308]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d044      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	4b47      	ldr	r3, [pc, #284]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d119      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e07f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b06:	4b3f      	ldr	r3, [pc, #252]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b16:	4b3b      	ldr	r3, [pc, #236]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e067      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b26:	4b37      	ldr	r3, [pc, #220]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4934      	ldr	r1, [pc, #208]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b38:	f7fe fa36 	bl	8001fa8 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b40:	f7fe fa32 	bl	8001fa8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e04f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 020c 	and.w	r2, r3, #12
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1eb      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b68:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d20c      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b22      	ldr	r3, [pc, #136]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e032      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b19      	ldr	r3, [pc, #100]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4916      	ldr	r1, [pc, #88]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bba:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	490e      	ldr	r1, [pc, #56]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bce:	f000 f821 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	490a      	ldr	r1, [pc, #40]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	5ccb      	ldrb	r3, [r1, r3]
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	4a09      	ldr	r2, [pc, #36]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe f996 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023c00 	.word	0x40023c00
 8003c04:	40023800 	.word	0x40023800
 8003c08:	080076a0 	.word	0x080076a0
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000004 	.word	0x20000004

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c18:	b094      	sub	sp, #80	@ 0x50
 8003c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c20:	2300      	movs	r3, #0
 8003c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c24:	2300      	movs	r3, #0
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2c:	4b79      	ldr	r3, [pc, #484]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d00d      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x40>
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	f200 80e1 	bhi.w	8003e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x34>
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c46:	e0db      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c48:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c4c:	e0db      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4e:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c52:	e0d8      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c54:	4b6f      	ldr	r3, [pc, #444]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	2200      	movs	r2, #0
 8003c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7e:	2300      	movs	r3, #0
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	0159      	lsls	r1, r3, #5
 8003c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c98:	0150      	lsls	r0, r2, #5
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	1a51      	subs	r1, r2, r1
 8003ca2:	6139      	str	r1, [r7, #16]
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb8:	4659      	mov	r1, fp
 8003cba:	018b      	lsls	r3, r1, #6
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	018a      	lsls	r2, r1, #6
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ccc:	4659      	mov	r1, fp
 8003cce:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	4699      	mov	r9, r3
 8003cea:	4623      	mov	r3, r4
 8003cec:	eb18 0303 	adds.w	r3, r8, r3
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	eb49 0303 	adc.w	r3, r9, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d06:	4629      	mov	r1, r5
 8003d08:	024b      	lsls	r3, r1, #9
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d10:	4621      	mov	r1, r4
 8003d12:	024a      	lsls	r2, r1, #9
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d24:	f7fc ff48 	bl	8000bb8 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	e058      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b38      	ldr	r3, [pc, #224]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0159      	lsls	r1, r3, #5
 8003d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5e:	0150      	lsls	r0, r2, #5
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4641      	mov	r1, r8
 8003d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d84:	ebb2 040a 	subs.w	r4, r2, sl
 8003d88:	eb63 050b 	sbc.w	r5, r3, fp
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	61fa      	str	r2, [r7, #28]
 8003dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd8:	f7fc feee 	bl	8000bb8 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4613      	mov	r3, r2
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003df4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3750      	adds	r7, #80	@ 0x50
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e24:	4b03      	ldr	r3, [pc, #12]	@ (8003e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e3c:	f7ff fff0 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0a9b      	lsrs	r3, r3, #10
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4903      	ldr	r1, [pc, #12]	@ (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	080076b0 	.word	0x080076b0

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e64:	f7ff ffdc 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0b5b      	lsrs	r3, r3, #13
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	080076b0 	.word	0x080076b0

08003e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e042      	b.n	8003f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd ffa2 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f973 	bl	80041b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d175      	bne.n	8004034 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Transmit+0x2c>
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e06e      	b.n	8004036 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2221      	movs	r2, #33	@ 0x21
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f66:	f7fe f81f 	bl	8001fa8 <HAL_GetTick>
 8003f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f80:	d108      	bne.n	8003f94 <HAL_UART_Transmit+0x6c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e003      	b.n	8003f9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f9c:	e02e      	b.n	8003ffc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2180      	movs	r1, #128	@ 0x80
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f848 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e03a      	b.n	8004036 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3302      	adds	r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	e007      	b.n	8003fee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3301      	adds	r3, #1
 8003fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1cb      	bne.n	8003f9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	2140      	movs	r1, #64	@ 0x40
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f814 	bl	800403e <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e006      	b.n	8004036 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404e:	e03b      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d037      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fd ffa6 	bl	8001fa8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	6a3a      	ldr	r2, [r7, #32]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <UART_WaitOnFlagUntilTimeout+0x30>
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e03a      	b.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d023      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b80      	cmp	r3, #128	@ 0x80
 8004084:	d020      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d01d      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b08      	cmp	r3, #8
 8004098:	d116      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f81d 	bl	80040f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2208      	movs	r2, #8
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e00f      	b.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d0b4      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b095      	sub	sp, #84	@ 0x54
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004118:	643a      	str	r2, [r7, #64]	@ 0x40
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800411e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	61fb      	str	r3, [r7, #28]
   return(result);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3314      	adds	r3, #20
 800414a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800414c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800414e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	d119      	bne.n	800419c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60bb      	str	r3, [r7, #8]
   return(result);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004188:	61ba      	str	r2, [r7, #24]
 800418a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	613b      	str	r3, [r7, #16]
   return(result);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041aa:	bf00      	nop
 80041ac:	3754      	adds	r7, #84	@ 0x54
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b0c0      	sub	sp, #256	@ 0x100
 80041be:	af00      	add	r7, sp, #0
 80041c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	68d9      	ldr	r1, [r3, #12]
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	ea40 0301 	orr.w	r3, r0, r1
 80041e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004210:	f021 010c 	bic.w	r1, r1, #12
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800421e:	430b      	orrs	r3, r1
 8004220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	6999      	ldr	r1, [r3, #24]
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	ea40 0301 	orr.w	r3, r0, r1
 800423e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b8f      	ldr	r3, [pc, #572]	@ (8004484 <UART_SetConfig+0x2cc>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d005      	beq.n	8004258 <UART_SetConfig+0xa0>
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b8d      	ldr	r3, [pc, #564]	@ (8004488 <UART_SetConfig+0x2d0>)
 8004254:	429a      	cmp	r2, r3
 8004256:	d104      	bne.n	8004262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7ff fe02 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 800425c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004260:	e003      	b.n	800426a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004262:	f7ff fde9 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8004266:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	f040 810c 	bne.w	8004490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004282:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800428a:	4622      	mov	r2, r4
 800428c:	462b      	mov	r3, r5
 800428e:	1891      	adds	r1, r2, r2
 8004290:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004292:	415b      	adcs	r3, r3
 8004294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800429a:	4621      	mov	r1, r4
 800429c:	eb12 0801 	adds.w	r8, r2, r1
 80042a0:	4629      	mov	r1, r5
 80042a2:	eb43 0901 	adc.w	r9, r3, r1
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ba:	4690      	mov	r8, r2
 80042bc:	4699      	mov	r9, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	eb18 0303 	adds.w	r3, r8, r3
 80042c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042c8:	462b      	mov	r3, r5
 80042ca:	eb49 0303 	adc.w	r3, r9, r3
 80042ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042e6:	460b      	mov	r3, r1
 80042e8:	18db      	adds	r3, r3, r3
 80042ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ec:	4613      	mov	r3, r2
 80042ee:	eb42 0303 	adc.w	r3, r2, r3
 80042f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042fc:	f7fc fc5c 	bl	8000bb8 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4b61      	ldr	r3, [pc, #388]	@ (800448c <UART_SetConfig+0x2d4>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	011c      	lsls	r4, r3, #4
 800430e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004318:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800431c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	1891      	adds	r1, r2, r2
 8004326:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004328:	415b      	adcs	r3, r3
 800432a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800432c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004330:	4641      	mov	r1, r8
 8004332:	eb12 0a01 	adds.w	sl, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb43 0b01 	adc.w	fp, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800434c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004350:	4692      	mov	sl, r2
 8004352:	469b      	mov	fp, r3
 8004354:	4643      	mov	r3, r8
 8004356:	eb1a 0303 	adds.w	r3, sl, r3
 800435a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800435e:	464b      	mov	r3, r9
 8004360:	eb4b 0303 	adc.w	r3, fp, r3
 8004364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004374:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800437c:	460b      	mov	r3, r1
 800437e:	18db      	adds	r3, r3, r3
 8004380:	643b      	str	r3, [r7, #64]	@ 0x40
 8004382:	4613      	mov	r3, r2
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
 800438a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800438e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004392:	f7fc fc11 	bl	8000bb8 <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4611      	mov	r1, r2
 800439c:	4b3b      	ldr	r3, [pc, #236]	@ (800448c <UART_SetConfig+0x2d4>)
 800439e:	fba3 2301 	umull	r2, r3, r3, r1
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2264      	movs	r2, #100	@ 0x64
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	1acb      	subs	r3, r1, r3
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043b2:	4b36      	ldr	r3, [pc, #216]	@ (800448c <UART_SetConfig+0x2d4>)
 80043b4:	fba3 2302 	umull	r2, r3, r3, r2
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043c0:	441c      	add	r4, r3
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043dc:	415b      	adcs	r3, r3
 80043de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004430:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004438:	460b      	mov	r3, r1
 800443a:	18db      	adds	r3, r3, r3
 800443c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800443e:	4613      	mov	r3, r2
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800444a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800444e:	f7fc fbb3 	bl	8000bb8 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <UART_SetConfig+0x2d4>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	2164      	movs	r1, #100	@ 0x64
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	3332      	adds	r3, #50	@ 0x32
 800446a:	4a08      	ldr	r2, [pc, #32]	@ (800448c <UART_SetConfig+0x2d4>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	f003 0207 	and.w	r2, r3, #7
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4422      	add	r2, r4
 800447e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004480:	e106      	b.n	8004690 <UART_SetConfig+0x4d8>
 8004482:	bf00      	nop
 8004484:	40011000 	.word	0x40011000
 8004488:	40011400 	.word	0x40011400
 800448c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004494:	2200      	movs	r2, #0
 8004496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800449a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800449e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044a2:	4642      	mov	r2, r8
 80044a4:	464b      	mov	r3, r9
 80044a6:	1891      	adds	r1, r2, r2
 80044a8:	6239      	str	r1, [r7, #32]
 80044aa:	415b      	adcs	r3, r3
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b2:	4641      	mov	r1, r8
 80044b4:	1854      	adds	r4, r2, r1
 80044b6:	4649      	mov	r1, r9
 80044b8:	eb43 0501 	adc.w	r5, r3, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	00eb      	lsls	r3, r5, #3
 80044c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ca:	00e2      	lsls	r2, r4, #3
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	4643      	mov	r3, r8
 80044d2:	18e3      	adds	r3, r4, r3
 80044d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044d8:	464b      	mov	r3, r9
 80044da:	eb45 0303 	adc.w	r3, r5, r3
 80044de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044fe:	4629      	mov	r1, r5
 8004500:	008b      	lsls	r3, r1, #2
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004508:	4621      	mov	r1, r4
 800450a:	008a      	lsls	r2, r1, #2
 800450c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004510:	f7fc fb52 	bl	8000bb8 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4b60      	ldr	r3, [pc, #384]	@ (800469c <UART_SetConfig+0x4e4>)
 800451a:	fba3 2302 	umull	r2, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	011c      	lsls	r4, r3, #4
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800452c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	1891      	adds	r1, r2, r2
 800453a:	61b9      	str	r1, [r7, #24]
 800453c:	415b      	adcs	r3, r3
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004544:	4641      	mov	r1, r8
 8004546:	1851      	adds	r1, r2, r1
 8004548:	6139      	str	r1, [r7, #16]
 800454a:	4649      	mov	r1, r9
 800454c:	414b      	adcs	r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	00cb      	lsls	r3, r1, #3
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004566:	4651      	mov	r1, sl
 8004568:	00ca      	lsls	r2, r1, #3
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	4603      	mov	r3, r0
 8004570:	4642      	mov	r2, r8
 8004572:	189b      	adds	r3, r3, r2
 8004574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004578:	464b      	mov	r3, r9
 800457a:	460a      	mov	r2, r1
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800458e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800459c:	4649      	mov	r1, r9
 800459e:	008b      	lsls	r3, r1, #2
 80045a0:	4641      	mov	r1, r8
 80045a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a6:	4641      	mov	r1, r8
 80045a8:	008a      	lsls	r2, r1, #2
 80045aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045ae:	f7fc fb03 	bl	8000bb8 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	4b38      	ldr	r3, [pc, #224]	@ (800469c <UART_SetConfig+0x4e4>)
 80045ba:	fba3 2301 	umull	r2, r3, r3, r1
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2264      	movs	r2, #100	@ 0x64
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	1acb      	subs	r3, r1, r3
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	3332      	adds	r3, #50	@ 0x32
 80045cc:	4a33      	ldr	r2, [pc, #204]	@ (800469c <UART_SetConfig+0x4e4>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d8:	441c      	add	r4, r3
 80045da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045de:	2200      	movs	r2, #0
 80045e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80045e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80045e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	415b      	adcs	r3, r3
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f8:	4641      	mov	r1, r8
 80045fa:	1851      	adds	r1, r2, r1
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	4649      	mov	r1, r9
 8004600:	414b      	adcs	r3, r1
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004610:	4659      	mov	r1, fp
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4651      	mov	r1, sl
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4642      	mov	r2, r8
 8004626:	189b      	adds	r3, r3, r2
 8004628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462a:	464b      	mov	r3, r9
 800462c:	460a      	mov	r2, r1
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	663b      	str	r3, [r7, #96]	@ 0x60
 800463e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800464c:	4649      	mov	r1, r9
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	4641      	mov	r1, r8
 8004652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004656:	4641      	mov	r1, r8
 8004658:	008a      	lsls	r2, r1, #2
 800465a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800465e:	f7fc faab 	bl	8000bb8 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <UART_SetConfig+0x4e4>)
 8004668:	fba3 1302 	umull	r1, r3, r3, r2
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	2164      	movs	r1, #100	@ 0x64
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	3332      	adds	r3, #50	@ 0x32
 800467a:	4a08      	ldr	r2, [pc, #32]	@ (800469c <UART_SetConfig+0x4e4>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	f003 020f 	and.w	r2, r3, #15
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4422      	add	r2, r4
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800469c:	51eb851f 	.word	0x51eb851f

080046a0 <__cvt>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	ec57 6b10 	vmov	r6, r7, d0
 80046a8:	2f00      	cmp	r7, #0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4619      	mov	r1, r3
 80046ae:	463b      	mov	r3, r7
 80046b0:	bfbb      	ittet	lt
 80046b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80046b6:	461f      	movlt	r7, r3
 80046b8:	2300      	movge	r3, #0
 80046ba:	232d      	movlt	r3, #45	@ 0x2d
 80046bc:	700b      	strb	r3, [r1, #0]
 80046be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80046c4:	4691      	mov	r9, r2
 80046c6:	f023 0820 	bic.w	r8, r3, #32
 80046ca:	bfbc      	itt	lt
 80046cc:	4632      	movlt	r2, r6
 80046ce:	4616      	movlt	r6, r2
 80046d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046d4:	d005      	beq.n	80046e2 <__cvt+0x42>
 80046d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046da:	d100      	bne.n	80046de <__cvt+0x3e>
 80046dc:	3401      	adds	r4, #1
 80046de:	2102      	movs	r1, #2
 80046e0:	e000      	b.n	80046e4 <__cvt+0x44>
 80046e2:	2103      	movs	r1, #3
 80046e4:	ab03      	add	r3, sp, #12
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	ab02      	add	r3, sp, #8
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	ec47 6b10 	vmov	d0, r6, r7
 80046f0:	4653      	mov	r3, sl
 80046f2:	4622      	mov	r2, r4
 80046f4:	f000 fe3c 	bl	8005370 <_dtoa_r>
 80046f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046fc:	4605      	mov	r5, r0
 80046fe:	d119      	bne.n	8004734 <__cvt+0x94>
 8004700:	f019 0f01 	tst.w	r9, #1
 8004704:	d00e      	beq.n	8004724 <__cvt+0x84>
 8004706:	eb00 0904 	add.w	r9, r0, r4
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	4630      	mov	r0, r6
 8004710:	4639      	mov	r1, r7
 8004712:	f7fc f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004716:	b108      	cbz	r0, 800471c <__cvt+0x7c>
 8004718:	f8cd 900c 	str.w	r9, [sp, #12]
 800471c:	2230      	movs	r2, #48	@ 0x30
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	454b      	cmp	r3, r9
 8004722:	d31e      	bcc.n	8004762 <__cvt+0xc2>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004728:	1b5b      	subs	r3, r3, r5
 800472a:	4628      	mov	r0, r5
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	b004      	add	sp, #16
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004738:	eb00 0904 	add.w	r9, r0, r4
 800473c:	d1e5      	bne.n	800470a <__cvt+0x6a>
 800473e:	7803      	ldrb	r3, [r0, #0]
 8004740:	2b30      	cmp	r3, #48	@ 0x30
 8004742:	d10a      	bne.n	800475a <__cvt+0xba>
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	4630      	mov	r0, r6
 800474a:	4639      	mov	r1, r7
 800474c:	f7fc f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004750:	b918      	cbnz	r0, 800475a <__cvt+0xba>
 8004752:	f1c4 0401 	rsb	r4, r4, #1
 8004756:	f8ca 4000 	str.w	r4, [sl]
 800475a:	f8da 3000 	ldr.w	r3, [sl]
 800475e:	4499      	add	r9, r3
 8004760:	e7d3      	b.n	800470a <__cvt+0x6a>
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	9103      	str	r1, [sp, #12]
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	e7d9      	b.n	800471e <__cvt+0x7e>

0800476a <__exponent>:
 800476a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476c:	2900      	cmp	r1, #0
 800476e:	bfba      	itte	lt
 8004770:	4249      	neglt	r1, r1
 8004772:	232d      	movlt	r3, #45	@ 0x2d
 8004774:	232b      	movge	r3, #43	@ 0x2b
 8004776:	2909      	cmp	r1, #9
 8004778:	7002      	strb	r2, [r0, #0]
 800477a:	7043      	strb	r3, [r0, #1]
 800477c:	dd29      	ble.n	80047d2 <__exponent+0x68>
 800477e:	f10d 0307 	add.w	r3, sp, #7
 8004782:	461d      	mov	r5, r3
 8004784:	270a      	movs	r7, #10
 8004786:	461a      	mov	r2, r3
 8004788:	fbb1 f6f7 	udiv	r6, r1, r7
 800478c:	fb07 1416 	mls	r4, r7, r6, r1
 8004790:	3430      	adds	r4, #48	@ 0x30
 8004792:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004796:	460c      	mov	r4, r1
 8004798:	2c63      	cmp	r4, #99	@ 0x63
 800479a:	f103 33ff 	add.w	r3, r3, #4294967295
 800479e:	4631      	mov	r1, r6
 80047a0:	dcf1      	bgt.n	8004786 <__exponent+0x1c>
 80047a2:	3130      	adds	r1, #48	@ 0x30
 80047a4:	1e94      	subs	r4, r2, #2
 80047a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047aa:	1c41      	adds	r1, r0, #1
 80047ac:	4623      	mov	r3, r4
 80047ae:	42ab      	cmp	r3, r5
 80047b0:	d30a      	bcc.n	80047c8 <__exponent+0x5e>
 80047b2:	f10d 0309 	add.w	r3, sp, #9
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	42ac      	cmp	r4, r5
 80047ba:	bf88      	it	hi
 80047bc:	2300      	movhi	r3, #0
 80047be:	3302      	adds	r3, #2
 80047c0:	4403      	add	r3, r0
 80047c2:	1a18      	subs	r0, r3, r0
 80047c4:	b003      	add	sp, #12
 80047c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047d0:	e7ed      	b.n	80047ae <__exponent+0x44>
 80047d2:	2330      	movs	r3, #48	@ 0x30
 80047d4:	3130      	adds	r1, #48	@ 0x30
 80047d6:	7083      	strb	r3, [r0, #2]
 80047d8:	70c1      	strb	r1, [r0, #3]
 80047da:	1d03      	adds	r3, r0, #4
 80047dc:	e7f1      	b.n	80047c2 <__exponent+0x58>
	...

080047e0 <_printf_float>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	b08d      	sub	sp, #52	@ 0x34
 80047e6:	460c      	mov	r4, r1
 80047e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80047ec:	4616      	mov	r6, r2
 80047ee:	461f      	mov	r7, r3
 80047f0:	4605      	mov	r5, r0
 80047f2:	f000 fcbb 	bl	800516c <_localeconv_r>
 80047f6:	6803      	ldr	r3, [r0, #0]
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fd40 	bl	8000280 <strlen>
 8004800:	2300      	movs	r3, #0
 8004802:	930a      	str	r3, [sp, #40]	@ 0x28
 8004804:	f8d8 3000 	ldr.w	r3, [r8]
 8004808:	9005      	str	r0, [sp, #20]
 800480a:	3307      	adds	r3, #7
 800480c:	f023 0307 	bic.w	r3, r3, #7
 8004810:	f103 0208 	add.w	r2, r3, #8
 8004814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004818:	f8d4 b000 	ldr.w	fp, [r4]
 800481c:	f8c8 2000 	str.w	r2, [r8]
 8004820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004828:	9307      	str	r3, [sp, #28]
 800482a:	f8cd 8018 	str.w	r8, [sp, #24]
 800482e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004836:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa8 <_printf_float+0x2c8>)
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	f7fc f97e 	bl	8000b3c <__aeabi_dcmpun>
 8004840:	bb70      	cbnz	r0, 80048a0 <_printf_float+0xc0>
 8004842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004846:	4b98      	ldr	r3, [pc, #608]	@ (8004aa8 <_printf_float+0x2c8>)
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	f7fc f958 	bl	8000b00 <__aeabi_dcmple>
 8004850:	bb30      	cbnz	r0, 80048a0 <_printf_float+0xc0>
 8004852:	2200      	movs	r2, #0
 8004854:	2300      	movs	r3, #0
 8004856:	4640      	mov	r0, r8
 8004858:	4649      	mov	r1, r9
 800485a:	f7fc f947 	bl	8000aec <__aeabi_dcmplt>
 800485e:	b110      	cbz	r0, 8004866 <_printf_float+0x86>
 8004860:	232d      	movs	r3, #45	@ 0x2d
 8004862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004866:	4a91      	ldr	r2, [pc, #580]	@ (8004aac <_printf_float+0x2cc>)
 8004868:	4b91      	ldr	r3, [pc, #580]	@ (8004ab0 <_printf_float+0x2d0>)
 800486a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800486e:	bf94      	ite	ls
 8004870:	4690      	movls	r8, r2
 8004872:	4698      	movhi	r8, r3
 8004874:	2303      	movs	r3, #3
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	f02b 0304 	bic.w	r3, fp, #4
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	f04f 0900 	mov.w	r9, #0
 8004882:	9700      	str	r7, [sp, #0]
 8004884:	4633      	mov	r3, r6
 8004886:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f9d2 	bl	8004c34 <_printf_common>
 8004890:	3001      	adds	r0, #1
 8004892:	f040 808d 	bne.w	80049b0 <_printf_float+0x1d0>
 8004896:	f04f 30ff 	mov.w	r0, #4294967295
 800489a:	b00d      	add	sp, #52	@ 0x34
 800489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	4649      	mov	r1, r9
 80048a8:	f7fc f948 	bl	8000b3c <__aeabi_dcmpun>
 80048ac:	b140      	cbz	r0, 80048c0 <_printf_float+0xe0>
 80048ae:	464b      	mov	r3, r9
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bfbc      	itt	lt
 80048b4:	232d      	movlt	r3, #45	@ 0x2d
 80048b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048ba:	4a7e      	ldr	r2, [pc, #504]	@ (8004ab4 <_printf_float+0x2d4>)
 80048bc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ab8 <_printf_float+0x2d8>)
 80048be:	e7d4      	b.n	800486a <_printf_float+0x8a>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80048c6:	9206      	str	r2, [sp, #24]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	d13b      	bne.n	8004944 <_printf_float+0x164>
 80048cc:	2306      	movs	r3, #6
 80048ce:	6063      	str	r3, [r4, #4]
 80048d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80048d4:	2300      	movs	r3, #0
 80048d6:	6022      	str	r2, [r4, #0]
 80048d8:	9303      	str	r3, [sp, #12]
 80048da:	ab0a      	add	r3, sp, #40	@ 0x28
 80048dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80048e0:	ab09      	add	r3, sp, #36	@ 0x24
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	6861      	ldr	r1, [r4, #4]
 80048e6:	ec49 8b10 	vmov	d0, r8, r9
 80048ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7ff fed6 	bl	80046a0 <__cvt>
 80048f4:	9b06      	ldr	r3, [sp, #24]
 80048f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048f8:	2b47      	cmp	r3, #71	@ 0x47
 80048fa:	4680      	mov	r8, r0
 80048fc:	d129      	bne.n	8004952 <_printf_float+0x172>
 80048fe:	1cc8      	adds	r0, r1, #3
 8004900:	db02      	blt.n	8004908 <_printf_float+0x128>
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	4299      	cmp	r1, r3
 8004906:	dd41      	ble.n	800498c <_printf_float+0x1ac>
 8004908:	f1aa 0a02 	sub.w	sl, sl, #2
 800490c:	fa5f fa8a 	uxtb.w	sl, sl
 8004910:	3901      	subs	r1, #1
 8004912:	4652      	mov	r2, sl
 8004914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004918:	9109      	str	r1, [sp, #36]	@ 0x24
 800491a:	f7ff ff26 	bl	800476a <__exponent>
 800491e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004920:	1813      	adds	r3, r2, r0
 8004922:	2a01      	cmp	r2, #1
 8004924:	4681      	mov	r9, r0
 8004926:	6123      	str	r3, [r4, #16]
 8004928:	dc02      	bgt.n	8004930 <_printf_float+0x150>
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	07d2      	lsls	r2, r2, #31
 800492e:	d501      	bpl.n	8004934 <_printf_float+0x154>
 8004930:	3301      	adds	r3, #1
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0a2      	beq.n	8004882 <_printf_float+0xa2>
 800493c:	232d      	movs	r3, #45	@ 0x2d
 800493e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004942:	e79e      	b.n	8004882 <_printf_float+0xa2>
 8004944:	9a06      	ldr	r2, [sp, #24]
 8004946:	2a47      	cmp	r2, #71	@ 0x47
 8004948:	d1c2      	bne.n	80048d0 <_printf_float+0xf0>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1c0      	bne.n	80048d0 <_printf_float+0xf0>
 800494e:	2301      	movs	r3, #1
 8004950:	e7bd      	b.n	80048ce <_printf_float+0xee>
 8004952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004956:	d9db      	bls.n	8004910 <_printf_float+0x130>
 8004958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800495c:	d118      	bne.n	8004990 <_printf_float+0x1b0>
 800495e:	2900      	cmp	r1, #0
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	dd0b      	ble.n	800497c <_printf_float+0x19c>
 8004964:	6121      	str	r1, [r4, #16]
 8004966:	b913      	cbnz	r3, 800496e <_printf_float+0x18e>
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	07d0      	lsls	r0, r2, #31
 800496c:	d502      	bpl.n	8004974 <_printf_float+0x194>
 800496e:	3301      	adds	r3, #1
 8004970:	440b      	add	r3, r1
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004976:	f04f 0900 	mov.w	r9, #0
 800497a:	e7db      	b.n	8004934 <_printf_float+0x154>
 800497c:	b913      	cbnz	r3, 8004984 <_printf_float+0x1a4>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	07d2      	lsls	r2, r2, #31
 8004982:	d501      	bpl.n	8004988 <_printf_float+0x1a8>
 8004984:	3302      	adds	r3, #2
 8004986:	e7f4      	b.n	8004972 <_printf_float+0x192>
 8004988:	2301      	movs	r3, #1
 800498a:	e7f2      	b.n	8004972 <_printf_float+0x192>
 800498c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004992:	4299      	cmp	r1, r3
 8004994:	db05      	blt.n	80049a2 <_printf_float+0x1c2>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	6121      	str	r1, [r4, #16]
 800499a:	07d8      	lsls	r0, r3, #31
 800499c:	d5ea      	bpl.n	8004974 <_printf_float+0x194>
 800499e:	1c4b      	adds	r3, r1, #1
 80049a0:	e7e7      	b.n	8004972 <_printf_float+0x192>
 80049a2:	2900      	cmp	r1, #0
 80049a4:	bfd4      	ite	le
 80049a6:	f1c1 0202 	rsble	r2, r1, #2
 80049aa:	2201      	movgt	r2, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	e7e0      	b.n	8004972 <_printf_float+0x192>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	055a      	lsls	r2, r3, #21
 80049b4:	d407      	bmi.n	80049c6 <_printf_float+0x1e6>
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	4642      	mov	r2, r8
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	d12b      	bne.n	8004a1c <_printf_float+0x23c>
 80049c4:	e767      	b.n	8004896 <_printf_float+0xb6>
 80049c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049ca:	f240 80dd 	bls.w	8004b88 <_printf_float+0x3a8>
 80049ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049d2:	2200      	movs	r2, #0
 80049d4:	2300      	movs	r3, #0
 80049d6:	f7fc f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d033      	beq.n	8004a46 <_printf_float+0x266>
 80049de:	4a37      	ldr	r2, [pc, #220]	@ (8004abc <_printf_float+0x2dc>)
 80049e0:	2301      	movs	r3, #1
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f af54 	beq.w	8004896 <_printf_float+0xb6>
 80049ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049f2:	4543      	cmp	r3, r8
 80049f4:	db02      	blt.n	80049fc <_printf_float+0x21c>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	07d8      	lsls	r0, r3, #31
 80049fa:	d50f      	bpl.n	8004a1c <_printf_float+0x23c>
 80049fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f af45 	beq.w	8004896 <_printf_float+0xb6>
 8004a0c:	f04f 0900 	mov.w	r9, #0
 8004a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a14:	f104 0a1a 	add.w	sl, r4, #26
 8004a18:	45c8      	cmp	r8, r9
 8004a1a:	dc09      	bgt.n	8004a30 <_printf_float+0x250>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	079b      	lsls	r3, r3, #30
 8004a20:	f100 8103 	bmi.w	8004c2a <_printf_float+0x44a>
 8004a24:	68e0      	ldr	r0, [r4, #12]
 8004a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a28:	4298      	cmp	r0, r3
 8004a2a:	bfb8      	it	lt
 8004a2c:	4618      	movlt	r0, r3
 8004a2e:	e734      	b.n	800489a <_printf_float+0xba>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4652      	mov	r2, sl
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f af2b 	beq.w	8004896 <_printf_float+0xb6>
 8004a40:	f109 0901 	add.w	r9, r9, #1
 8004a44:	e7e8      	b.n	8004a18 <_printf_float+0x238>
 8004a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dc39      	bgt.n	8004ac0 <_printf_float+0x2e0>
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <_printf_float+0x2dc>)
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f af1d 	beq.w	8004896 <_printf_float+0xb6>
 8004a5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a60:	ea59 0303 	orrs.w	r3, r9, r3
 8004a64:	d102      	bne.n	8004a6c <_printf_float+0x28c>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	07d9      	lsls	r1, r3, #31
 8004a6a:	d5d7      	bpl.n	8004a1c <_printf_float+0x23c>
 8004a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f af0d 	beq.w	8004896 <_printf_float+0xb6>
 8004a7c:	f04f 0a00 	mov.w	sl, #0
 8004a80:	f104 0b1a 	add.w	fp, r4, #26
 8004a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a86:	425b      	negs	r3, r3
 8004a88:	4553      	cmp	r3, sl
 8004a8a:	dc01      	bgt.n	8004a90 <_printf_float+0x2b0>
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	e793      	b.n	80049b8 <_printf_float+0x1d8>
 8004a90:	2301      	movs	r3, #1
 8004a92:	465a      	mov	r2, fp
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f aefb 	beq.w	8004896 <_printf_float+0xb6>
 8004aa0:	f10a 0a01 	add.w	sl, sl, #1
 8004aa4:	e7ee      	b.n	8004a84 <_printf_float+0x2a4>
 8004aa6:	bf00      	nop
 8004aa8:	7fefffff 	.word	0x7fefffff
 8004aac:	080076b8 	.word	0x080076b8
 8004ab0:	080076bc 	.word	0x080076bc
 8004ab4:	080076c0 	.word	0x080076c0
 8004ab8:	080076c4 	.word	0x080076c4
 8004abc:	080076c8 	.word	0x080076c8
 8004ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ac6:	4553      	cmp	r3, sl
 8004ac8:	bfa8      	it	ge
 8004aca:	4653      	movge	r3, sl
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	4699      	mov	r9, r3
 8004ad0:	dc36      	bgt.n	8004b40 <_printf_float+0x360>
 8004ad2:	f04f 0b00 	mov.w	fp, #0
 8004ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ada:	f104 021a 	add.w	r2, r4, #26
 8004ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ae0:	9306      	str	r3, [sp, #24]
 8004ae2:	eba3 0309 	sub.w	r3, r3, r9
 8004ae6:	455b      	cmp	r3, fp
 8004ae8:	dc31      	bgt.n	8004b4e <_printf_float+0x36e>
 8004aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aec:	459a      	cmp	sl, r3
 8004aee:	dc3a      	bgt.n	8004b66 <_printf_float+0x386>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07da      	lsls	r2, r3, #31
 8004af4:	d437      	bmi.n	8004b66 <_printf_float+0x386>
 8004af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af8:	ebaa 0903 	sub.w	r9, sl, r3
 8004afc:	9b06      	ldr	r3, [sp, #24]
 8004afe:	ebaa 0303 	sub.w	r3, sl, r3
 8004b02:	4599      	cmp	r9, r3
 8004b04:	bfa8      	it	ge
 8004b06:	4699      	movge	r9, r3
 8004b08:	f1b9 0f00 	cmp.w	r9, #0
 8004b0c:	dc33      	bgt.n	8004b76 <_printf_float+0x396>
 8004b0e:	f04f 0800 	mov.w	r8, #0
 8004b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b16:	f104 0b1a 	add.w	fp, r4, #26
 8004b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8004b20:	eba3 0309 	sub.w	r3, r3, r9
 8004b24:	4543      	cmp	r3, r8
 8004b26:	f77f af79 	ble.w	8004a1c <_printf_float+0x23c>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	465a      	mov	r2, fp
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	f43f aeae 	beq.w	8004896 <_printf_float+0xb6>
 8004b3a:	f108 0801 	add.w	r8, r8, #1
 8004b3e:	e7ec      	b.n	8004b1a <_printf_float+0x33a>
 8004b40:	4642      	mov	r2, r8
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1c2      	bne.n	8004ad2 <_printf_float+0x2f2>
 8004b4c:	e6a3      	b.n	8004896 <_printf_float+0xb6>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	9206      	str	r2, [sp, #24]
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae9c 	beq.w	8004896 <_printf_float+0xb6>
 8004b5e:	9a06      	ldr	r2, [sp, #24]
 8004b60:	f10b 0b01 	add.w	fp, fp, #1
 8004b64:	e7bb      	b.n	8004ade <_printf_float+0x2fe>
 8004b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	d1c0      	bne.n	8004af6 <_printf_float+0x316>
 8004b74:	e68f      	b.n	8004896 <_printf_float+0xb6>
 8004b76:	9a06      	ldr	r2, [sp, #24]
 8004b78:	464b      	mov	r3, r9
 8004b7a:	4442      	add	r2, r8
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	d1c3      	bne.n	8004b0e <_printf_float+0x32e>
 8004b86:	e686      	b.n	8004896 <_printf_float+0xb6>
 8004b88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b8c:	f1ba 0f01 	cmp.w	sl, #1
 8004b90:	dc01      	bgt.n	8004b96 <_printf_float+0x3b6>
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d536      	bpl.n	8004c04 <_printf_float+0x424>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4642      	mov	r2, r8
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f ae78 	beq.w	8004896 <_printf_float+0xb6>
 8004ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004baa:	4631      	mov	r1, r6
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b8      	blx	r7
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	f43f ae70 	beq.w	8004896 <_printf_float+0xb6>
 8004bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bc2:	f7fb ff89 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bc6:	b9c0      	cbnz	r0, 8004bfa <_printf_float+0x41a>
 8004bc8:	4653      	mov	r3, sl
 8004bca:	f108 0201 	add.w	r2, r8, #1
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d10c      	bne.n	8004bf2 <_printf_float+0x412>
 8004bd8:	e65d      	b.n	8004896 <_printf_float+0xb6>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	465a      	mov	r2, fp
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b8      	blx	r7
 8004be4:	3001      	adds	r0, #1
 8004be6:	f43f ae56 	beq.w	8004896 <_printf_float+0xb6>
 8004bea:	f108 0801 	add.w	r8, r8, #1
 8004bee:	45d0      	cmp	r8, sl
 8004bf0:	dbf3      	blt.n	8004bda <_printf_float+0x3fa>
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bf8:	e6df      	b.n	80049ba <_printf_float+0x1da>
 8004bfa:	f04f 0800 	mov.w	r8, #0
 8004bfe:	f104 0b1a 	add.w	fp, r4, #26
 8004c02:	e7f4      	b.n	8004bee <_printf_float+0x40e>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4642      	mov	r2, r8
 8004c08:	e7e1      	b.n	8004bce <_printf_float+0x3ee>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	464a      	mov	r2, r9
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f ae3e 	beq.w	8004896 <_printf_float+0xb6>
 8004c1a:	f108 0801 	add.w	r8, r8, #1
 8004c1e:	68e3      	ldr	r3, [r4, #12]
 8004c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c22:	1a5b      	subs	r3, r3, r1
 8004c24:	4543      	cmp	r3, r8
 8004c26:	dcf0      	bgt.n	8004c0a <_printf_float+0x42a>
 8004c28:	e6fc      	b.n	8004a24 <_printf_float+0x244>
 8004c2a:	f04f 0800 	mov.w	r8, #0
 8004c2e:	f104 0919 	add.w	r9, r4, #25
 8004c32:	e7f4      	b.n	8004c1e <_printf_float+0x43e>

08004c34 <_printf_common>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	4616      	mov	r6, r2
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	688a      	ldr	r2, [r1, #8]
 8004c3e:	690b      	ldr	r3, [r1, #16]
 8004c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c44:	4293      	cmp	r3, r2
 8004c46:	bfb8      	it	lt
 8004c48:	4613      	movlt	r3, r2
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c50:	4607      	mov	r7, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	b10a      	cbz	r2, 8004c5a <_printf_common+0x26>
 8004c56:	3301      	adds	r3, #1
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	0699      	lsls	r1, r3, #26
 8004c5e:	bf42      	ittt	mi
 8004c60:	6833      	ldrmi	r3, [r6, #0]
 8004c62:	3302      	addmi	r3, #2
 8004c64:	6033      	strmi	r3, [r6, #0]
 8004c66:	6825      	ldr	r5, [r4, #0]
 8004c68:	f015 0506 	ands.w	r5, r5, #6
 8004c6c:	d106      	bne.n	8004c7c <_printf_common+0x48>
 8004c6e:	f104 0a19 	add.w	sl, r4, #25
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	6832      	ldr	r2, [r6, #0]
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	dc26      	bgt.n	8004cca <_printf_common+0x96>
 8004c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	3b00      	subs	r3, #0
 8004c84:	bf18      	it	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	0692      	lsls	r2, r2, #26
 8004c8a:	d42b      	bmi.n	8004ce4 <_printf_common+0xb0>
 8004c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c90:	4641      	mov	r1, r8
 8004c92:	4638      	mov	r0, r7
 8004c94:	47c8      	blx	r9
 8004c96:	3001      	adds	r0, #1
 8004c98:	d01e      	beq.n	8004cd8 <_printf_common+0xa4>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	f003 0306 	and.w	r3, r3, #6
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf02      	ittt	eq
 8004ca6:	68e5      	ldreq	r5, [r4, #12]
 8004ca8:	6833      	ldreq	r3, [r6, #0]
 8004caa:	1aed      	subeq	r5, r5, r3
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	bf0c      	ite	eq
 8004cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb4:	2500      	movne	r5, #0
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfc4      	itt	gt
 8004cba:	1a9b      	subgt	r3, r3, r2
 8004cbc:	18ed      	addgt	r5, r5, r3
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	341a      	adds	r4, #26
 8004cc2:	42b5      	cmp	r5, r6
 8004cc4:	d11a      	bne.n	8004cfc <_printf_common+0xc8>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e008      	b.n	8004cdc <_printf_common+0xa8>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4641      	mov	r1, r8
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	47c8      	blx	r9
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d103      	bne.n	8004ce0 <_printf_common+0xac>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7c6      	b.n	8004c72 <_printf_common+0x3e>
 8004ce4:	18e1      	adds	r1, r4, r3
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	2030      	movs	r0, #48	@ 0x30
 8004cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cee:	4422      	add	r2, r4
 8004cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	e7c7      	b.n	8004c8c <_printf_common+0x58>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4641      	mov	r1, r8
 8004d02:	4638      	mov	r0, r7
 8004d04:	47c8      	blx	r9
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0e6      	beq.n	8004cd8 <_printf_common+0xa4>
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7d9      	b.n	8004cc2 <_printf_common+0x8e>
	...

08004d10 <_printf_i>:
 8004d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	7e0f      	ldrb	r7, [r1, #24]
 8004d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d18:	2f78      	cmp	r7, #120	@ 0x78
 8004d1a:	4691      	mov	r9, r2
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	469a      	mov	sl, r3
 8004d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d26:	d807      	bhi.n	8004d38 <_printf_i+0x28>
 8004d28:	2f62      	cmp	r7, #98	@ 0x62
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x32>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	f000 80d2 	beq.w	8004ed6 <_printf_i+0x1c6>
 8004d32:	2f58      	cmp	r7, #88	@ 0x58
 8004d34:	f000 80b9 	beq.w	8004eaa <_printf_i+0x19a>
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d40:	e03a      	b.n	8004db8 <_printf_i+0xa8>
 8004d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d46:	2b15      	cmp	r3, #21
 8004d48:	d8f6      	bhi.n	8004d38 <_printf_i+0x28>
 8004d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d50 <_printf_i+0x40>)
 8004d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004d39 	.word	0x08004d39
 8004d5c:	08004d39 	.word	0x08004d39
 8004d60:	08004d39 	.word	0x08004d39
 8004d64:	08004d39 	.word	0x08004d39
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d39 	.word	0x08004d39
 8004d70:	08004d39 	.word	0x08004d39
 8004d74:	08004d39 	.word	0x08004d39
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	08004ebd 	.word	0x08004ebd
 8004d80:	08004de7 	.word	0x08004de7
 8004d84:	08004e77 	.word	0x08004e77
 8004d88:	08004d39 	.word	0x08004d39
 8004d8c:	08004d39 	.word	0x08004d39
 8004d90:	08004edf 	.word	0x08004edf
 8004d94:	08004d39 	.word	0x08004d39
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004d39 	.word	0x08004d39
 8004da0:	08004d39 	.word	0x08004d39
 8004da4:	08004e7f 	.word	0x08004e7f
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e09d      	b.n	8004ef8 <_printf_i+0x1e8>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6031      	str	r1, [r6, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xbc>
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	e003      	b.n	8004dd4 <_printf_i+0xc4>
 8004dcc:	0645      	lsls	r5, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xb8>
 8004dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	da03      	bge.n	8004de0 <_printf_i+0xd0>
 8004dd8:	232d      	movs	r3, #45	@ 0x2d
 8004dda:	426d      	negs	r5, r5
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de0:	4859      	ldr	r0, [pc, #356]	@ (8004f48 <_printf_i+0x238>)
 8004de2:	230a      	movs	r3, #10
 8004de4:	e011      	b.n	8004e0a <_printf_i+0xfa>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	6833      	ldr	r3, [r6, #0]
 8004dea:	0608      	lsls	r0, r1, #24
 8004dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004df0:	d402      	bmi.n	8004df8 <_printf_i+0xe8>
 8004df2:	0649      	lsls	r1, r1, #25
 8004df4:	bf48      	it	mi
 8004df6:	b2ad      	uxthmi	r5, r5
 8004df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dfa:	4853      	ldr	r0, [pc, #332]	@ (8004f48 <_printf_i+0x238>)
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	bf14      	ite	ne
 8004e00:	230a      	movne	r3, #10
 8004e02:	2308      	moveq	r3, #8
 8004e04:	2100      	movs	r1, #0
 8004e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e0a:	6866      	ldr	r6, [r4, #4]
 8004e0c:	60a6      	str	r6, [r4, #8]
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	bfa2      	ittt	ge
 8004e12:	6821      	ldrge	r1, [r4, #0]
 8004e14:	f021 0104 	bicge.w	r1, r1, #4
 8004e18:	6021      	strge	r1, [r4, #0]
 8004e1a:	b90d      	cbnz	r5, 8004e20 <_printf_i+0x110>
 8004e1c:	2e00      	cmp	r6, #0
 8004e1e:	d04b      	beq.n	8004eb8 <_printf_i+0x1a8>
 8004e20:	4616      	mov	r6, r2
 8004e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e26:	fb03 5711 	mls	r7, r3, r1, r5
 8004e2a:	5dc7      	ldrb	r7, [r0, r7]
 8004e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e30:	462f      	mov	r7, r5
 8004e32:	42bb      	cmp	r3, r7
 8004e34:	460d      	mov	r5, r1
 8004e36:	d9f4      	bls.n	8004e22 <_printf_i+0x112>
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d10b      	bne.n	8004e54 <_printf_i+0x144>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	07df      	lsls	r7, r3, #31
 8004e40:	d508      	bpl.n	8004e54 <_printf_i+0x144>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	6861      	ldr	r1, [r4, #4]
 8004e46:	4299      	cmp	r1, r3
 8004e48:	bfde      	ittt	le
 8004e4a:	2330      	movle	r3, #48	@ 0x30
 8004e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e54:	1b92      	subs	r2, r2, r6
 8004e56:	6122      	str	r2, [r4, #16]
 8004e58:	f8cd a000 	str.w	sl, [sp]
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	aa03      	add	r2, sp, #12
 8004e60:	4621      	mov	r1, r4
 8004e62:	4640      	mov	r0, r8
 8004e64:	f7ff fee6 	bl	8004c34 <_printf_common>
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d14a      	bne.n	8004f02 <_printf_i+0x1f2>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	b004      	add	sp, #16
 8004e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	f043 0320 	orr.w	r3, r3, #32
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	4833      	ldr	r0, [pc, #204]	@ (8004f4c <_printf_i+0x23c>)
 8004e80:	2778      	movs	r7, #120	@ 0x78
 8004e82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	6831      	ldr	r1, [r6, #0]
 8004e8a:	061f      	lsls	r7, r3, #24
 8004e8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e90:	d402      	bmi.n	8004e98 <_printf_i+0x188>
 8004e92:	065f      	lsls	r7, r3, #25
 8004e94:	bf48      	it	mi
 8004e96:	b2ad      	uxthmi	r5, r5
 8004e98:	6031      	str	r1, [r6, #0]
 8004e9a:	07d9      	lsls	r1, r3, #31
 8004e9c:	bf44      	itt	mi
 8004e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004ea2:	6023      	strmi	r3, [r4, #0]
 8004ea4:	b11d      	cbz	r5, 8004eae <_printf_i+0x19e>
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	e7ac      	b.n	8004e04 <_printf_i+0xf4>
 8004eaa:	4827      	ldr	r0, [pc, #156]	@ (8004f48 <_printf_i+0x238>)
 8004eac:	e7e9      	b.n	8004e82 <_printf_i+0x172>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f023 0320 	bic.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	e7f6      	b.n	8004ea6 <_printf_i+0x196>
 8004eb8:	4616      	mov	r6, r2
 8004eba:	e7bd      	b.n	8004e38 <_printf_i+0x128>
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	6825      	ldr	r5, [r4, #0]
 8004ec0:	6961      	ldr	r1, [r4, #20]
 8004ec2:	1d18      	adds	r0, r3, #4
 8004ec4:	6030      	str	r0, [r6, #0]
 8004ec6:	062e      	lsls	r6, r5, #24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	d501      	bpl.n	8004ed0 <_printf_i+0x1c0>
 8004ecc:	6019      	str	r1, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <_printf_i+0x1c6>
 8004ed0:	0668      	lsls	r0, r5, #25
 8004ed2:	d5fb      	bpl.n	8004ecc <_printf_i+0x1bc>
 8004ed4:	8019      	strh	r1, [r3, #0]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	4616      	mov	r6, r2
 8004edc:	e7bc      	b.n	8004e58 <_printf_i+0x148>
 8004ede:	6833      	ldr	r3, [r6, #0]
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	6032      	str	r2, [r6, #0]
 8004ee4:	681e      	ldr	r6, [r3, #0]
 8004ee6:	6862      	ldr	r2, [r4, #4]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4630      	mov	r0, r6
 8004eec:	f7fb f978 	bl	80001e0 <memchr>
 8004ef0:	b108      	cbz	r0, 8004ef6 <_printf_i+0x1e6>
 8004ef2:	1b80      	subs	r0, r0, r6
 8004ef4:	6060      	str	r0, [r4, #4]
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	6123      	str	r3, [r4, #16]
 8004efa:	2300      	movs	r3, #0
 8004efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f00:	e7aa      	b.n	8004e58 <_printf_i+0x148>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	4632      	mov	r2, r6
 8004f06:	4649      	mov	r1, r9
 8004f08:	4640      	mov	r0, r8
 8004f0a:	47d0      	blx	sl
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d0ad      	beq.n	8004e6c <_printf_i+0x15c>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	079b      	lsls	r3, r3, #30
 8004f14:	d413      	bmi.n	8004f3e <_printf_i+0x22e>
 8004f16:	68e0      	ldr	r0, [r4, #12]
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	bfb8      	it	lt
 8004f1e:	4618      	movlt	r0, r3
 8004f20:	e7a6      	b.n	8004e70 <_printf_i+0x160>
 8004f22:	2301      	movs	r3, #1
 8004f24:	4632      	mov	r2, r6
 8004f26:	4649      	mov	r1, r9
 8004f28:	4640      	mov	r0, r8
 8004f2a:	47d0      	blx	sl
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d09d      	beq.n	8004e6c <_printf_i+0x15c>
 8004f30:	3501      	adds	r5, #1
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	9903      	ldr	r1, [sp, #12]
 8004f36:	1a5b      	subs	r3, r3, r1
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dcf2      	bgt.n	8004f22 <_printf_i+0x212>
 8004f3c:	e7eb      	b.n	8004f16 <_printf_i+0x206>
 8004f3e:	2500      	movs	r5, #0
 8004f40:	f104 0619 	add.w	r6, r4, #25
 8004f44:	e7f5      	b.n	8004f32 <_printf_i+0x222>
 8004f46:	bf00      	nop
 8004f48:	080076ca 	.word	0x080076ca
 8004f4c:	080076db 	.word	0x080076db

08004f50 <std>:
 8004f50:	2300      	movs	r3, #0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4604      	mov	r4, r0
 8004f56:	e9c0 3300 	strd	r3, r3, [r0]
 8004f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f5e:	6083      	str	r3, [r0, #8]
 8004f60:	8181      	strh	r1, [r0, #12]
 8004f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f64:	81c2      	strh	r2, [r0, #14]
 8004f66:	6183      	str	r3, [r0, #24]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	305c      	adds	r0, #92	@ 0x5c
 8004f6e:	f000 f8f4 	bl	800515a <memset>
 8004f72:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <std+0x58>)
 8004f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <std+0x5c>)
 8004f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <std+0x60>)
 8004f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x64>)
 8004f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f82:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <std+0x68>)
 8004f84:	6224      	str	r4, [r4, #32]
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d006      	beq.n	8004f98 <std+0x48>
 8004f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f8e:	4294      	cmp	r4, r2
 8004f90:	d002      	beq.n	8004f98 <std+0x48>
 8004f92:	33d0      	adds	r3, #208	@ 0xd0
 8004f94:	429c      	cmp	r4, r3
 8004f96:	d105      	bne.n	8004fa4 <std+0x54>
 8004f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa0:	f000 b958 	b.w	8005254 <__retarget_lock_init_recursive>
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	080050d5 	.word	0x080050d5
 8004fac:	080050f7 	.word	0x080050f7
 8004fb0:	0800512f 	.word	0x0800512f
 8004fb4:	08005153 	.word	0x08005153
 8004fb8:	200004e4 	.word	0x200004e4

08004fbc <stdio_exit_handler>:
 8004fbc:	4a02      	ldr	r2, [pc, #8]	@ (8004fc8 <stdio_exit_handler+0xc>)
 8004fbe:	4903      	ldr	r1, [pc, #12]	@ (8004fcc <stdio_exit_handler+0x10>)
 8004fc0:	4803      	ldr	r0, [pc, #12]	@ (8004fd0 <stdio_exit_handler+0x14>)
 8004fc2:	f000 b869 	b.w	8005098 <_fwalk_sglue>
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c
 8004fcc:	08006905 	.word	0x08006905
 8004fd0:	2000001c 	.word	0x2000001c

08004fd4 <cleanup_stdio>:
 8004fd4:	6841      	ldr	r1, [r0, #4]
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <cleanup_stdio+0x34>)
 8004fd8:	4299      	cmp	r1, r3
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	d001      	beq.n	8004fe4 <cleanup_stdio+0x10>
 8004fe0:	f001 fc90 	bl	8006904 <_fflush_r>
 8004fe4:	68a1      	ldr	r1, [r4, #8]
 8004fe6:	4b09      	ldr	r3, [pc, #36]	@ (800500c <cleanup_stdio+0x38>)
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	d002      	beq.n	8004ff2 <cleanup_stdio+0x1e>
 8004fec:	4620      	mov	r0, r4
 8004fee:	f001 fc89 	bl	8006904 <_fflush_r>
 8004ff2:	68e1      	ldr	r1, [r4, #12]
 8004ff4:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <cleanup_stdio+0x3c>)
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	d004      	beq.n	8005004 <cleanup_stdio+0x30>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f001 bc80 	b.w	8006904 <_fflush_r>
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
 8005008:	200004e4 	.word	0x200004e4
 800500c:	2000054c 	.word	0x2000054c
 8005010:	200005b4 	.word	0x200005b4

08005014 <global_stdio_init.part.0>:
 8005014:	b510      	push	{r4, lr}
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <global_stdio_init.part.0+0x30>)
 8005018:	4c0b      	ldr	r4, [pc, #44]	@ (8005048 <global_stdio_init.part.0+0x34>)
 800501a:	4a0c      	ldr	r2, [pc, #48]	@ (800504c <global_stdio_init.part.0+0x38>)
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	4620      	mov	r0, r4
 8005020:	2200      	movs	r2, #0
 8005022:	2104      	movs	r1, #4
 8005024:	f7ff ff94 	bl	8004f50 <std>
 8005028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800502c:	2201      	movs	r2, #1
 800502e:	2109      	movs	r1, #9
 8005030:	f7ff ff8e 	bl	8004f50 <std>
 8005034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005038:	2202      	movs	r2, #2
 800503a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503e:	2112      	movs	r1, #18
 8005040:	f7ff bf86 	b.w	8004f50 <std>
 8005044:	2000061c 	.word	0x2000061c
 8005048:	200004e4 	.word	0x200004e4
 800504c:	08004fbd 	.word	0x08004fbd

08005050 <__sfp_lock_acquire>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__sfp_lock_acquire+0x8>)
 8005052:	f000 b900 	b.w	8005256 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20000625 	.word	0x20000625

0800505c <__sfp_lock_release>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__sfp_lock_release+0x8>)
 800505e:	f000 b8fb 	b.w	8005258 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20000625 	.word	0x20000625

08005068 <__sinit>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	f7ff fff0 	bl	8005050 <__sfp_lock_acquire>
 8005070:	6a23      	ldr	r3, [r4, #32]
 8005072:	b11b      	cbz	r3, 800507c <__sinit+0x14>
 8005074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005078:	f7ff bff0 	b.w	800505c <__sfp_lock_release>
 800507c:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <__sinit+0x28>)
 800507e:	6223      	str	r3, [r4, #32]
 8005080:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <__sinit+0x2c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f5      	bne.n	8005074 <__sinit+0xc>
 8005088:	f7ff ffc4 	bl	8005014 <global_stdio_init.part.0>
 800508c:	e7f2      	b.n	8005074 <__sinit+0xc>
 800508e:	bf00      	nop
 8005090:	08004fd5 	.word	0x08004fd5
 8005094:	2000061c 	.word	0x2000061c

08005098 <_fwalk_sglue>:
 8005098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509c:	4607      	mov	r7, r0
 800509e:	4688      	mov	r8, r1
 80050a0:	4614      	mov	r4, r2
 80050a2:	2600      	movs	r6, #0
 80050a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a8:	f1b9 0901 	subs.w	r9, r9, #1
 80050ac:	d505      	bpl.n	80050ba <_fwalk_sglue+0x22>
 80050ae:	6824      	ldr	r4, [r4, #0]
 80050b0:	2c00      	cmp	r4, #0
 80050b2:	d1f7      	bne.n	80050a4 <_fwalk_sglue+0xc>
 80050b4:	4630      	mov	r0, r6
 80050b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ba:	89ab      	ldrh	r3, [r5, #12]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d907      	bls.n	80050d0 <_fwalk_sglue+0x38>
 80050c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050c4:	3301      	adds	r3, #1
 80050c6:	d003      	beq.n	80050d0 <_fwalk_sglue+0x38>
 80050c8:	4629      	mov	r1, r5
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	4306      	orrs	r6, r0
 80050d0:	3568      	adds	r5, #104	@ 0x68
 80050d2:	e7e9      	b.n	80050a8 <_fwalk_sglue+0x10>

080050d4 <__sread>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	460c      	mov	r4, r1
 80050d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050dc:	f000 f86c 	bl	80051b8 <_read_r>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	bfab      	itete	ge
 80050e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050e6:	89a3      	ldrhlt	r3, [r4, #12]
 80050e8:	181b      	addge	r3, r3, r0
 80050ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050ee:	bfac      	ite	ge
 80050f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050f2:	81a3      	strhlt	r3, [r4, #12]
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <__swrite>:
 80050f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fa:	461f      	mov	r7, r3
 80050fc:	898b      	ldrh	r3, [r1, #12]
 80050fe:	05db      	lsls	r3, r3, #23
 8005100:	4605      	mov	r5, r0
 8005102:	460c      	mov	r4, r1
 8005104:	4616      	mov	r6, r2
 8005106:	d505      	bpl.n	8005114 <__swrite+0x1e>
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	2302      	movs	r3, #2
 800510e:	2200      	movs	r2, #0
 8005110:	f000 f840 	bl	8005194 <_lseek_r>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800511a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	4632      	mov	r2, r6
 8005122:	463b      	mov	r3, r7
 8005124:	4628      	mov	r0, r5
 8005126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	f000 b857 	b.w	80051dc <_write_r>

0800512e <__sseek>:
 800512e:	b510      	push	{r4, lr}
 8005130:	460c      	mov	r4, r1
 8005132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005136:	f000 f82d 	bl	8005194 <_lseek_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	bf15      	itete	ne
 8005140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800514a:	81a3      	strheq	r3, [r4, #12]
 800514c:	bf18      	it	ne
 800514e:	81a3      	strhne	r3, [r4, #12]
 8005150:	bd10      	pop	{r4, pc}

08005152 <__sclose>:
 8005152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005156:	f000 b80d 	b.w	8005174 <_close_r>

0800515a <memset>:
 800515a:	4402      	add	r2, r0
 800515c:	4603      	mov	r3, r0
 800515e:	4293      	cmp	r3, r2
 8005160:	d100      	bne.n	8005164 <memset+0xa>
 8005162:	4770      	bx	lr
 8005164:	f803 1b01 	strb.w	r1, [r3], #1
 8005168:	e7f9      	b.n	800515e <memset+0x4>
	...

0800516c <_localeconv_r>:
 800516c:	4800      	ldr	r0, [pc, #0]	@ (8005170 <_localeconv_r+0x4>)
 800516e:	4770      	bx	lr
 8005170:	20000158 	.word	0x20000158

08005174 <_close_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d06      	ldr	r5, [pc, #24]	@ (8005190 <_close_r+0x1c>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc fd93 	bl	8001caa <_close>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_close_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_close_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000620 	.word	0x20000620

08005194 <_lseek_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	@ (80051b4 <_lseek_r+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	602a      	str	r2, [r5, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f7fc fda8 	bl	8001cf8 <_lseek>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_lseek_r+0x1e>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_lseek_r+0x1e>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20000620 	.word	0x20000620

080051b8 <_read_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d07      	ldr	r5, [pc, #28]	@ (80051d8 <_read_r+0x20>)
 80051bc:	4604      	mov	r4, r0
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	602a      	str	r2, [r5, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fc fd36 	bl	8001c38 <_read>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_read_r+0x1e>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_read_r+0x1e>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	20000620 	.word	0x20000620

080051dc <_write_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4d07      	ldr	r5, [pc, #28]	@ (80051fc <_write_r+0x20>)
 80051e0:	4604      	mov	r4, r0
 80051e2:	4608      	mov	r0, r1
 80051e4:	4611      	mov	r1, r2
 80051e6:	2200      	movs	r2, #0
 80051e8:	602a      	str	r2, [r5, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f7fc fd41 	bl	8001c72 <_write>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_write_r+0x1e>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_write_r+0x1e>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000620 	.word	0x20000620

08005200 <__errno>:
 8005200:	4b01      	ldr	r3, [pc, #4]	@ (8005208 <__errno+0x8>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000018 	.word	0x20000018

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	4d0d      	ldr	r5, [pc, #52]	@ (8005244 <__libc_init_array+0x38>)
 8005210:	4c0d      	ldr	r4, [pc, #52]	@ (8005248 <__libc_init_array+0x3c>)
 8005212:	1b64      	subs	r4, r4, r5
 8005214:	10a4      	asrs	r4, r4, #2
 8005216:	2600      	movs	r6, #0
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	4d0b      	ldr	r5, [pc, #44]	@ (800524c <__libc_init_array+0x40>)
 800521e:	4c0c      	ldr	r4, [pc, #48]	@ (8005250 <__libc_init_array+0x44>)
 8005220:	f002 fa30 	bl	8007684 <_init>
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	2600      	movs	r6, #0
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f855 3b04 	ldr.w	r3, [r5], #4
 8005234:	4798      	blx	r3
 8005236:	3601      	adds	r6, #1
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	f855 3b04 	ldr.w	r3, [r5], #4
 800523e:	4798      	blx	r3
 8005240:	3601      	adds	r6, #1
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	08007aa0 	.word	0x08007aa0
 8005248:	08007aa0 	.word	0x08007aa0
 800524c:	08007aa0 	.word	0x08007aa0
 8005250:	08007aa4 	.word	0x08007aa4

08005254 <__retarget_lock_init_recursive>:
 8005254:	4770      	bx	lr

08005256 <__retarget_lock_acquire_recursive>:
 8005256:	4770      	bx	lr

08005258 <__retarget_lock_release_recursive>:
 8005258:	4770      	bx	lr

0800525a <quorem>:
 800525a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525e:	6903      	ldr	r3, [r0, #16]
 8005260:	690c      	ldr	r4, [r1, #16]
 8005262:	42a3      	cmp	r3, r4
 8005264:	4607      	mov	r7, r0
 8005266:	db7e      	blt.n	8005366 <quorem+0x10c>
 8005268:	3c01      	subs	r4, #1
 800526a:	f101 0814 	add.w	r8, r1, #20
 800526e:	00a3      	lsls	r3, r4, #2
 8005270:	f100 0514 	add.w	r5, r0, #20
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005284:	3301      	adds	r3, #1
 8005286:	429a      	cmp	r2, r3
 8005288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800528c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005290:	d32e      	bcc.n	80052f0 <quorem+0x96>
 8005292:	f04f 0a00 	mov.w	sl, #0
 8005296:	46c4      	mov	ip, r8
 8005298:	46ae      	mov	lr, r5
 800529a:	46d3      	mov	fp, sl
 800529c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052a0:	b298      	uxth	r0, r3
 80052a2:	fb06 a000 	mla	r0, r6, r0, sl
 80052a6:	0c02      	lsrs	r2, r0, #16
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	fb06 2303 	mla	r3, r6, r3, r2
 80052ae:	f8de 2000 	ldr.w	r2, [lr]
 80052b2:	b280      	uxth	r0, r0
 80052b4:	b292      	uxth	r2, r2
 80052b6:	1a12      	subs	r2, r2, r0
 80052b8:	445a      	add	r2, fp
 80052ba:	f8de 0000 	ldr.w	r0, [lr]
 80052be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052cc:	b292      	uxth	r2, r2
 80052ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052d2:	45e1      	cmp	r9, ip
 80052d4:	f84e 2b04 	str.w	r2, [lr], #4
 80052d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80052dc:	d2de      	bcs.n	800529c <quorem+0x42>
 80052de:	9b00      	ldr	r3, [sp, #0]
 80052e0:	58eb      	ldr	r3, [r5, r3]
 80052e2:	b92b      	cbnz	r3, 80052f0 <quorem+0x96>
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	3b04      	subs	r3, #4
 80052e8:	429d      	cmp	r5, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	d32f      	bcc.n	800534e <quorem+0xf4>
 80052ee:	613c      	str	r4, [r7, #16]
 80052f0:	4638      	mov	r0, r7
 80052f2:	f001 f97b 	bl	80065ec <__mcmp>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	db25      	blt.n	8005346 <quorem+0xec>
 80052fa:	4629      	mov	r1, r5
 80052fc:	2000      	movs	r0, #0
 80052fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005302:	f8d1 c000 	ldr.w	ip, [r1]
 8005306:	fa1f fe82 	uxth.w	lr, r2
 800530a:	fa1f f38c 	uxth.w	r3, ip
 800530e:	eba3 030e 	sub.w	r3, r3, lr
 8005312:	4403      	add	r3, r0
 8005314:	0c12      	lsrs	r2, r2, #16
 8005316:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800531a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005324:	45c1      	cmp	r9, r8
 8005326:	f841 3b04 	str.w	r3, [r1], #4
 800532a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800532e:	d2e6      	bcs.n	80052fe <quorem+0xa4>
 8005330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005338:	b922      	cbnz	r2, 8005344 <quorem+0xea>
 800533a:	3b04      	subs	r3, #4
 800533c:	429d      	cmp	r5, r3
 800533e:	461a      	mov	r2, r3
 8005340:	d30b      	bcc.n	800535a <quorem+0x100>
 8005342:	613c      	str	r4, [r7, #16]
 8005344:	3601      	adds	r6, #1
 8005346:	4630      	mov	r0, r6
 8005348:	b003      	add	sp, #12
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	3b04      	subs	r3, #4
 8005352:	2a00      	cmp	r2, #0
 8005354:	d1cb      	bne.n	80052ee <quorem+0x94>
 8005356:	3c01      	subs	r4, #1
 8005358:	e7c6      	b.n	80052e8 <quorem+0x8e>
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	3b04      	subs	r3, #4
 800535e:	2a00      	cmp	r2, #0
 8005360:	d1ef      	bne.n	8005342 <quorem+0xe8>
 8005362:	3c01      	subs	r4, #1
 8005364:	e7ea      	b.n	800533c <quorem+0xe2>
 8005366:	2000      	movs	r0, #0
 8005368:	e7ee      	b.n	8005348 <quorem+0xee>
 800536a:	0000      	movs	r0, r0
 800536c:	0000      	movs	r0, r0
	...

08005370 <_dtoa_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	69c7      	ldr	r7, [r0, #28]
 8005376:	b099      	sub	sp, #100	@ 0x64
 8005378:	ed8d 0b02 	vstr	d0, [sp, #8]
 800537c:	ec55 4b10 	vmov	r4, r5, d0
 8005380:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005382:	9109      	str	r1, [sp, #36]	@ 0x24
 8005384:	4683      	mov	fp, r0
 8005386:	920e      	str	r2, [sp, #56]	@ 0x38
 8005388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800538a:	b97f      	cbnz	r7, 80053ac <_dtoa_r+0x3c>
 800538c:	2010      	movs	r0, #16
 800538e:	f000 fdfd 	bl	8005f8c <malloc>
 8005392:	4602      	mov	r2, r0
 8005394:	f8cb 001c 	str.w	r0, [fp, #28]
 8005398:	b920      	cbnz	r0, 80053a4 <_dtoa_r+0x34>
 800539a:	4ba7      	ldr	r3, [pc, #668]	@ (8005638 <_dtoa_r+0x2c8>)
 800539c:	21ef      	movs	r1, #239	@ 0xef
 800539e:	48a7      	ldr	r0, [pc, #668]	@ (800563c <_dtoa_r+0x2cc>)
 80053a0:	f001 faf6 	bl	8006990 <__assert_func>
 80053a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053a8:	6007      	str	r7, [r0, #0]
 80053aa:	60c7      	str	r7, [r0, #12]
 80053ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	b159      	cbz	r1, 80053cc <_dtoa_r+0x5c>
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	604a      	str	r2, [r1, #4]
 80053b8:	2301      	movs	r3, #1
 80053ba:	4093      	lsls	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
 80053be:	4658      	mov	r0, fp
 80053c0:	f000 feda 	bl	8006178 <_Bfree>
 80053c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	1e2b      	subs	r3, r5, #0
 80053ce:	bfb9      	ittee	lt
 80053d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80053d4:	9303      	strlt	r3, [sp, #12]
 80053d6:	2300      	movge	r3, #0
 80053d8:	6033      	strge	r3, [r6, #0]
 80053da:	9f03      	ldr	r7, [sp, #12]
 80053dc:	4b98      	ldr	r3, [pc, #608]	@ (8005640 <_dtoa_r+0x2d0>)
 80053de:	bfbc      	itt	lt
 80053e0:	2201      	movlt	r2, #1
 80053e2:	6032      	strlt	r2, [r6, #0]
 80053e4:	43bb      	bics	r3, r7
 80053e6:	d112      	bne.n	800540e <_dtoa_r+0x9e>
 80053e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80053ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053f4:	4323      	orrs	r3, r4
 80053f6:	f000 854d 	beq.w	8005e94 <_dtoa_r+0xb24>
 80053fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80053fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005654 <_dtoa_r+0x2e4>
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 854f 	beq.w	8005ea4 <_dtoa_r+0xb34>
 8005406:	f10a 0303 	add.w	r3, sl, #3
 800540a:	f000 bd49 	b.w	8005ea0 <_dtoa_r+0xb30>
 800540e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	ec51 0b17 	vmov	r0, r1, d7
 8005418:	2300      	movs	r3, #0
 800541a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800541e:	f7fb fb5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005422:	4680      	mov	r8, r0
 8005424:	b158      	cbz	r0, 800543e <_dtoa_r+0xce>
 8005426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005428:	2301      	movs	r3, #1
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800542e:	b113      	cbz	r3, 8005436 <_dtoa_r+0xc6>
 8005430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005432:	4b84      	ldr	r3, [pc, #528]	@ (8005644 <_dtoa_r+0x2d4>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005658 <_dtoa_r+0x2e8>
 800543a:	f000 bd33 	b.w	8005ea4 <_dtoa_r+0xb34>
 800543e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005442:	aa16      	add	r2, sp, #88	@ 0x58
 8005444:	a917      	add	r1, sp, #92	@ 0x5c
 8005446:	4658      	mov	r0, fp
 8005448:	f001 f980 	bl	800674c <__d2b>
 800544c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005450:	4681      	mov	r9, r0
 8005452:	2e00      	cmp	r6, #0
 8005454:	d077      	beq.n	8005546 <_dtoa_r+0x1d6>
 8005456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005458:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800545c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800546c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005470:	4619      	mov	r1, r3
 8005472:	2200      	movs	r2, #0
 8005474:	4b74      	ldr	r3, [pc, #464]	@ (8005648 <_dtoa_r+0x2d8>)
 8005476:	f7fa ff0f 	bl	8000298 <__aeabi_dsub>
 800547a:	a369      	add	r3, pc, #420	@ (adr r3, 8005620 <_dtoa_r+0x2b0>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fb f8c2 	bl	8000608 <__aeabi_dmul>
 8005484:	a368      	add	r3, pc, #416	@ (adr r3, 8005628 <_dtoa_r+0x2b8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa ff07 	bl	800029c <__adddf3>
 800548e:	4604      	mov	r4, r0
 8005490:	4630      	mov	r0, r6
 8005492:	460d      	mov	r5, r1
 8005494:	f7fb f84e 	bl	8000534 <__aeabi_i2d>
 8005498:	a365      	add	r3, pc, #404	@ (adr r3, 8005630 <_dtoa_r+0x2c0>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f8b3 	bl	8000608 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fa fef7 	bl	800029c <__adddf3>
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	f7fb fb59 	bl	8000b68 <__aeabi_d2iz>
 80054b6:	2200      	movs	r2, #0
 80054b8:	4607      	mov	r7, r0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fb fb14 	bl	8000aec <__aeabi_dcmplt>
 80054c4:	b140      	cbz	r0, 80054d8 <_dtoa_r+0x168>
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7fb f834 	bl	8000534 <__aeabi_i2d>
 80054cc:	4622      	mov	r2, r4
 80054ce:	462b      	mov	r3, r5
 80054d0:	f7fb fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80054d4:	b900      	cbnz	r0, 80054d8 <_dtoa_r+0x168>
 80054d6:	3f01      	subs	r7, #1
 80054d8:	2f16      	cmp	r7, #22
 80054da:	d851      	bhi.n	8005580 <_dtoa_r+0x210>
 80054dc:	4b5b      	ldr	r3, [pc, #364]	@ (800564c <_dtoa_r+0x2dc>)
 80054de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ea:	f7fb faff 	bl	8000aec <__aeabi_dcmplt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d048      	beq.n	8005584 <_dtoa_r+0x214>
 80054f2:	3f01      	subs	r7, #1
 80054f4:	2300      	movs	r3, #0
 80054f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80054f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054fa:	1b9b      	subs	r3, r3, r6
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	bf44      	itt	mi
 8005500:	f1c3 0801 	rsbmi	r8, r3, #1
 8005504:	2300      	movmi	r3, #0
 8005506:	9208      	str	r2, [sp, #32]
 8005508:	bf54      	ite	pl
 800550a:	f04f 0800 	movpl.w	r8, #0
 800550e:	9308      	strmi	r3, [sp, #32]
 8005510:	2f00      	cmp	r7, #0
 8005512:	db39      	blt.n	8005588 <_dtoa_r+0x218>
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005518:	443b      	add	r3, r7
 800551a:	9308      	str	r3, [sp, #32]
 800551c:	2300      	movs	r3, #0
 800551e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005522:	2b09      	cmp	r3, #9
 8005524:	d864      	bhi.n	80055f0 <_dtoa_r+0x280>
 8005526:	2b05      	cmp	r3, #5
 8005528:	bfc4      	itt	gt
 800552a:	3b04      	subgt	r3, #4
 800552c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800552e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005530:	f1a3 0302 	sub.w	r3, r3, #2
 8005534:	bfcc      	ite	gt
 8005536:	2400      	movgt	r4, #0
 8005538:	2401      	movle	r4, #1
 800553a:	2b03      	cmp	r3, #3
 800553c:	d863      	bhi.n	8005606 <_dtoa_r+0x296>
 800553e:	e8df f003 	tbb	[pc, r3]
 8005542:	372a      	.short	0x372a
 8005544:	5535      	.short	0x5535
 8005546:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800554a:	441e      	add	r6, r3
 800554c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005550:	2b20      	cmp	r3, #32
 8005552:	bfc1      	itttt	gt
 8005554:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005558:	409f      	lslgt	r7, r3
 800555a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800555e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005562:	bfd6      	itet	le
 8005564:	f1c3 0320 	rsble	r3, r3, #32
 8005568:	ea47 0003 	orrgt.w	r0, r7, r3
 800556c:	fa04 f003 	lslle.w	r0, r4, r3
 8005570:	f7fa ffd0 	bl	8000514 <__aeabi_ui2d>
 8005574:	2201      	movs	r2, #1
 8005576:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800557a:	3e01      	subs	r6, #1
 800557c:	9214      	str	r2, [sp, #80]	@ 0x50
 800557e:	e777      	b.n	8005470 <_dtoa_r+0x100>
 8005580:	2301      	movs	r3, #1
 8005582:	e7b8      	b.n	80054f6 <_dtoa_r+0x186>
 8005584:	9012      	str	r0, [sp, #72]	@ 0x48
 8005586:	e7b7      	b.n	80054f8 <_dtoa_r+0x188>
 8005588:	427b      	negs	r3, r7
 800558a:	930a      	str	r3, [sp, #40]	@ 0x28
 800558c:	2300      	movs	r3, #0
 800558e:	eba8 0807 	sub.w	r8, r8, r7
 8005592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005594:	e7c4      	b.n	8005520 <_dtoa_r+0x1b0>
 8005596:	2300      	movs	r3, #0
 8005598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	dc35      	bgt.n	800560c <_dtoa_r+0x29c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	461a      	mov	r2, r3
 80055a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80055aa:	e00b      	b.n	80055c4 <_dtoa_r+0x254>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e7f3      	b.n	8005598 <_dtoa_r+0x228>
 80055b0:	2300      	movs	r3, #0
 80055b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	bfb8      	it	lt
 80055c2:	2301      	movlt	r3, #1
 80055c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80055c8:	2100      	movs	r1, #0
 80055ca:	2204      	movs	r2, #4
 80055cc:	f102 0514 	add.w	r5, r2, #20
 80055d0:	429d      	cmp	r5, r3
 80055d2:	d91f      	bls.n	8005614 <_dtoa_r+0x2a4>
 80055d4:	6041      	str	r1, [r0, #4]
 80055d6:	4658      	mov	r0, fp
 80055d8:	f000 fd8e 	bl	80060f8 <_Balloc>
 80055dc:	4682      	mov	sl, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	d13c      	bne.n	800565c <_dtoa_r+0x2ec>
 80055e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <_dtoa_r+0x2e0>)
 80055e4:	4602      	mov	r2, r0
 80055e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80055ea:	e6d8      	b.n	800539e <_dtoa_r+0x2e>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e7e0      	b.n	80055b2 <_dtoa_r+0x242>
 80055f0:	2401      	movs	r4, #1
 80055f2:	2300      	movs	r3, #0
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	2200      	movs	r2, #0
 8005602:	2312      	movs	r3, #18
 8005604:	e7d0      	b.n	80055a8 <_dtoa_r+0x238>
 8005606:	2301      	movs	r3, #1
 8005608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800560a:	e7f5      	b.n	80055f8 <_dtoa_r+0x288>
 800560c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	9307      	str	r3, [sp, #28]
 8005612:	e7d7      	b.n	80055c4 <_dtoa_r+0x254>
 8005614:	3101      	adds	r1, #1
 8005616:	0052      	lsls	r2, r2, #1
 8005618:	e7d8      	b.n	80055cc <_dtoa_r+0x25c>
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	636f4361 	.word	0x636f4361
 8005624:	3fd287a7 	.word	0x3fd287a7
 8005628:	8b60c8b3 	.word	0x8b60c8b3
 800562c:	3fc68a28 	.word	0x3fc68a28
 8005630:	509f79fb 	.word	0x509f79fb
 8005634:	3fd34413 	.word	0x3fd34413
 8005638:	080076f9 	.word	0x080076f9
 800563c:	08007710 	.word	0x08007710
 8005640:	7ff00000 	.word	0x7ff00000
 8005644:	080076c9 	.word	0x080076c9
 8005648:	3ff80000 	.word	0x3ff80000
 800564c:	08007808 	.word	0x08007808
 8005650:	08007768 	.word	0x08007768
 8005654:	080076f5 	.word	0x080076f5
 8005658:	080076c8 	.word	0x080076c8
 800565c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005660:	6018      	str	r0, [r3, #0]
 8005662:	9b07      	ldr	r3, [sp, #28]
 8005664:	2b0e      	cmp	r3, #14
 8005666:	f200 80a4 	bhi.w	80057b2 <_dtoa_r+0x442>
 800566a:	2c00      	cmp	r4, #0
 800566c:	f000 80a1 	beq.w	80057b2 <_dtoa_r+0x442>
 8005670:	2f00      	cmp	r7, #0
 8005672:	dd33      	ble.n	80056dc <_dtoa_r+0x36c>
 8005674:	4bad      	ldr	r3, [pc, #692]	@ (800592c <_dtoa_r+0x5bc>)
 8005676:	f007 020f 	and.w	r2, r7, #15
 800567a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800567e:	ed93 7b00 	vldr	d7, [r3]
 8005682:	05f8      	lsls	r0, r7, #23
 8005684:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800568c:	d516      	bpl.n	80056bc <_dtoa_r+0x34c>
 800568e:	4ba8      	ldr	r3, [pc, #672]	@ (8005930 <_dtoa_r+0x5c0>)
 8005690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005698:	f7fb f8e0 	bl	800085c <__aeabi_ddiv>
 800569c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a0:	f004 040f 	and.w	r4, r4, #15
 80056a4:	2603      	movs	r6, #3
 80056a6:	4da2      	ldr	r5, [pc, #648]	@ (8005930 <_dtoa_r+0x5c0>)
 80056a8:	b954      	cbnz	r4, 80056c0 <_dtoa_r+0x350>
 80056aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b2:	f7fb f8d3 	bl	800085c <__aeabi_ddiv>
 80056b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ba:	e028      	b.n	800570e <_dtoa_r+0x39e>
 80056bc:	2602      	movs	r6, #2
 80056be:	e7f2      	b.n	80056a6 <_dtoa_r+0x336>
 80056c0:	07e1      	lsls	r1, r4, #31
 80056c2:	d508      	bpl.n	80056d6 <_dtoa_r+0x366>
 80056c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056cc:	f7fa ff9c 	bl	8000608 <__aeabi_dmul>
 80056d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d4:	3601      	adds	r6, #1
 80056d6:	1064      	asrs	r4, r4, #1
 80056d8:	3508      	adds	r5, #8
 80056da:	e7e5      	b.n	80056a8 <_dtoa_r+0x338>
 80056dc:	f000 80d2 	beq.w	8005884 <_dtoa_r+0x514>
 80056e0:	427c      	negs	r4, r7
 80056e2:	4b92      	ldr	r3, [pc, #584]	@ (800592c <_dtoa_r+0x5bc>)
 80056e4:	4d92      	ldr	r5, [pc, #584]	@ (8005930 <_dtoa_r+0x5c0>)
 80056e6:	f004 020f 	and.w	r2, r4, #15
 80056ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056f6:	f7fa ff87 	bl	8000608 <__aeabi_dmul>
 80056fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fe:	1124      	asrs	r4, r4, #4
 8005700:	2300      	movs	r3, #0
 8005702:	2602      	movs	r6, #2
 8005704:	2c00      	cmp	r4, #0
 8005706:	f040 80b2 	bne.w	800586e <_dtoa_r+0x4fe>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1d3      	bne.n	80056b6 <_dtoa_r+0x346>
 800570e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80b7 	beq.w	8005888 <_dtoa_r+0x518>
 800571a:	4b86      	ldr	r3, [pc, #536]	@ (8005934 <_dtoa_r+0x5c4>)
 800571c:	2200      	movs	r2, #0
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb f9e3 	bl	8000aec <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f000 80ae 	beq.w	8005888 <_dtoa_r+0x518>
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80aa 	beq.w	8005888 <_dtoa_r+0x518>
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd37      	ble.n	80057aa <_dtoa_r+0x43a>
 800573a:	1e7b      	subs	r3, r7, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	4620      	mov	r0, r4
 8005740:	4b7d      	ldr	r3, [pc, #500]	@ (8005938 <_dtoa_r+0x5c8>)
 8005742:	2200      	movs	r2, #0
 8005744:	4629      	mov	r1, r5
 8005746:	f7fa ff5f 	bl	8000608 <__aeabi_dmul>
 800574a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574e:	9c00      	ldr	r4, [sp, #0]
 8005750:	3601      	adds	r6, #1
 8005752:	4630      	mov	r0, r6
 8005754:	f7fa feee 	bl	8000534 <__aeabi_i2d>
 8005758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800575c:	f7fa ff54 	bl	8000608 <__aeabi_dmul>
 8005760:	4b76      	ldr	r3, [pc, #472]	@ (800593c <_dtoa_r+0x5cc>)
 8005762:	2200      	movs	r2, #0
 8005764:	f7fa fd9a 	bl	800029c <__adddf3>
 8005768:	4605      	mov	r5, r0
 800576a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800576e:	2c00      	cmp	r4, #0
 8005770:	f040 808d 	bne.w	800588e <_dtoa_r+0x51e>
 8005774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005778:	4b71      	ldr	r3, [pc, #452]	@ (8005940 <_dtoa_r+0x5d0>)
 800577a:	2200      	movs	r2, #0
 800577c:	f7fa fd8c 	bl	8000298 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005788:	462a      	mov	r2, r5
 800578a:	4633      	mov	r3, r6
 800578c:	f7fb f9cc 	bl	8000b28 <__aeabi_dcmpgt>
 8005790:	2800      	cmp	r0, #0
 8005792:	f040 828b 	bne.w	8005cac <_dtoa_r+0x93c>
 8005796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800579a:	462a      	mov	r2, r5
 800579c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057a0:	f7fb f9a4 	bl	8000aec <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f040 8128 	bne.w	80059fa <_dtoa_r+0x68a>
 80057aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f2c0 815a 	blt.w	8005a6e <_dtoa_r+0x6fe>
 80057ba:	2f0e      	cmp	r7, #14
 80057bc:	f300 8157 	bgt.w	8005a6e <_dtoa_r+0x6fe>
 80057c0:	4b5a      	ldr	r3, [pc, #360]	@ (800592c <_dtoa_r+0x5bc>)
 80057c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057c6:	ed93 7b00 	vldr	d7, [r3]
 80057ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	ed8d 7b00 	vstr	d7, [sp]
 80057d2:	da03      	bge.n	80057dc <_dtoa_r+0x46c>
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f340 8101 	ble.w	80059de <_dtoa_r+0x66e>
 80057dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057e0:	4656      	mov	r6, sl
 80057e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fb f837 	bl	800085c <__aeabi_ddiv>
 80057ee:	f7fb f9bb 	bl	8000b68 <__aeabi_d2iz>
 80057f2:	4680      	mov	r8, r0
 80057f4:	f7fa fe9e 	bl	8000534 <__aeabi_i2d>
 80057f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057fc:	f7fa ff04 	bl	8000608 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4620      	mov	r0, r4
 8005806:	4629      	mov	r1, r5
 8005808:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800580c:	f7fa fd44 	bl	8000298 <__aeabi_dsub>
 8005810:	f806 4b01 	strb.w	r4, [r6], #1
 8005814:	9d07      	ldr	r5, [sp, #28]
 8005816:	eba6 040a 	sub.w	r4, r6, sl
 800581a:	42a5      	cmp	r5, r4
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	f040 8117 	bne.w	8005a52 <_dtoa_r+0x6e2>
 8005824:	f7fa fd3a 	bl	800029c <__adddf3>
 8005828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582c:	4604      	mov	r4, r0
 800582e:	460d      	mov	r5, r1
 8005830:	f7fb f97a 	bl	8000b28 <__aeabi_dcmpgt>
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 80f9 	bne.w	8005a2c <_dtoa_r+0x6bc>
 800583a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8005846:	b118      	cbz	r0, 8005850 <_dtoa_r+0x4e0>
 8005848:	f018 0f01 	tst.w	r8, #1
 800584c:	f040 80ee 	bne.w	8005a2c <_dtoa_r+0x6bc>
 8005850:	4649      	mov	r1, r9
 8005852:	4658      	mov	r0, fp
 8005854:	f000 fc90 	bl	8006178 <_Bfree>
 8005858:	2300      	movs	r3, #0
 800585a:	7033      	strb	r3, [r6, #0]
 800585c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800585e:	3701      	adds	r7, #1
 8005860:	601f      	str	r7, [r3, #0]
 8005862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 831d 	beq.w	8005ea4 <_dtoa_r+0xb34>
 800586a:	601e      	str	r6, [r3, #0]
 800586c:	e31a      	b.n	8005ea4 <_dtoa_r+0xb34>
 800586e:	07e2      	lsls	r2, r4, #31
 8005870:	d505      	bpl.n	800587e <_dtoa_r+0x50e>
 8005872:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005876:	f7fa fec7 	bl	8000608 <__aeabi_dmul>
 800587a:	3601      	adds	r6, #1
 800587c:	2301      	movs	r3, #1
 800587e:	1064      	asrs	r4, r4, #1
 8005880:	3508      	adds	r5, #8
 8005882:	e73f      	b.n	8005704 <_dtoa_r+0x394>
 8005884:	2602      	movs	r6, #2
 8005886:	e742      	b.n	800570e <_dtoa_r+0x39e>
 8005888:	9c07      	ldr	r4, [sp, #28]
 800588a:	9704      	str	r7, [sp, #16]
 800588c:	e761      	b.n	8005752 <_dtoa_r+0x3e2>
 800588e:	4b27      	ldr	r3, [pc, #156]	@ (800592c <_dtoa_r+0x5bc>)
 8005890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800589a:	4454      	add	r4, sl
 800589c:	2900      	cmp	r1, #0
 800589e:	d053      	beq.n	8005948 <_dtoa_r+0x5d8>
 80058a0:	4928      	ldr	r1, [pc, #160]	@ (8005944 <_dtoa_r+0x5d4>)
 80058a2:	2000      	movs	r0, #0
 80058a4:	f7fa ffda 	bl	800085c <__aeabi_ddiv>
 80058a8:	4633      	mov	r3, r6
 80058aa:	462a      	mov	r2, r5
 80058ac:	f7fa fcf4 	bl	8000298 <__aeabi_dsub>
 80058b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058b4:	4656      	mov	r6, sl
 80058b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ba:	f7fb f955 	bl	8000b68 <__aeabi_d2iz>
 80058be:	4605      	mov	r5, r0
 80058c0:	f7fa fe38 	bl	8000534 <__aeabi_i2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058cc:	f7fa fce4 	bl	8000298 <__aeabi_dsub>
 80058d0:	3530      	adds	r5, #48	@ 0x30
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058da:	f806 5b01 	strb.w	r5, [r6], #1
 80058de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058e2:	f7fb f903 	bl	8000aec <__aeabi_dcmplt>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d171      	bne.n	80059ce <_dtoa_r+0x65e>
 80058ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ee:	4911      	ldr	r1, [pc, #68]	@ (8005934 <_dtoa_r+0x5c4>)
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fa fcd1 	bl	8000298 <__aeabi_dsub>
 80058f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058fa:	f7fb f8f7 	bl	8000aec <__aeabi_dcmplt>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f040 8095 	bne.w	8005a2e <_dtoa_r+0x6be>
 8005904:	42a6      	cmp	r6, r4
 8005906:	f43f af50 	beq.w	80057aa <_dtoa_r+0x43a>
 800590a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <_dtoa_r+0x5c8>)
 8005910:	2200      	movs	r2, #0
 8005912:	f7fa fe79 	bl	8000608 <__aeabi_dmul>
 8005916:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <_dtoa_r+0x5c8>)
 8005918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800591c:	2200      	movs	r2, #0
 800591e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005922:	f7fa fe71 	bl	8000608 <__aeabi_dmul>
 8005926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800592a:	e7c4      	b.n	80058b6 <_dtoa_r+0x546>
 800592c:	08007808 	.word	0x08007808
 8005930:	080077e0 	.word	0x080077e0
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	40240000 	.word	0x40240000
 800593c:	401c0000 	.word	0x401c0000
 8005940:	40140000 	.word	0x40140000
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	f7fa fe5c 	bl	8000608 <__aeabi_dmul>
 8005950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005954:	9415      	str	r4, [sp, #84]	@ 0x54
 8005956:	4656      	mov	r6, sl
 8005958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800595c:	f7fb f904 	bl	8000b68 <__aeabi_d2iz>
 8005960:	4605      	mov	r5, r0
 8005962:	f7fa fde7 	bl	8000534 <__aeabi_i2d>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596e:	f7fa fc93 	bl	8000298 <__aeabi_dsub>
 8005972:	3530      	adds	r5, #48	@ 0x30
 8005974:	f806 5b01 	strb.w	r5, [r6], #1
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	42a6      	cmp	r6, r4
 800597e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	d124      	bne.n	80059d2 <_dtoa_r+0x662>
 8005988:	4bac      	ldr	r3, [pc, #688]	@ (8005c3c <_dtoa_r+0x8cc>)
 800598a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800598e:	f7fa fc85 	bl	800029c <__adddf3>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599a:	f7fb f8c5 	bl	8000b28 <__aeabi_dcmpgt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d145      	bne.n	8005a2e <_dtoa_r+0x6be>
 80059a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059a6:	49a5      	ldr	r1, [pc, #660]	@ (8005c3c <_dtoa_r+0x8cc>)
 80059a8:	2000      	movs	r0, #0
 80059aa:	f7fa fc75 	bl	8000298 <__aeabi_dsub>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b6:	f7fb f899 	bl	8000aec <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f43f aef5 	beq.w	80057aa <_dtoa_r+0x43a>
 80059c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80059c2:	1e73      	subs	r3, r6, #1
 80059c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80059c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059ca:	2b30      	cmp	r3, #48	@ 0x30
 80059cc:	d0f8      	beq.n	80059c0 <_dtoa_r+0x650>
 80059ce:	9f04      	ldr	r7, [sp, #16]
 80059d0:	e73e      	b.n	8005850 <_dtoa_r+0x4e0>
 80059d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005c40 <_dtoa_r+0x8d0>)
 80059d4:	f7fa fe18 	bl	8000608 <__aeabi_dmul>
 80059d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059dc:	e7bc      	b.n	8005958 <_dtoa_r+0x5e8>
 80059de:	d10c      	bne.n	80059fa <_dtoa_r+0x68a>
 80059e0:	4b98      	ldr	r3, [pc, #608]	@ (8005c44 <_dtoa_r+0x8d4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e8:	f7fa fe0e 	bl	8000608 <__aeabi_dmul>
 80059ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f0:	f7fb f890 	bl	8000b14 <__aeabi_dcmpge>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f000 8157 	beq.w	8005ca8 <_dtoa_r+0x938>
 80059fa:	2400      	movs	r4, #0
 80059fc:	4625      	mov	r5, r4
 80059fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a00:	43db      	mvns	r3, r3
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	4656      	mov	r6, sl
 8005a06:	2700      	movs	r7, #0
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4658      	mov	r0, fp
 8005a0c:	f000 fbb4 	bl	8006178 <_Bfree>
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	d0dc      	beq.n	80059ce <_dtoa_r+0x65e>
 8005a14:	b12f      	cbz	r7, 8005a22 <_dtoa_r+0x6b2>
 8005a16:	42af      	cmp	r7, r5
 8005a18:	d003      	beq.n	8005a22 <_dtoa_r+0x6b2>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4658      	mov	r0, fp
 8005a1e:	f000 fbab 	bl	8006178 <_Bfree>
 8005a22:	4629      	mov	r1, r5
 8005a24:	4658      	mov	r0, fp
 8005a26:	f000 fba7 	bl	8006178 <_Bfree>
 8005a2a:	e7d0      	b.n	80059ce <_dtoa_r+0x65e>
 8005a2c:	9704      	str	r7, [sp, #16]
 8005a2e:	4633      	mov	r3, r6
 8005a30:	461e      	mov	r6, r3
 8005a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a36:	2a39      	cmp	r2, #57	@ 0x39
 8005a38:	d107      	bne.n	8005a4a <_dtoa_r+0x6da>
 8005a3a:	459a      	cmp	sl, r3
 8005a3c:	d1f8      	bne.n	8005a30 <_dtoa_r+0x6c0>
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	3201      	adds	r2, #1
 8005a42:	9204      	str	r2, [sp, #16]
 8005a44:	2230      	movs	r2, #48	@ 0x30
 8005a46:	f88a 2000 	strb.w	r2, [sl]
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e7bd      	b.n	80059ce <_dtoa_r+0x65e>
 8005a52:	4b7b      	ldr	r3, [pc, #492]	@ (8005c40 <_dtoa_r+0x8d0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	f7fa fdd7 	bl	8000608 <__aeabi_dmul>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	460d      	mov	r5, r1
 8005a62:	f7fb f839 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f aebb 	beq.w	80057e2 <_dtoa_r+0x472>
 8005a6c:	e6f0      	b.n	8005850 <_dtoa_r+0x4e0>
 8005a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	f000 80db 	beq.w	8005c2c <_dtoa_r+0x8bc>
 8005a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a78:	2a01      	cmp	r2, #1
 8005a7a:	f300 80bf 	bgt.w	8005bfc <_dtoa_r+0x88c>
 8005a7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	f000 80b7 	beq.w	8005bf4 <_dtoa_r+0x884>
 8005a86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a8c:	4646      	mov	r6, r8
 8005a8e:	9a08      	ldr	r2, [sp, #32]
 8005a90:	2101      	movs	r1, #1
 8005a92:	441a      	add	r2, r3
 8005a94:	4658      	mov	r0, fp
 8005a96:	4498      	add	r8, r3
 8005a98:	9208      	str	r2, [sp, #32]
 8005a9a:	f000 fc21 	bl	80062e0 <__i2b>
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b15e      	cbz	r6, 8005aba <_dtoa_r+0x74a>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd08      	ble.n	8005aba <_dtoa_r+0x74a>
 8005aa8:	42b3      	cmp	r3, r6
 8005aaa:	9a08      	ldr	r2, [sp, #32]
 8005aac:	bfa8      	it	ge
 8005aae:	4633      	movge	r3, r6
 8005ab0:	eba8 0803 	sub.w	r8, r8, r3
 8005ab4:	1af6      	subs	r6, r6, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	9308      	str	r3, [sp, #32]
 8005aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005abc:	b1f3      	cbz	r3, 8005afc <_dtoa_r+0x78c>
 8005abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80b7 	beq.w	8005c34 <_dtoa_r+0x8c4>
 8005ac6:	b18c      	cbz	r4, 8005aec <_dtoa_r+0x77c>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4622      	mov	r2, r4
 8005acc:	4658      	mov	r0, fp
 8005ace:	f000 fcc7 	bl	8006460 <__pow5mult>
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f000 fc17 	bl	800630c <__multiply>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	9004      	str	r0, [sp, #16]
 8005ae2:	4658      	mov	r0, fp
 8005ae4:	f000 fb48 	bl	8006178 <_Bfree>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	4699      	mov	r9, r3
 8005aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aee:	1b1a      	subs	r2, r3, r4
 8005af0:	d004      	beq.n	8005afc <_dtoa_r+0x78c>
 8005af2:	4649      	mov	r1, r9
 8005af4:	4658      	mov	r0, fp
 8005af6:	f000 fcb3 	bl	8006460 <__pow5mult>
 8005afa:	4681      	mov	r9, r0
 8005afc:	2101      	movs	r1, #1
 8005afe:	4658      	mov	r0, fp
 8005b00:	f000 fbee 	bl	80062e0 <__i2b>
 8005b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b06:	4604      	mov	r4, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 81cf 	beq.w	8005eac <_dtoa_r+0xb3c>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4601      	mov	r1, r0
 8005b12:	4658      	mov	r0, fp
 8005b14:	f000 fca4 	bl	8006460 <__pow5mult>
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	f300 8095 	bgt.w	8005c4c <_dtoa_r+0x8dc>
 8005b22:	9b02      	ldr	r3, [sp, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 8087 	bne.w	8005c38 <_dtoa_r+0x8c8>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 8089 	bne.w	8005c48 <_dtoa_r+0x8d8>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	b12b      	cbz	r3, 8005b4e <_dtoa_r+0x7de>
 8005b42:	9b08      	ldr	r3, [sp, #32]
 8005b44:	3301      	adds	r3, #1
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	f108 0801 	add.w	r8, r8, #1
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81b0 	beq.w	8005eb8 <_dtoa_r+0xb48>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b5e:	6918      	ldr	r0, [r3, #16]
 8005b60:	f000 fb72 	bl	8006248 <__hi0bits>
 8005b64:	f1c0 0020 	rsb	r0, r0, #32
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	4418      	add	r0, r3
 8005b6c:	f010 001f 	ands.w	r0, r0, #31
 8005b70:	d077      	beq.n	8005c62 <_dtoa_r+0x8f2>
 8005b72:	f1c0 0320 	rsb	r3, r0, #32
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	dd6b      	ble.n	8005c52 <_dtoa_r+0x8e2>
 8005b7a:	9b08      	ldr	r3, [sp, #32]
 8005b7c:	f1c0 001c 	rsb	r0, r0, #28
 8005b80:	4403      	add	r3, r0
 8005b82:	4480      	add	r8, r0
 8005b84:	4406      	add	r6, r0
 8005b86:	9308      	str	r3, [sp, #32]
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	dd05      	ble.n	8005b9a <_dtoa_r+0x82a>
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4642      	mov	r2, r8
 8005b92:	4658      	mov	r0, fp
 8005b94:	f000 fcbe 	bl	8006514 <__lshift>
 8005b98:	4681      	mov	r9, r0
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd05      	ble.n	8005bac <_dtoa_r+0x83c>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4658      	mov	r0, fp
 8005ba6:	f000 fcb5 	bl	8006514 <__lshift>
 8005baa:	4604      	mov	r4, r0
 8005bac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d059      	beq.n	8005c66 <_dtoa_r+0x8f6>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f000 fd19 	bl	80065ec <__mcmp>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	da53      	bge.n	8005c66 <_dtoa_r+0x8f6>
 8005bbe:	1e7b      	subs	r3, r7, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	4658      	mov	r0, fp
 8005bca:	f000 faf7 	bl	80061bc <__multadd>
 8005bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bd0:	4681      	mov	r9, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8172 	beq.w	8005ebc <_dtoa_r+0xb4c>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4629      	mov	r1, r5
 8005bdc:	220a      	movs	r2, #10
 8005bde:	4658      	mov	r0, fp
 8005be0:	f000 faec 	bl	80061bc <__multadd>
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	4605      	mov	r5, r0
 8005bea:	dc67      	bgt.n	8005cbc <_dtoa_r+0x94c>
 8005bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dc41      	bgt.n	8005c76 <_dtoa_r+0x906>
 8005bf2:	e063      	b.n	8005cbc <_dtoa_r+0x94c>
 8005bf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005bf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005bfa:	e746      	b.n	8005a8a <_dtoa_r+0x71a>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	1e5c      	subs	r4, r3, #1
 8005c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	bfbf      	itttt	lt
 8005c06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c0c:	1ae3      	sublt	r3, r4, r3
 8005c0e:	bfb4      	ite	lt
 8005c10:	18d2      	addlt	r2, r2, r3
 8005c12:	1b1c      	subge	r4, r3, r4
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	bfbc      	itt	lt
 8005c18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c1a:	2400      	movlt	r4, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfb5      	itete	lt
 8005c20:	eba8 0603 	sublt.w	r6, r8, r3
 8005c24:	9b07      	ldrge	r3, [sp, #28]
 8005c26:	2300      	movlt	r3, #0
 8005c28:	4646      	movge	r6, r8
 8005c2a:	e730      	b.n	8005a8e <_dtoa_r+0x71e>
 8005c2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c30:	4646      	mov	r6, r8
 8005c32:	e735      	b.n	8005aa0 <_dtoa_r+0x730>
 8005c34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c36:	e75c      	b.n	8005af2 <_dtoa_r+0x782>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e788      	b.n	8005b4e <_dtoa_r+0x7de>
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	40240000 	.word	0x40240000
 8005c44:	40140000 	.word	0x40140000
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	e780      	b.n	8005b4e <_dtoa_r+0x7de>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c50:	e782      	b.n	8005b58 <_dtoa_r+0x7e8>
 8005c52:	d099      	beq.n	8005b88 <_dtoa_r+0x818>
 8005c54:	9a08      	ldr	r2, [sp, #32]
 8005c56:	331c      	adds	r3, #28
 8005c58:	441a      	add	r2, r3
 8005c5a:	4498      	add	r8, r3
 8005c5c:	441e      	add	r6, r3
 8005c5e:	9208      	str	r2, [sp, #32]
 8005c60:	e792      	b.n	8005b88 <_dtoa_r+0x818>
 8005c62:	4603      	mov	r3, r0
 8005c64:	e7f6      	b.n	8005c54 <_dtoa_r+0x8e4>
 8005c66:	9b07      	ldr	r3, [sp, #28]
 8005c68:	9704      	str	r7, [sp, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc20      	bgt.n	8005cb0 <_dtoa_r+0x940>
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	dd1e      	ble.n	8005cb4 <_dtoa_r+0x944>
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f aec0 	bne.w	80059fe <_dtoa_r+0x68e>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	2205      	movs	r2, #5
 8005c82:	4658      	mov	r0, fp
 8005c84:	f000 fa9a 	bl	80061bc <__multadd>
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	f000 fcad 	bl	80065ec <__mcmp>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f77f aeb3 	ble.w	80059fe <_dtoa_r+0x68e>
 8005c98:	4656      	mov	r6, sl
 8005c9a:	2331      	movs	r3, #49	@ 0x31
 8005c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	e6ae      	b.n	8005a06 <_dtoa_r+0x696>
 8005ca8:	9c07      	ldr	r4, [sp, #28]
 8005caa:	9704      	str	r7, [sp, #16]
 8005cac:	4625      	mov	r5, r4
 8005cae:	e7f3      	b.n	8005c98 <_dtoa_r+0x928>
 8005cb0:	9b07      	ldr	r3, [sp, #28]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8104 	beq.w	8005ec4 <_dtoa_r+0xb54>
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	dd05      	ble.n	8005ccc <_dtoa_r+0x95c>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	4658      	mov	r0, fp
 8005cc6:	f000 fc25 	bl	8006514 <__lshift>
 8005cca:	4605      	mov	r5, r0
 8005ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05a      	beq.n	8005d88 <_dtoa_r+0xa18>
 8005cd2:	6869      	ldr	r1, [r5, #4]
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	f000 fa0f 	bl	80060f8 <_Balloc>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	b928      	cbnz	r0, 8005cea <_dtoa_r+0x97a>
 8005cde:	4b84      	ldr	r3, [pc, #528]	@ (8005ef0 <_dtoa_r+0xb80>)
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ce6:	f7ff bb5a 	b.w	800539e <_dtoa_r+0x2e>
 8005cea:	692a      	ldr	r2, [r5, #16]
 8005cec:	3202      	adds	r2, #2
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	f105 010c 	add.w	r1, r5, #12
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	f000 fe3d 	bl	8006974 <memcpy>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f000 fc08 	bl	8006514 <__lshift>
 8005d04:	f10a 0301 	add.w	r3, sl, #1
 8005d08:	9307      	str	r3, [sp, #28]
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	4453      	add	r3, sl
 8005d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	462f      	mov	r7, r5
 8005d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	9b07      	ldr	r3, [sp, #28]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4648      	mov	r0, r9
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	f7ff fa98 	bl	800525a <quorem>
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	9002      	str	r0, [sp, #8]
 8005d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d32:	4648      	mov	r0, r9
 8005d34:	f000 fc5a 	bl	80065ec <__mcmp>
 8005d38:	462a      	mov	r2, r5
 8005d3a:	9008      	str	r0, [sp, #32]
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f000 fc70 	bl	8006624 <__mdiff>
 8005d44:	68c2      	ldr	r2, [r0, #12]
 8005d46:	4606      	mov	r6, r0
 8005d48:	bb02      	cbnz	r2, 8005d8c <_dtoa_r+0xa1c>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fc4d 	bl	80065ec <__mcmp>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4631      	mov	r1, r6
 8005d56:	4658      	mov	r0, fp
 8005d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d5a:	f000 fa0d 	bl	8006178 <_Bfree>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d62:	9e07      	ldr	r6, [sp, #28]
 8005d64:	ea43 0102 	orr.w	r1, r3, r2
 8005d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d6a:	4319      	orrs	r1, r3
 8005d6c:	d110      	bne.n	8005d90 <_dtoa_r+0xa20>
 8005d6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d72:	d029      	beq.n	8005dc8 <_dtoa_r+0xa58>
 8005d74:	9b08      	ldr	r3, [sp, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd02      	ble.n	8005d80 <_dtoa_r+0xa10>
 8005d7a:	9b02      	ldr	r3, [sp, #8]
 8005d7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	f883 8000 	strb.w	r8, [r3]
 8005d86:	e63f      	b.n	8005a08 <_dtoa_r+0x698>
 8005d88:	4628      	mov	r0, r5
 8005d8a:	e7bb      	b.n	8005d04 <_dtoa_r+0x994>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	e7e1      	b.n	8005d54 <_dtoa_r+0x9e4>
 8005d90:	9b08      	ldr	r3, [sp, #32]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db04      	blt.n	8005da0 <_dtoa_r+0xa30>
 8005d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	d120      	bne.n	8005de2 <_dtoa_r+0xa72>
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	dded      	ble.n	8005d80 <_dtoa_r+0xa10>
 8005da4:	4649      	mov	r1, r9
 8005da6:	2201      	movs	r2, #1
 8005da8:	4658      	mov	r0, fp
 8005daa:	f000 fbb3 	bl	8006514 <__lshift>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4681      	mov	r9, r0
 8005db2:	f000 fc1b 	bl	80065ec <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	dc03      	bgt.n	8005dc2 <_dtoa_r+0xa52>
 8005dba:	d1e1      	bne.n	8005d80 <_dtoa_r+0xa10>
 8005dbc:	f018 0f01 	tst.w	r8, #1
 8005dc0:	d0de      	beq.n	8005d80 <_dtoa_r+0xa10>
 8005dc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dc6:	d1d8      	bne.n	8005d7a <_dtoa_r+0xa0a>
 8005dc8:	9a00      	ldr	r2, [sp, #0]
 8005dca:	2339      	movs	r3, #57	@ 0x39
 8005dcc:	7013      	strb	r3, [r2, #0]
 8005dce:	4633      	mov	r3, r6
 8005dd0:	461e      	mov	r6, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005dd8:	2a39      	cmp	r2, #57	@ 0x39
 8005dda:	d052      	beq.n	8005e82 <_dtoa_r+0xb12>
 8005ddc:	3201      	adds	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e612      	b.n	8005a08 <_dtoa_r+0x698>
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	dd07      	ble.n	8005df6 <_dtoa_r+0xa86>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dea:	d0ed      	beq.n	8005dc8 <_dtoa_r+0xa58>
 8005dec:	9a00      	ldr	r2, [sp, #0]
 8005dee:	f108 0301 	add.w	r3, r8, #1
 8005df2:	7013      	strb	r3, [r2, #0]
 8005df4:	e608      	b.n	8005a08 <_dtoa_r+0x698>
 8005df6:	9b07      	ldr	r3, [sp, #28]
 8005df8:	9a07      	ldr	r2, [sp, #28]
 8005dfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d028      	beq.n	8005e56 <_dtoa_r+0xae6>
 8005e04:	4649      	mov	r1, r9
 8005e06:	2300      	movs	r3, #0
 8005e08:	220a      	movs	r2, #10
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f000 f9d6 	bl	80061bc <__multadd>
 8005e10:	42af      	cmp	r7, r5
 8005e12:	4681      	mov	r9, r0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	f04f 020a 	mov.w	r2, #10
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	4658      	mov	r0, fp
 8005e20:	d107      	bne.n	8005e32 <_dtoa_r+0xac2>
 8005e22:	f000 f9cb 	bl	80061bc <__multadd>
 8005e26:	4607      	mov	r7, r0
 8005e28:	4605      	mov	r5, r0
 8005e2a:	9b07      	ldr	r3, [sp, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	e774      	b.n	8005d1c <_dtoa_r+0x9ac>
 8005e32:	f000 f9c3 	bl	80061bc <__multadd>
 8005e36:	4629      	mov	r1, r5
 8005e38:	4607      	mov	r7, r0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 f9bc 	bl	80061bc <__multadd>
 8005e44:	4605      	mov	r5, r0
 8005e46:	e7f0      	b.n	8005e2a <_dtoa_r+0xaba>
 8005e48:	9b00      	ldr	r3, [sp, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfcc      	ite	gt
 8005e4e:	461e      	movgt	r6, r3
 8005e50:	2601      	movle	r6, #1
 8005e52:	4456      	add	r6, sl
 8005e54:	2700      	movs	r7, #0
 8005e56:	4649      	mov	r1, r9
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4658      	mov	r0, fp
 8005e5c:	f000 fb5a 	bl	8006514 <__lshift>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4681      	mov	r9, r0
 8005e64:	f000 fbc2 	bl	80065ec <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dcb0      	bgt.n	8005dce <_dtoa_r+0xa5e>
 8005e6c:	d102      	bne.n	8005e74 <_dtoa_r+0xb04>
 8005e6e:	f018 0f01 	tst.w	r8, #1
 8005e72:	d1ac      	bne.n	8005dce <_dtoa_r+0xa5e>
 8005e74:	4633      	mov	r3, r6
 8005e76:	461e      	mov	r6, r3
 8005e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e7c:	2a30      	cmp	r2, #48	@ 0x30
 8005e7e:	d0fa      	beq.n	8005e76 <_dtoa_r+0xb06>
 8005e80:	e5c2      	b.n	8005a08 <_dtoa_r+0x698>
 8005e82:	459a      	cmp	sl, r3
 8005e84:	d1a4      	bne.n	8005dd0 <_dtoa_r+0xa60>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	2331      	movs	r3, #49	@ 0x31
 8005e8e:	f88a 3000 	strb.w	r3, [sl]
 8005e92:	e5b9      	b.n	8005a08 <_dtoa_r+0x698>
 8005e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ef4 <_dtoa_r+0xb84>
 8005e9a:	b11b      	cbz	r3, 8005ea4 <_dtoa_r+0xb34>
 8005e9c:	f10a 0308 	add.w	r3, sl, #8
 8005ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	b019      	add	sp, #100	@ 0x64
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	f77f ae37 	ble.w	8005b22 <_dtoa_r+0x7b2>
 8005eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb8:	2001      	movs	r0, #1
 8005eba:	e655      	b.n	8005b68 <_dtoa_r+0x7f8>
 8005ebc:	9b00      	ldr	r3, [sp, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f77f aed6 	ble.w	8005c70 <_dtoa_r+0x900>
 8005ec4:	4656      	mov	r6, sl
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4648      	mov	r0, r9
 8005eca:	f7ff f9c6 	bl	800525a <quorem>
 8005ece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ed2:	f806 8b01 	strb.w	r8, [r6], #1
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	eba6 020a 	sub.w	r2, r6, sl
 8005edc:	4293      	cmp	r3, r2
 8005ede:	ddb3      	ble.n	8005e48 <_dtoa_r+0xad8>
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	220a      	movs	r2, #10
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f000 f968 	bl	80061bc <__multadd>
 8005eec:	4681      	mov	r9, r0
 8005eee:	e7ea      	b.n	8005ec6 <_dtoa_r+0xb56>
 8005ef0:	08007768 	.word	0x08007768
 8005ef4:	080076ec 	.word	0x080076ec

08005ef8 <_free_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4605      	mov	r5, r0
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d041      	beq.n	8005f84 <_free_r+0x8c>
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	18e4      	addlt	r4, r4, r3
 8005f0c:	f000 f8e8 	bl	80060e0 <__malloc_lock>
 8005f10:	4a1d      	ldr	r2, [pc, #116]	@ (8005f88 <_free_r+0x90>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	b933      	cbnz	r3, 8005f24 <_free_r+0x2c>
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f20:	f000 b8e4 	b.w	80060ec <__malloc_unlock>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d908      	bls.n	8005f3a <_free_r+0x42>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	e7ed      	b.n	8005f16 <_free_r+0x1e>
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b10b      	cbz	r3, 8005f44 <_free_r+0x4c>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x42>
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	1850      	adds	r0, r2, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x6c>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1850      	adds	r0, r2, r1
 8005f52:	4283      	cmp	r3, r0
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	d1e0      	bne.n	8005f1a <_free_r+0x22>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6053      	str	r3, [r2, #4]
 8005f5e:	4408      	add	r0, r1
 8005f60:	6010      	str	r0, [r2, #0]
 8005f62:	e7da      	b.n	8005f1a <_free_r+0x22>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x74>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d6      	b.n	8005f1a <_free_r+0x22>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428b      	cmp	r3, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6819      	ldreq	r1, [r3, #0]
 8005f76:	685b      	ldreq	r3, [r3, #4]
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	6054      	str	r4, [r2, #4]
 8005f82:	e7ca      	b.n	8005f1a <_free_r+0x22>
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	2000062c 	.word	0x2000062c

08005f8c <malloc>:
 8005f8c:	4b02      	ldr	r3, [pc, #8]	@ (8005f98 <malloc+0xc>)
 8005f8e:	4601      	mov	r1, r0
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f000 b825 	b.w	8005fe0 <_malloc_r>
 8005f96:	bf00      	nop
 8005f98:	20000018 	.word	0x20000018

08005f9c <sbrk_aligned>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fdc <sbrk_aligned+0x40>)
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6831      	ldr	r1, [r6, #0]
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	b911      	cbnz	r1, 8005fae <sbrk_aligned+0x12>
 8005fa8:	f000 fcd4 	bl	8006954 <_sbrk_r>
 8005fac:	6030      	str	r0, [r6, #0]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 fccf 	bl	8006954 <_sbrk_r>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d103      	bne.n	8005fc2 <sbrk_aligned+0x26>
 8005fba:	f04f 34ff 	mov.w	r4, #4294967295
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d0f8      	beq.n	8005fbe <sbrk_aligned+0x22>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fcc0 	bl	8006954 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d1f2      	bne.n	8005fbe <sbrk_aligned+0x22>
 8005fd8:	e7ef      	b.n	8005fba <sbrk_aligned+0x1e>
 8005fda:	bf00      	nop
 8005fdc:	20000628 	.word	0x20000628

08005fe0 <_malloc_r>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	1ccd      	adds	r5, r1, #3
 8005fe6:	f025 0503 	bic.w	r5, r5, #3
 8005fea:	3508      	adds	r5, #8
 8005fec:	2d0c      	cmp	r5, #12
 8005fee:	bf38      	it	cc
 8005ff0:	250c      	movcc	r5, #12
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	db01      	blt.n	8005ffc <_malloc_r+0x1c>
 8005ff8:	42a9      	cmp	r1, r5
 8005ffa:	d904      	bls.n	8006006 <_malloc_r+0x26>
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	2000      	movs	r0, #0
 8006002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060dc <_malloc_r+0xfc>
 800600a:	f000 f869 	bl	80060e0 <__malloc_lock>
 800600e:	f8d8 3000 	ldr.w	r3, [r8]
 8006012:	461c      	mov	r4, r3
 8006014:	bb44      	cbnz	r4, 8006068 <_malloc_r+0x88>
 8006016:	4629      	mov	r1, r5
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ffbf 	bl	8005f9c <sbrk_aligned>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	4604      	mov	r4, r0
 8006022:	d158      	bne.n	80060d6 <_malloc_r+0xf6>
 8006024:	f8d8 4000 	ldr.w	r4, [r8]
 8006028:	4627      	mov	r7, r4
 800602a:	2f00      	cmp	r7, #0
 800602c:	d143      	bne.n	80060b6 <_malloc_r+0xd6>
 800602e:	2c00      	cmp	r4, #0
 8006030:	d04b      	beq.n	80060ca <_malloc_r+0xea>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	4639      	mov	r1, r7
 8006036:	4630      	mov	r0, r6
 8006038:	eb04 0903 	add.w	r9, r4, r3
 800603c:	f000 fc8a 	bl	8006954 <_sbrk_r>
 8006040:	4581      	cmp	r9, r0
 8006042:	d142      	bne.n	80060ca <_malloc_r+0xea>
 8006044:	6821      	ldr	r1, [r4, #0]
 8006046:	1a6d      	subs	r5, r5, r1
 8006048:	4629      	mov	r1, r5
 800604a:	4630      	mov	r0, r6
 800604c:	f7ff ffa6 	bl	8005f9c <sbrk_aligned>
 8006050:	3001      	adds	r0, #1
 8006052:	d03a      	beq.n	80060ca <_malloc_r+0xea>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	442b      	add	r3, r5
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	f8d8 3000 	ldr.w	r3, [r8]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	bb62      	cbnz	r2, 80060bc <_malloc_r+0xdc>
 8006062:	f8c8 7000 	str.w	r7, [r8]
 8006066:	e00f      	b.n	8006088 <_malloc_r+0xa8>
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	1b52      	subs	r2, r2, r5
 800606c:	d420      	bmi.n	80060b0 <_malloc_r+0xd0>
 800606e:	2a0b      	cmp	r2, #11
 8006070:	d917      	bls.n	80060a2 <_malloc_r+0xc2>
 8006072:	1961      	adds	r1, r4, r5
 8006074:	42a3      	cmp	r3, r4
 8006076:	6025      	str	r5, [r4, #0]
 8006078:	bf18      	it	ne
 800607a:	6059      	strne	r1, [r3, #4]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	bf08      	it	eq
 8006080:	f8c8 1000 	streq.w	r1, [r8]
 8006084:	5162      	str	r2, [r4, r5]
 8006086:	604b      	str	r3, [r1, #4]
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f82f 	bl	80060ec <__malloc_unlock>
 800608e:	f104 000b 	add.w	r0, r4, #11
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	f020 0007 	bic.w	r0, r0, #7
 8006098:	1ac2      	subs	r2, r0, r3
 800609a:	bf1c      	itt	ne
 800609c:	1a1b      	subne	r3, r3, r0
 800609e:	50a3      	strne	r3, [r4, r2]
 80060a0:	e7af      	b.n	8006002 <_malloc_r+0x22>
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	bf0c      	ite	eq
 80060a8:	f8c8 2000 	streq.w	r2, [r8]
 80060ac:	605a      	strne	r2, [r3, #4]
 80060ae:	e7eb      	b.n	8006088 <_malloc_r+0xa8>
 80060b0:	4623      	mov	r3, r4
 80060b2:	6864      	ldr	r4, [r4, #4]
 80060b4:	e7ae      	b.n	8006014 <_malloc_r+0x34>
 80060b6:	463c      	mov	r4, r7
 80060b8:	687f      	ldr	r7, [r7, #4]
 80060ba:	e7b6      	b.n	800602a <_malloc_r+0x4a>
 80060bc:	461a      	mov	r2, r3
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	42a3      	cmp	r3, r4
 80060c2:	d1fb      	bne.n	80060bc <_malloc_r+0xdc>
 80060c4:	2300      	movs	r3, #0
 80060c6:	6053      	str	r3, [r2, #4]
 80060c8:	e7de      	b.n	8006088 <_malloc_r+0xa8>
 80060ca:	230c      	movs	r3, #12
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f80c 	bl	80060ec <__malloc_unlock>
 80060d4:	e794      	b.n	8006000 <_malloc_r+0x20>
 80060d6:	6005      	str	r5, [r0, #0]
 80060d8:	e7d6      	b.n	8006088 <_malloc_r+0xa8>
 80060da:	bf00      	nop
 80060dc:	2000062c 	.word	0x2000062c

080060e0 <__malloc_lock>:
 80060e0:	4801      	ldr	r0, [pc, #4]	@ (80060e8 <__malloc_lock+0x8>)
 80060e2:	f7ff b8b8 	b.w	8005256 <__retarget_lock_acquire_recursive>
 80060e6:	bf00      	nop
 80060e8:	20000624 	.word	0x20000624

080060ec <__malloc_unlock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	@ (80060f4 <__malloc_unlock+0x8>)
 80060ee:	f7ff b8b3 	b.w	8005258 <__retarget_lock_release_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000624 	.word	0x20000624

080060f8 <_Balloc>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	69c6      	ldr	r6, [r0, #28]
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	b976      	cbnz	r6, 8006120 <_Balloc+0x28>
 8006102:	2010      	movs	r0, #16
 8006104:	f7ff ff42 	bl	8005f8c <malloc>
 8006108:	4602      	mov	r2, r0
 800610a:	61e0      	str	r0, [r4, #28]
 800610c:	b920      	cbnz	r0, 8006118 <_Balloc+0x20>
 800610e:	4b18      	ldr	r3, [pc, #96]	@ (8006170 <_Balloc+0x78>)
 8006110:	4818      	ldr	r0, [pc, #96]	@ (8006174 <_Balloc+0x7c>)
 8006112:	216b      	movs	r1, #107	@ 0x6b
 8006114:	f000 fc3c 	bl	8006990 <__assert_func>
 8006118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800611c:	6006      	str	r6, [r0, #0]
 800611e:	60c6      	str	r6, [r0, #12]
 8006120:	69e6      	ldr	r6, [r4, #28]
 8006122:	68f3      	ldr	r3, [r6, #12]
 8006124:	b183      	cbz	r3, 8006148 <_Balloc+0x50>
 8006126:	69e3      	ldr	r3, [r4, #28]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800612e:	b9b8      	cbnz	r0, 8006160 <_Balloc+0x68>
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f605 	lsl.w	r6, r1, r5
 8006136:	1d72      	adds	r2, r6, #5
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fc46 	bl	80069cc <_calloc_r>
 8006140:	b160      	cbz	r0, 800615c <_Balloc+0x64>
 8006142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006146:	e00e      	b.n	8006166 <_Balloc+0x6e>
 8006148:	2221      	movs	r2, #33	@ 0x21
 800614a:	2104      	movs	r1, #4
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fc3d 	bl	80069cc <_calloc_r>
 8006152:	69e3      	ldr	r3, [r4, #28]
 8006154:	60f0      	str	r0, [r6, #12]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e4      	bne.n	8006126 <_Balloc+0x2e>
 800615c:	2000      	movs	r0, #0
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	6802      	ldr	r2, [r0, #0]
 8006162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006166:	2300      	movs	r3, #0
 8006168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800616c:	e7f7      	b.n	800615e <_Balloc+0x66>
 800616e:	bf00      	nop
 8006170:	080076f9 	.word	0x080076f9
 8006174:	08007779 	.word	0x08007779

08006178 <_Bfree>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	69c6      	ldr	r6, [r0, #28]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b976      	cbnz	r6, 80061a0 <_Bfree+0x28>
 8006182:	2010      	movs	r0, #16
 8006184:	f7ff ff02 	bl	8005f8c <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	61e8      	str	r0, [r5, #28]
 800618c:	b920      	cbnz	r0, 8006198 <_Bfree+0x20>
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <_Bfree+0x3c>)
 8006190:	4809      	ldr	r0, [pc, #36]	@ (80061b8 <_Bfree+0x40>)
 8006192:	218f      	movs	r1, #143	@ 0x8f
 8006194:	f000 fbfc 	bl	8006990 <__assert_func>
 8006198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800619c:	6006      	str	r6, [r0, #0]
 800619e:	60c6      	str	r6, [r0, #12]
 80061a0:	b13c      	cbz	r4, 80061b2 <_Bfree+0x3a>
 80061a2:	69eb      	ldr	r3, [r5, #28]
 80061a4:	6862      	ldr	r2, [r4, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061ac:	6021      	str	r1, [r4, #0]
 80061ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	080076f9 	.word	0x080076f9
 80061b8:	08007779 	.word	0x08007779

080061bc <__multadd>:
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	690d      	ldr	r5, [r1, #16]
 80061c2:	4607      	mov	r7, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461e      	mov	r6, r3
 80061c8:	f101 0c14 	add.w	ip, r1, #20
 80061cc:	2000      	movs	r0, #0
 80061ce:	f8dc 3000 	ldr.w	r3, [ip]
 80061d2:	b299      	uxth	r1, r3
 80061d4:	fb02 6101 	mla	r1, r2, r1, r6
 80061d8:	0c1e      	lsrs	r6, r3, #16
 80061da:	0c0b      	lsrs	r3, r1, #16
 80061dc:	fb02 3306 	mla	r3, r2, r6, r3
 80061e0:	b289      	uxth	r1, r1
 80061e2:	3001      	adds	r0, #1
 80061e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e8:	4285      	cmp	r5, r0
 80061ea:	f84c 1b04 	str.w	r1, [ip], #4
 80061ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061f2:	dcec      	bgt.n	80061ce <__multadd+0x12>
 80061f4:	b30e      	cbz	r6, 800623a <__multadd+0x7e>
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dc19      	bgt.n	8006230 <__multadd+0x74>
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	4638      	mov	r0, r7
 8006200:	3101      	adds	r1, #1
 8006202:	f7ff ff79 	bl	80060f8 <_Balloc>
 8006206:	4680      	mov	r8, r0
 8006208:	b928      	cbnz	r0, 8006216 <__multadd+0x5a>
 800620a:	4602      	mov	r2, r0
 800620c:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <__multadd+0x84>)
 800620e:	480d      	ldr	r0, [pc, #52]	@ (8006244 <__multadd+0x88>)
 8006210:	21ba      	movs	r1, #186	@ 0xba
 8006212:	f000 fbbd 	bl	8006990 <__assert_func>
 8006216:	6922      	ldr	r2, [r4, #16]
 8006218:	3202      	adds	r2, #2
 800621a:	f104 010c 	add.w	r1, r4, #12
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	300c      	adds	r0, #12
 8006222:	f000 fba7 	bl	8006974 <memcpy>
 8006226:	4621      	mov	r1, r4
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ffa5 	bl	8006178 <_Bfree>
 800622e:	4644      	mov	r4, r8
 8006230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006234:	3501      	adds	r5, #1
 8006236:	615e      	str	r6, [r3, #20]
 8006238:	6125      	str	r5, [r4, #16]
 800623a:	4620      	mov	r0, r4
 800623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006240:	08007768 	.word	0x08007768
 8006244:	08007779 	.word	0x08007779

08006248 <__hi0bits>:
 8006248:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800624c:	4603      	mov	r3, r0
 800624e:	bf36      	itet	cc
 8006250:	0403      	lslcc	r3, r0, #16
 8006252:	2000      	movcs	r0, #0
 8006254:	2010      	movcc	r0, #16
 8006256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800625a:	bf3c      	itt	cc
 800625c:	021b      	lslcc	r3, r3, #8
 800625e:	3008      	addcc	r0, #8
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006264:	bf3c      	itt	cc
 8006266:	011b      	lslcc	r3, r3, #4
 8006268:	3004      	addcc	r0, #4
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	bf3c      	itt	cc
 8006270:	009b      	lslcc	r3, r3, #2
 8006272:	3002      	addcc	r0, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	db05      	blt.n	8006284 <__hi0bits+0x3c>
 8006278:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800627c:	f100 0001 	add.w	r0, r0, #1
 8006280:	bf08      	it	eq
 8006282:	2020      	moveq	r0, #32
 8006284:	4770      	bx	lr

08006286 <__lo0bits>:
 8006286:	6803      	ldr	r3, [r0, #0]
 8006288:	4602      	mov	r2, r0
 800628a:	f013 0007 	ands.w	r0, r3, #7
 800628e:	d00b      	beq.n	80062a8 <__lo0bits+0x22>
 8006290:	07d9      	lsls	r1, r3, #31
 8006292:	d421      	bmi.n	80062d8 <__lo0bits+0x52>
 8006294:	0798      	lsls	r0, r3, #30
 8006296:	bf49      	itett	mi
 8006298:	085b      	lsrmi	r3, r3, #1
 800629a:	089b      	lsrpl	r3, r3, #2
 800629c:	2001      	movmi	r0, #1
 800629e:	6013      	strmi	r3, [r2, #0]
 80062a0:	bf5c      	itt	pl
 80062a2:	6013      	strpl	r3, [r2, #0]
 80062a4:	2002      	movpl	r0, #2
 80062a6:	4770      	bx	lr
 80062a8:	b299      	uxth	r1, r3
 80062aa:	b909      	cbnz	r1, 80062b0 <__lo0bits+0x2a>
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	2010      	movs	r0, #16
 80062b0:	b2d9      	uxtb	r1, r3
 80062b2:	b909      	cbnz	r1, 80062b8 <__lo0bits+0x32>
 80062b4:	3008      	adds	r0, #8
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	0719      	lsls	r1, r3, #28
 80062ba:	bf04      	itt	eq
 80062bc:	091b      	lsreq	r3, r3, #4
 80062be:	3004      	addeq	r0, #4
 80062c0:	0799      	lsls	r1, r3, #30
 80062c2:	bf04      	itt	eq
 80062c4:	089b      	lsreq	r3, r3, #2
 80062c6:	3002      	addeq	r0, #2
 80062c8:	07d9      	lsls	r1, r3, #31
 80062ca:	d403      	bmi.n	80062d4 <__lo0bits+0x4e>
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	f100 0001 	add.w	r0, r0, #1
 80062d2:	d003      	beq.n	80062dc <__lo0bits+0x56>
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4770      	bx	lr
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
 80062dc:	2020      	movs	r0, #32
 80062de:	4770      	bx	lr

080062e0 <__i2b>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	2101      	movs	r1, #1
 80062e6:	f7ff ff07 	bl	80060f8 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__i2b+0x1a>
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <__i2b+0x24>)
 80062f0:	4805      	ldr	r0, [pc, #20]	@ (8006308 <__i2b+0x28>)
 80062f2:	f240 1145 	movw	r1, #325	@ 0x145
 80062f6:	f000 fb4b 	bl	8006990 <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	6144      	str	r4, [r0, #20]
 80062fe:	6103      	str	r3, [r0, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	08007768 	.word	0x08007768
 8006308:	08007779 	.word	0x08007779

0800630c <__multiply>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4614      	mov	r4, r2
 8006312:	690a      	ldr	r2, [r1, #16]
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	bfa8      	it	ge
 800631a:	4623      	movge	r3, r4
 800631c:	460f      	mov	r7, r1
 800631e:	bfa4      	itt	ge
 8006320:	460c      	movge	r4, r1
 8006322:	461f      	movge	r7, r3
 8006324:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006328:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	6861      	ldr	r1, [r4, #4]
 8006330:	eb0a 0609 	add.w	r6, sl, r9
 8006334:	42b3      	cmp	r3, r6
 8006336:	b085      	sub	sp, #20
 8006338:	bfb8      	it	lt
 800633a:	3101      	addlt	r1, #1
 800633c:	f7ff fedc 	bl	80060f8 <_Balloc>
 8006340:	b930      	cbnz	r0, 8006350 <__multiply+0x44>
 8006342:	4602      	mov	r2, r0
 8006344:	4b44      	ldr	r3, [pc, #272]	@ (8006458 <__multiply+0x14c>)
 8006346:	4845      	ldr	r0, [pc, #276]	@ (800645c <__multiply+0x150>)
 8006348:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800634c:	f000 fb20 	bl	8006990 <__assert_func>
 8006350:	f100 0514 	add.w	r5, r0, #20
 8006354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006358:	462b      	mov	r3, r5
 800635a:	2200      	movs	r2, #0
 800635c:	4543      	cmp	r3, r8
 800635e:	d321      	bcc.n	80063a4 <__multiply+0x98>
 8006360:	f107 0114 	add.w	r1, r7, #20
 8006364:	f104 0214 	add.w	r2, r4, #20
 8006368:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800636c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	1b13      	subs	r3, r2, r4
 8006374:	3b15      	subs	r3, #21
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	3304      	adds	r3, #4
 800637c:	f104 0715 	add.w	r7, r4, #21
 8006380:	42ba      	cmp	r2, r7
 8006382:	bf38      	it	cc
 8006384:	2304      	movcc	r3, #4
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	428b      	cmp	r3, r1
 800638e:	d80c      	bhi.n	80063aa <__multiply+0x9e>
 8006390:	2e00      	cmp	r6, #0
 8006392:	dd03      	ble.n	800639c <__multiply+0x90>
 8006394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05b      	beq.n	8006454 <__multiply+0x148>
 800639c:	6106      	str	r6, [r0, #16]
 800639e:	b005      	add	sp, #20
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	e7d8      	b.n	800635c <__multiply+0x50>
 80063aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	d024      	beq.n	80063fe <__multiply+0xf2>
 80063b4:	f104 0e14 	add.w	lr, r4, #20
 80063b8:	46a9      	mov	r9, r5
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063c2:	f8d9 3000 	ldr.w	r3, [r9]
 80063c6:	fa1f fb87 	uxth.w	fp, r7
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80063d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80063d4:	f8d9 7000 	ldr.w	r7, [r9]
 80063d8:	4463      	add	r3, ip
 80063da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063de:	fb0a c70b 	mla	r7, sl, fp, ip
 80063e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063ec:	4572      	cmp	r2, lr
 80063ee:	f849 3b04 	str.w	r3, [r9], #4
 80063f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063f6:	d8e2      	bhi.n	80063be <__multiply+0xb2>
 80063f8:	9b01      	ldr	r3, [sp, #4]
 80063fa:	f845 c003 	str.w	ip, [r5, r3]
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006404:	3104      	adds	r1, #4
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d021      	beq.n	8006450 <__multiply+0x144>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	f104 0c14 	add.w	ip, r4, #20
 8006412:	46ae      	mov	lr, r5
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	f8bc b000 	ldrh.w	fp, [ip]
 800641c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006420:	fb09 770b 	mla	r7, r9, fp, r7
 8006424:	4457      	add	r7, sl
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800642c:	f84e 3b04 	str.w	r3, [lr], #4
 8006430:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006434:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006438:	f8be 3000 	ldrh.w	r3, [lr]
 800643c:	fb09 330a 	mla	r3, r9, sl, r3
 8006440:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006444:	4562      	cmp	r2, ip
 8006446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800644a:	d8e5      	bhi.n	8006418 <__multiply+0x10c>
 800644c:	9f01      	ldr	r7, [sp, #4]
 800644e:	51eb      	str	r3, [r5, r7]
 8006450:	3504      	adds	r5, #4
 8006452:	e799      	b.n	8006388 <__multiply+0x7c>
 8006454:	3e01      	subs	r6, #1
 8006456:	e79b      	b.n	8006390 <__multiply+0x84>
 8006458:	08007768 	.word	0x08007768
 800645c:	08007779 	.word	0x08007779

08006460 <__pow5mult>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4615      	mov	r5, r2
 8006466:	f012 0203 	ands.w	r2, r2, #3
 800646a:	4607      	mov	r7, r0
 800646c:	460e      	mov	r6, r1
 800646e:	d007      	beq.n	8006480 <__pow5mult+0x20>
 8006470:	4c25      	ldr	r4, [pc, #148]	@ (8006508 <__pow5mult+0xa8>)
 8006472:	3a01      	subs	r2, #1
 8006474:	2300      	movs	r3, #0
 8006476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647a:	f7ff fe9f 	bl	80061bc <__multadd>
 800647e:	4606      	mov	r6, r0
 8006480:	10ad      	asrs	r5, r5, #2
 8006482:	d03d      	beq.n	8006500 <__pow5mult+0xa0>
 8006484:	69fc      	ldr	r4, [r7, #28]
 8006486:	b97c      	cbnz	r4, 80064a8 <__pow5mult+0x48>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff fd7f 	bl	8005f8c <malloc>
 800648e:	4602      	mov	r2, r0
 8006490:	61f8      	str	r0, [r7, #28]
 8006492:	b928      	cbnz	r0, 80064a0 <__pow5mult+0x40>
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <__pow5mult+0xac>)
 8006496:	481e      	ldr	r0, [pc, #120]	@ (8006510 <__pow5mult+0xb0>)
 8006498:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800649c:	f000 fa78 	bl	8006990 <__assert_func>
 80064a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a4:	6004      	str	r4, [r0, #0]
 80064a6:	60c4      	str	r4, [r0, #12]
 80064a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b0:	b94c      	cbnz	r4, 80064c6 <__pow5mult+0x66>
 80064b2:	f240 2171 	movw	r1, #625	@ 0x271
 80064b6:	4638      	mov	r0, r7
 80064b8:	f7ff ff12 	bl	80062e0 <__i2b>
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c2:	4604      	mov	r4, r0
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	07eb      	lsls	r3, r5, #31
 80064cc:	d50a      	bpl.n	80064e4 <__pow5mult+0x84>
 80064ce:	4631      	mov	r1, r6
 80064d0:	4622      	mov	r2, r4
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff ff1a 	bl	800630c <__multiply>
 80064d8:	4631      	mov	r1, r6
 80064da:	4680      	mov	r8, r0
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff fe4b 	bl	8006178 <_Bfree>
 80064e2:	4646      	mov	r6, r8
 80064e4:	106d      	asrs	r5, r5, #1
 80064e6:	d00b      	beq.n	8006500 <__pow5mult+0xa0>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	b938      	cbnz	r0, 80064fc <__pow5mult+0x9c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4621      	mov	r1, r4
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff ff0b 	bl	800630c <__multiply>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	f8c0 9000 	str.w	r9, [r0]
 80064fc:	4604      	mov	r4, r0
 80064fe:	e7e4      	b.n	80064ca <__pow5mult+0x6a>
 8006500:	4630      	mov	r0, r6
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	080077d4 	.word	0x080077d4
 800650c:	080076f9 	.word	0x080076f9
 8006510:	08007779 	.word	0x08007779

08006514 <__lshift>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	460c      	mov	r4, r1
 800651a:	6849      	ldr	r1, [r1, #4]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	4607      	mov	r7, r0
 8006526:	4691      	mov	r9, r2
 8006528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800652c:	f108 0601 	add.w	r6, r8, #1
 8006530:	42b3      	cmp	r3, r6
 8006532:	db0b      	blt.n	800654c <__lshift+0x38>
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fddf 	bl	80060f8 <_Balloc>
 800653a:	4605      	mov	r5, r0
 800653c:	b948      	cbnz	r0, 8006552 <__lshift+0x3e>
 800653e:	4602      	mov	r2, r0
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <__lshift+0xd0>)
 8006542:	4829      	ldr	r0, [pc, #164]	@ (80065e8 <__lshift+0xd4>)
 8006544:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006548:	f000 fa22 	bl	8006990 <__assert_func>
 800654c:	3101      	adds	r1, #1
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	e7ee      	b.n	8006530 <__lshift+0x1c>
 8006552:	2300      	movs	r3, #0
 8006554:	f100 0114 	add.w	r1, r0, #20
 8006558:	f100 0210 	add.w	r2, r0, #16
 800655c:	4618      	mov	r0, r3
 800655e:	4553      	cmp	r3, sl
 8006560:	db33      	blt.n	80065ca <__lshift+0xb6>
 8006562:	6920      	ldr	r0, [r4, #16]
 8006564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	f019 091f 	ands.w	r9, r9, #31
 8006570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006578:	d02b      	beq.n	80065d2 <__lshift+0xbe>
 800657a:	f1c9 0e20 	rsb	lr, r9, #32
 800657e:	468a      	mov	sl, r1
 8006580:	2200      	movs	r2, #0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	fa00 f009 	lsl.w	r0, r0, r9
 8006588:	4310      	orrs	r0, r2
 800658a:	f84a 0b04 	str.w	r0, [sl], #4
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	459c      	cmp	ip, r3
 8006594:	fa22 f20e 	lsr.w	r2, r2, lr
 8006598:	d8f3      	bhi.n	8006582 <__lshift+0x6e>
 800659a:	ebac 0304 	sub.w	r3, ip, r4
 800659e:	3b15      	subs	r3, #21
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	3304      	adds	r3, #4
 80065a6:	f104 0015 	add.w	r0, r4, #21
 80065aa:	4584      	cmp	ip, r0
 80065ac:	bf38      	it	cc
 80065ae:	2304      	movcc	r3, #4
 80065b0:	50ca      	str	r2, [r1, r3]
 80065b2:	b10a      	cbz	r2, 80065b8 <__lshift+0xa4>
 80065b4:	f108 0602 	add.w	r6, r8, #2
 80065b8:	3e01      	subs	r6, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	612e      	str	r6, [r5, #16]
 80065be:	4621      	mov	r1, r4
 80065c0:	f7ff fdda 	bl	8006178 <_Bfree>
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ce:	3301      	adds	r3, #1
 80065d0:	e7c5      	b.n	800655e <__lshift+0x4a>
 80065d2:	3904      	subs	r1, #4
 80065d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065dc:	459c      	cmp	ip, r3
 80065de:	d8f9      	bhi.n	80065d4 <__lshift+0xc0>
 80065e0:	e7ea      	b.n	80065b8 <__lshift+0xa4>
 80065e2:	bf00      	nop
 80065e4:	08007768 	.word	0x08007768
 80065e8:	08007779 	.word	0x08007779

080065ec <__mcmp>:
 80065ec:	690a      	ldr	r2, [r1, #16]
 80065ee:	4603      	mov	r3, r0
 80065f0:	6900      	ldr	r0, [r0, #16]
 80065f2:	1a80      	subs	r0, r0, r2
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	d10e      	bne.n	8006616 <__mcmp+0x2a>
 80065f8:	3314      	adds	r3, #20
 80065fa:	3114      	adds	r1, #20
 80065fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006600:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800660c:	4295      	cmp	r5, r2
 800660e:	d003      	beq.n	8006618 <__mcmp+0x2c>
 8006610:	d205      	bcs.n	800661e <__mcmp+0x32>
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	bd30      	pop	{r4, r5, pc}
 8006618:	42a3      	cmp	r3, r4
 800661a:	d3f3      	bcc.n	8006604 <__mcmp+0x18>
 800661c:	e7fb      	b.n	8006616 <__mcmp+0x2a>
 800661e:	2001      	movs	r0, #1
 8006620:	e7f9      	b.n	8006616 <__mcmp+0x2a>
	...

08006624 <__mdiff>:
 8006624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	4689      	mov	r9, r1
 800662a:	4606      	mov	r6, r0
 800662c:	4611      	mov	r1, r2
 800662e:	4648      	mov	r0, r9
 8006630:	4614      	mov	r4, r2
 8006632:	f7ff ffdb 	bl	80065ec <__mcmp>
 8006636:	1e05      	subs	r5, r0, #0
 8006638:	d112      	bne.n	8006660 <__mdiff+0x3c>
 800663a:	4629      	mov	r1, r5
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff fd5b 	bl	80060f8 <_Balloc>
 8006642:	4602      	mov	r2, r0
 8006644:	b928      	cbnz	r0, 8006652 <__mdiff+0x2e>
 8006646:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <__mdiff+0x120>)
 8006648:	f240 2137 	movw	r1, #567	@ 0x237
 800664c:	483e      	ldr	r0, [pc, #248]	@ (8006748 <__mdiff+0x124>)
 800664e:	f000 f99f 	bl	8006990 <__assert_func>
 8006652:	2301      	movs	r3, #1
 8006654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006658:	4610      	mov	r0, r2
 800665a:	b003      	add	sp, #12
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	bfbc      	itt	lt
 8006662:	464b      	movlt	r3, r9
 8006664:	46a1      	movlt	r9, r4
 8006666:	4630      	mov	r0, r6
 8006668:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800666c:	bfba      	itte	lt
 800666e:	461c      	movlt	r4, r3
 8006670:	2501      	movlt	r5, #1
 8006672:	2500      	movge	r5, #0
 8006674:	f7ff fd40 	bl	80060f8 <_Balloc>
 8006678:	4602      	mov	r2, r0
 800667a:	b918      	cbnz	r0, 8006684 <__mdiff+0x60>
 800667c:	4b31      	ldr	r3, [pc, #196]	@ (8006744 <__mdiff+0x120>)
 800667e:	f240 2145 	movw	r1, #581	@ 0x245
 8006682:	e7e3      	b.n	800664c <__mdiff+0x28>
 8006684:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006688:	6926      	ldr	r6, [r4, #16]
 800668a:	60c5      	str	r5, [r0, #12]
 800668c:	f109 0310 	add.w	r3, r9, #16
 8006690:	f109 0514 	add.w	r5, r9, #20
 8006694:	f104 0e14 	add.w	lr, r4, #20
 8006698:	f100 0b14 	add.w	fp, r0, #20
 800669c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	46d9      	mov	r9, fp
 80066a8:	f04f 0c00 	mov.w	ip, #0
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	fa1f f38a 	uxth.w	r3, sl
 80066bc:	4619      	mov	r1, r3
 80066be:	b283      	uxth	r3, r0
 80066c0:	1acb      	subs	r3, r1, r3
 80066c2:	0c00      	lsrs	r0, r0, #16
 80066c4:	4463      	add	r3, ip
 80066c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066d4:	4576      	cmp	r6, lr
 80066d6:	f849 3b04 	str.w	r3, [r9], #4
 80066da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066de:	d8e5      	bhi.n	80066ac <__mdiff+0x88>
 80066e0:	1b33      	subs	r3, r6, r4
 80066e2:	3b15      	subs	r3, #21
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	3415      	adds	r4, #21
 80066ea:	3304      	adds	r3, #4
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	441d      	add	r5, r3
 80066f4:	445b      	add	r3, fp
 80066f6:	461e      	mov	r6, r3
 80066f8:	462c      	mov	r4, r5
 80066fa:	4544      	cmp	r4, r8
 80066fc:	d30e      	bcc.n	800671c <__mdiff+0xf8>
 80066fe:	f108 0103 	add.w	r1, r8, #3
 8006702:	1b49      	subs	r1, r1, r5
 8006704:	f021 0103 	bic.w	r1, r1, #3
 8006708:	3d03      	subs	r5, #3
 800670a:	45a8      	cmp	r8, r5
 800670c:	bf38      	it	cc
 800670e:	2100      	movcc	r1, #0
 8006710:	440b      	add	r3, r1
 8006712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006716:	b191      	cbz	r1, 800673e <__mdiff+0x11a>
 8006718:	6117      	str	r7, [r2, #16]
 800671a:	e79d      	b.n	8006658 <__mdiff+0x34>
 800671c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006720:	46e6      	mov	lr, ip
 8006722:	0c08      	lsrs	r0, r1, #16
 8006724:	fa1c fc81 	uxtah	ip, ip, r1
 8006728:	4471      	add	r1, lr
 800672a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800672e:	b289      	uxth	r1, r1
 8006730:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006734:	f846 1b04 	str.w	r1, [r6], #4
 8006738:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800673c:	e7dd      	b.n	80066fa <__mdiff+0xd6>
 800673e:	3f01      	subs	r7, #1
 8006740:	e7e7      	b.n	8006712 <__mdiff+0xee>
 8006742:	bf00      	nop
 8006744:	08007768 	.word	0x08007768
 8006748:	08007779 	.word	0x08007779

0800674c <__d2b>:
 800674c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006750:	460f      	mov	r7, r1
 8006752:	2101      	movs	r1, #1
 8006754:	ec59 8b10 	vmov	r8, r9, d0
 8006758:	4616      	mov	r6, r2
 800675a:	f7ff fccd 	bl	80060f8 <_Balloc>
 800675e:	4604      	mov	r4, r0
 8006760:	b930      	cbnz	r0, 8006770 <__d2b+0x24>
 8006762:	4602      	mov	r2, r0
 8006764:	4b23      	ldr	r3, [pc, #140]	@ (80067f4 <__d2b+0xa8>)
 8006766:	4824      	ldr	r0, [pc, #144]	@ (80067f8 <__d2b+0xac>)
 8006768:	f240 310f 	movw	r1, #783	@ 0x30f
 800676c:	f000 f910 	bl	8006990 <__assert_func>
 8006770:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006778:	b10d      	cbz	r5, 800677e <__d2b+0x32>
 800677a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	f1b8 0300 	subs.w	r3, r8, #0
 8006784:	d023      	beq.n	80067ce <__d2b+0x82>
 8006786:	4668      	mov	r0, sp
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	f7ff fd7c 	bl	8006286 <__lo0bits>
 800678e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006792:	b1d0      	cbz	r0, 80067ca <__d2b+0x7e>
 8006794:	f1c0 0320 	rsb	r3, r0, #32
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	430b      	orrs	r3, r1
 800679e:	40c2      	lsrs	r2, r0
 80067a0:	6163      	str	r3, [r4, #20]
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf0c      	ite	eq
 80067ac:	2201      	moveq	r2, #1
 80067ae:	2202      	movne	r2, #2
 80067b0:	6122      	str	r2, [r4, #16]
 80067b2:	b1a5      	cbz	r5, 80067de <__d2b+0x92>
 80067b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067b8:	4405      	add	r5, r0
 80067ba:	603d      	str	r5, [r7, #0]
 80067bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067c0:	6030      	str	r0, [r6, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067ca:	6161      	str	r1, [r4, #20]
 80067cc:	e7ea      	b.n	80067a4 <__d2b+0x58>
 80067ce:	a801      	add	r0, sp, #4
 80067d0:	f7ff fd59 	bl	8006286 <__lo0bits>
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	6163      	str	r3, [r4, #20]
 80067d8:	3020      	adds	r0, #32
 80067da:	2201      	movs	r2, #1
 80067dc:	e7e8      	b.n	80067b0 <__d2b+0x64>
 80067de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067e6:	6038      	str	r0, [r7, #0]
 80067e8:	6918      	ldr	r0, [r3, #16]
 80067ea:	f7ff fd2d 	bl	8006248 <__hi0bits>
 80067ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067f2:	e7e5      	b.n	80067c0 <__d2b+0x74>
 80067f4:	08007768 	.word	0x08007768
 80067f8:	08007779 	.word	0x08007779

080067fc <__sflush_r>:
 80067fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006804:	0716      	lsls	r6, r2, #28
 8006806:	4605      	mov	r5, r0
 8006808:	460c      	mov	r4, r1
 800680a:	d454      	bmi.n	80068b6 <__sflush_r+0xba>
 800680c:	684b      	ldr	r3, [r1, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dc02      	bgt.n	8006818 <__sflush_r+0x1c>
 8006812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd48      	ble.n	80068aa <__sflush_r+0xae>
 8006818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800681a:	2e00      	cmp	r6, #0
 800681c:	d045      	beq.n	80068aa <__sflush_r+0xae>
 800681e:	2300      	movs	r3, #0
 8006820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006824:	682f      	ldr	r7, [r5, #0]
 8006826:	6a21      	ldr	r1, [r4, #32]
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	d030      	beq.n	800688e <__sflush_r+0x92>
 800682c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	0759      	lsls	r1, r3, #29
 8006832:	d505      	bpl.n	8006840 <__sflush_r+0x44>
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800683a:	b10b      	cbz	r3, 8006840 <__sflush_r+0x44>
 800683c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006844:	6a21      	ldr	r1, [r4, #32]
 8006846:	4628      	mov	r0, r5
 8006848:	47b0      	blx	r6
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	d106      	bne.n	800685e <__sflush_r+0x62>
 8006850:	6829      	ldr	r1, [r5, #0]
 8006852:	291d      	cmp	r1, #29
 8006854:	d82b      	bhi.n	80068ae <__sflush_r+0xb2>
 8006856:	4a2a      	ldr	r2, [pc, #168]	@ (8006900 <__sflush_r+0x104>)
 8006858:	410a      	asrs	r2, r1
 800685a:	07d6      	lsls	r6, r2, #31
 800685c:	d427      	bmi.n	80068ae <__sflush_r+0xb2>
 800685e:	2200      	movs	r2, #0
 8006860:	6062      	str	r2, [r4, #4]
 8006862:	04d9      	lsls	r1, r3, #19
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	6022      	str	r2, [r4, #0]
 8006868:	d504      	bpl.n	8006874 <__sflush_r+0x78>
 800686a:	1c42      	adds	r2, r0, #1
 800686c:	d101      	bne.n	8006872 <__sflush_r+0x76>
 800686e:	682b      	ldr	r3, [r5, #0]
 8006870:	b903      	cbnz	r3, 8006874 <__sflush_r+0x78>
 8006872:	6560      	str	r0, [r4, #84]	@ 0x54
 8006874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006876:	602f      	str	r7, [r5, #0]
 8006878:	b1b9      	cbz	r1, 80068aa <__sflush_r+0xae>
 800687a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800687e:	4299      	cmp	r1, r3
 8006880:	d002      	beq.n	8006888 <__sflush_r+0x8c>
 8006882:	4628      	mov	r0, r5
 8006884:	f7ff fb38 	bl	8005ef8 <_free_r>
 8006888:	2300      	movs	r3, #0
 800688a:	6363      	str	r3, [r4, #52]	@ 0x34
 800688c:	e00d      	b.n	80068aa <__sflush_r+0xae>
 800688e:	2301      	movs	r3, #1
 8006890:	4628      	mov	r0, r5
 8006892:	47b0      	blx	r6
 8006894:	4602      	mov	r2, r0
 8006896:	1c50      	adds	r0, r2, #1
 8006898:	d1c9      	bne.n	800682e <__sflush_r+0x32>
 800689a:	682b      	ldr	r3, [r5, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0c6      	beq.n	800682e <__sflush_r+0x32>
 80068a0:	2b1d      	cmp	r3, #29
 80068a2:	d001      	beq.n	80068a8 <__sflush_r+0xac>
 80068a4:	2b16      	cmp	r3, #22
 80068a6:	d11e      	bne.n	80068e6 <__sflush_r+0xea>
 80068a8:	602f      	str	r7, [r5, #0]
 80068aa:	2000      	movs	r0, #0
 80068ac:	e022      	b.n	80068f4 <__sflush_r+0xf8>
 80068ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068b2:	b21b      	sxth	r3, r3
 80068b4:	e01b      	b.n	80068ee <__sflush_r+0xf2>
 80068b6:	690f      	ldr	r7, [r1, #16]
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	d0f6      	beq.n	80068aa <__sflush_r+0xae>
 80068bc:	0793      	lsls	r3, r2, #30
 80068be:	680e      	ldr	r6, [r1, #0]
 80068c0:	bf08      	it	eq
 80068c2:	694b      	ldreq	r3, [r1, #20]
 80068c4:	600f      	str	r7, [r1, #0]
 80068c6:	bf18      	it	ne
 80068c8:	2300      	movne	r3, #0
 80068ca:	eba6 0807 	sub.w	r8, r6, r7
 80068ce:	608b      	str	r3, [r1, #8]
 80068d0:	f1b8 0f00 	cmp.w	r8, #0
 80068d4:	dde9      	ble.n	80068aa <__sflush_r+0xae>
 80068d6:	6a21      	ldr	r1, [r4, #32]
 80068d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068da:	4643      	mov	r3, r8
 80068dc:	463a      	mov	r2, r7
 80068de:	4628      	mov	r0, r5
 80068e0:	47b0      	blx	r6
 80068e2:	2800      	cmp	r0, #0
 80068e4:	dc08      	bgt.n	80068f8 <__sflush_r+0xfc>
 80068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f8:	4407      	add	r7, r0
 80068fa:	eba8 0800 	sub.w	r8, r8, r0
 80068fe:	e7e7      	b.n	80068d0 <__sflush_r+0xd4>
 8006900:	dfbffffe 	.word	0xdfbffffe

08006904 <_fflush_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	690b      	ldr	r3, [r1, #16]
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b913      	cbnz	r3, 8006914 <_fflush_r+0x10>
 800690e:	2500      	movs	r5, #0
 8006910:	4628      	mov	r0, r5
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	b118      	cbz	r0, 800691e <_fflush_r+0x1a>
 8006916:	6a03      	ldr	r3, [r0, #32]
 8006918:	b90b      	cbnz	r3, 800691e <_fflush_r+0x1a>
 800691a:	f7fe fba5 	bl	8005068 <__sinit>
 800691e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f3      	beq.n	800690e <_fflush_r+0xa>
 8006926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006928:	07d0      	lsls	r0, r2, #31
 800692a:	d404      	bmi.n	8006936 <_fflush_r+0x32>
 800692c:	0599      	lsls	r1, r3, #22
 800692e:	d402      	bmi.n	8006936 <_fflush_r+0x32>
 8006930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006932:	f7fe fc90 	bl	8005256 <__retarget_lock_acquire_recursive>
 8006936:	4628      	mov	r0, r5
 8006938:	4621      	mov	r1, r4
 800693a:	f7ff ff5f 	bl	80067fc <__sflush_r>
 800693e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006940:	07da      	lsls	r2, r3, #31
 8006942:	4605      	mov	r5, r0
 8006944:	d4e4      	bmi.n	8006910 <_fflush_r+0xc>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	059b      	lsls	r3, r3, #22
 800694a:	d4e1      	bmi.n	8006910 <_fflush_r+0xc>
 800694c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800694e:	f7fe fc83 	bl	8005258 <__retarget_lock_release_recursive>
 8006952:	e7dd      	b.n	8006910 <_fflush_r+0xc>

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	@ (8006970 <_sbrk_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fb f9d8 	bl	8001d14 <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000620 	.word	0x20000620

08006974 <memcpy>:
 8006974:	440a      	add	r2, r1
 8006976:	4291      	cmp	r1, r2
 8006978:	f100 33ff 	add.w	r3, r0, #4294967295
 800697c:	d100      	bne.n	8006980 <memcpy+0xc>
 800697e:	4770      	bx	lr
 8006980:	b510      	push	{r4, lr}
 8006982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698a:	4291      	cmp	r1, r2
 800698c:	d1f9      	bne.n	8006982 <memcpy+0xe>
 800698e:	bd10      	pop	{r4, pc}

08006990 <__assert_func>:
 8006990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006992:	4614      	mov	r4, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <__assert_func+0x2c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4605      	mov	r5, r0
 800699c:	68d8      	ldr	r0, [r3, #12]
 800699e:	b954      	cbnz	r4, 80069b6 <__assert_func+0x26>
 80069a0:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <__assert_func+0x30>)
 80069a2:	461c      	mov	r4, r3
 80069a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069a8:	9100      	str	r1, [sp, #0]
 80069aa:	462b      	mov	r3, r5
 80069ac:	4905      	ldr	r1, [pc, #20]	@ (80069c4 <__assert_func+0x34>)
 80069ae:	f000 f841 	bl	8006a34 <fiprintf>
 80069b2:	f000 f851 	bl	8006a58 <abort>
 80069b6:	4b04      	ldr	r3, [pc, #16]	@ (80069c8 <__assert_func+0x38>)
 80069b8:	e7f4      	b.n	80069a4 <__assert_func+0x14>
 80069ba:	bf00      	nop
 80069bc:	20000018 	.word	0x20000018
 80069c0:	08007915 	.word	0x08007915
 80069c4:	080078e7 	.word	0x080078e7
 80069c8:	080078da 	.word	0x080078da

080069cc <_calloc_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	fba1 5402 	umull	r5, r4, r1, r2
 80069d2:	b93c      	cbnz	r4, 80069e4 <_calloc_r+0x18>
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7ff fb03 	bl	8005fe0 <_malloc_r>
 80069da:	4606      	mov	r6, r0
 80069dc:	b928      	cbnz	r0, 80069ea <_calloc_r+0x1e>
 80069de:	2600      	movs	r6, #0
 80069e0:	4630      	mov	r0, r6
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	220c      	movs	r2, #12
 80069e6:	6002      	str	r2, [r0, #0]
 80069e8:	e7f9      	b.n	80069de <_calloc_r+0x12>
 80069ea:	462a      	mov	r2, r5
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7fe fbb4 	bl	800515a <memset>
 80069f2:	e7f5      	b.n	80069e0 <_calloc_r+0x14>

080069f4 <__ascii_mbtowc>:
 80069f4:	b082      	sub	sp, #8
 80069f6:	b901      	cbnz	r1, 80069fa <__ascii_mbtowc+0x6>
 80069f8:	a901      	add	r1, sp, #4
 80069fa:	b142      	cbz	r2, 8006a0e <__ascii_mbtowc+0x1a>
 80069fc:	b14b      	cbz	r3, 8006a12 <__ascii_mbtowc+0x1e>
 80069fe:	7813      	ldrb	r3, [r2, #0]
 8006a00:	600b      	str	r3, [r1, #0]
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	1e10      	subs	r0, r2, #0
 8006a06:	bf18      	it	ne
 8006a08:	2001      	movne	r0, #1
 8006a0a:	b002      	add	sp, #8
 8006a0c:	4770      	bx	lr
 8006a0e:	4610      	mov	r0, r2
 8006a10:	e7fb      	b.n	8006a0a <__ascii_mbtowc+0x16>
 8006a12:	f06f 0001 	mvn.w	r0, #1
 8006a16:	e7f8      	b.n	8006a0a <__ascii_mbtowc+0x16>

08006a18 <__ascii_wctomb>:
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	b141      	cbz	r1, 8006a30 <__ascii_wctomb+0x18>
 8006a1e:	2aff      	cmp	r2, #255	@ 0xff
 8006a20:	d904      	bls.n	8006a2c <__ascii_wctomb+0x14>
 8006a22:	228a      	movs	r2, #138	@ 0x8a
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	4770      	bx	lr
 8006a2c:	700a      	strb	r2, [r1, #0]
 8006a2e:	2001      	movs	r0, #1
 8006a30:	4770      	bx	lr
	...

08006a34 <fiprintf>:
 8006a34:	b40e      	push	{r1, r2, r3}
 8006a36:	b503      	push	{r0, r1, lr}
 8006a38:	4601      	mov	r1, r0
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	4805      	ldr	r0, [pc, #20]	@ (8006a54 <fiprintf+0x20>)
 8006a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	f000 f837 	bl	8006ab8 <_vfiprintf_r>
 8006a4a:	b002      	add	sp, #8
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	20000018 	.word	0x20000018

08006a58 <abort>:
 8006a58:	b508      	push	{r3, lr}
 8006a5a:	2006      	movs	r0, #6
 8006a5c:	f000 fa00 	bl	8006e60 <raise>
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7fb f8de 	bl	8001c22 <_exit>

08006a66 <__sfputc_r>:
 8006a66:	6893      	ldr	r3, [r2, #8]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	b410      	push	{r4}
 8006a6e:	6093      	str	r3, [r2, #8]
 8006a70:	da08      	bge.n	8006a84 <__sfputc_r+0x1e>
 8006a72:	6994      	ldr	r4, [r2, #24]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	db01      	blt.n	8006a7c <__sfputc_r+0x16>
 8006a78:	290a      	cmp	r1, #10
 8006a7a:	d103      	bne.n	8006a84 <__sfputc_r+0x1e>
 8006a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a80:	f000 b932 	b.w	8006ce8 <__swbuf_r>
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	1c58      	adds	r0, r3, #1
 8006a88:	6010      	str	r0, [r2, #0]
 8006a8a:	7019      	strb	r1, [r3, #0]
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <__sfputs_r>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	4614      	mov	r4, r2
 8006a9c:	18d5      	adds	r5, r2, r3
 8006a9e:	42ac      	cmp	r4, r5
 8006aa0:	d101      	bne.n	8006aa6 <__sfputs_r+0x12>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e007      	b.n	8006ab6 <__sfputs_r+0x22>
 8006aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aaa:	463a      	mov	r2, r7
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff ffda 	bl	8006a66 <__sfputc_r>
 8006ab2:	1c43      	adds	r3, r0, #1
 8006ab4:	d1f3      	bne.n	8006a9e <__sfputs_r+0xa>
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ab8 <_vfiprintf_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	460d      	mov	r5, r1
 8006abe:	b09d      	sub	sp, #116	@ 0x74
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	4698      	mov	r8, r3
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	b118      	cbz	r0, 8006ad0 <_vfiprintf_r+0x18>
 8006ac8:	6a03      	ldr	r3, [r0, #32]
 8006aca:	b90b      	cbnz	r3, 8006ad0 <_vfiprintf_r+0x18>
 8006acc:	f7fe facc 	bl	8005068 <__sinit>
 8006ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad2:	07d9      	lsls	r1, r3, #31
 8006ad4:	d405      	bmi.n	8006ae2 <_vfiprintf_r+0x2a>
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	059a      	lsls	r2, r3, #22
 8006ada:	d402      	bmi.n	8006ae2 <_vfiprintf_r+0x2a>
 8006adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ade:	f7fe fbba 	bl	8005256 <__retarget_lock_acquire_recursive>
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	071b      	lsls	r3, r3, #28
 8006ae6:	d501      	bpl.n	8006aec <_vfiprintf_r+0x34>
 8006ae8:	692b      	ldr	r3, [r5, #16]
 8006aea:	b99b      	cbnz	r3, 8006b14 <_vfiprintf_r+0x5c>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4630      	mov	r0, r6
 8006af0:	f000 f938 	bl	8006d64 <__swsetup_r>
 8006af4:	b170      	cbz	r0, 8006b14 <_vfiprintf_r+0x5c>
 8006af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006af8:	07dc      	lsls	r4, r3, #31
 8006afa:	d504      	bpl.n	8006b06 <_vfiprintf_r+0x4e>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b01d      	add	sp, #116	@ 0x74
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	0598      	lsls	r0, r3, #22
 8006b0a:	d4f7      	bmi.n	8006afc <_vfiprintf_r+0x44>
 8006b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b0e:	f7fe fba3 	bl	8005258 <__retarget_lock_release_recursive>
 8006b12:	e7f3      	b.n	8006afc <_vfiprintf_r+0x44>
 8006b14:	2300      	movs	r3, #0
 8006b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b22:	2330      	movs	r3, #48	@ 0x30
 8006b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cd4 <_vfiprintf_r+0x21c>
 8006b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b2c:	f04f 0901 	mov.w	r9, #1
 8006b30:	4623      	mov	r3, r4
 8006b32:	469a      	mov	sl, r3
 8006b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b38:	b10a      	cbz	r2, 8006b3e <_vfiprintf_r+0x86>
 8006b3a:	2a25      	cmp	r2, #37	@ 0x25
 8006b3c:	d1f9      	bne.n	8006b32 <_vfiprintf_r+0x7a>
 8006b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b42:	d00b      	beq.n	8006b5c <_vfiprintf_r+0xa4>
 8006b44:	465b      	mov	r3, fp
 8006b46:	4622      	mov	r2, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7ff ffa2 	bl	8006a94 <__sfputs_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	f000 80a7 	beq.w	8006ca4 <_vfiprintf_r+0x1ec>
 8006b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b58:	445a      	add	r2, fp
 8006b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 809f 	beq.w	8006ca4 <_vfiprintf_r+0x1ec>
 8006b66:	2300      	movs	r3, #0
 8006b68:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b70:	f10a 0a01 	add.w	sl, sl, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	9307      	str	r3, [sp, #28]
 8006b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b7e:	4654      	mov	r4, sl
 8006b80:	2205      	movs	r2, #5
 8006b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b86:	4853      	ldr	r0, [pc, #332]	@ (8006cd4 <_vfiprintf_r+0x21c>)
 8006b88:	f7f9 fb2a 	bl	80001e0 <memchr>
 8006b8c:	9a04      	ldr	r2, [sp, #16]
 8006b8e:	b9d8      	cbnz	r0, 8006bc8 <_vfiprintf_r+0x110>
 8006b90:	06d1      	lsls	r1, r2, #27
 8006b92:	bf44      	itt	mi
 8006b94:	2320      	movmi	r3, #32
 8006b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b9a:	0713      	lsls	r3, r2, #28
 8006b9c:	bf44      	itt	mi
 8006b9e:	232b      	movmi	r3, #43	@ 0x2b
 8006ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006baa:	d015      	beq.n	8006bd8 <_vfiprintf_r+0x120>
 8006bac:	9a07      	ldr	r2, [sp, #28]
 8006bae:	4654      	mov	r4, sl
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f04f 0c0a 	mov.w	ip, #10
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbc:	3b30      	subs	r3, #48	@ 0x30
 8006bbe:	2b09      	cmp	r3, #9
 8006bc0:	d94b      	bls.n	8006c5a <_vfiprintf_r+0x1a2>
 8006bc2:	b1b0      	cbz	r0, 8006bf2 <_vfiprintf_r+0x13a>
 8006bc4:	9207      	str	r2, [sp, #28]
 8006bc6:	e014      	b.n	8006bf2 <_vfiprintf_r+0x13a>
 8006bc8:	eba0 0308 	sub.w	r3, r0, r8
 8006bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	9304      	str	r3, [sp, #16]
 8006bd4:	46a2      	mov	sl, r4
 8006bd6:	e7d2      	b.n	8006b7e <_vfiprintf_r+0xc6>
 8006bd8:	9b03      	ldr	r3, [sp, #12]
 8006bda:	1d19      	adds	r1, r3, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	9103      	str	r1, [sp, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bfbb      	ittet	lt
 8006be4:	425b      	neglt	r3, r3
 8006be6:	f042 0202 	orrlt.w	r2, r2, #2
 8006bea:	9307      	strge	r3, [sp, #28]
 8006bec:	9307      	strlt	r3, [sp, #28]
 8006bee:	bfb8      	it	lt
 8006bf0:	9204      	strlt	r2, [sp, #16]
 8006bf2:	7823      	ldrb	r3, [r4, #0]
 8006bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bf6:	d10a      	bne.n	8006c0e <_vfiprintf_r+0x156>
 8006bf8:	7863      	ldrb	r3, [r4, #1]
 8006bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bfc:	d132      	bne.n	8006c64 <_vfiprintf_r+0x1ac>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	1d1a      	adds	r2, r3, #4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	9203      	str	r2, [sp, #12]
 8006c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c0a:	3402      	adds	r4, #2
 8006c0c:	9305      	str	r3, [sp, #20]
 8006c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ce4 <_vfiprintf_r+0x22c>
 8006c12:	7821      	ldrb	r1, [r4, #0]
 8006c14:	2203      	movs	r2, #3
 8006c16:	4650      	mov	r0, sl
 8006c18:	f7f9 fae2 	bl	80001e0 <memchr>
 8006c1c:	b138      	cbz	r0, 8006c2e <_vfiprintf_r+0x176>
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	eba0 000a 	sub.w	r0, r0, sl
 8006c24:	2240      	movs	r2, #64	@ 0x40
 8006c26:	4082      	lsls	r2, r0
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c32:	4829      	ldr	r0, [pc, #164]	@ (8006cd8 <_vfiprintf_r+0x220>)
 8006c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c38:	2206      	movs	r2, #6
 8006c3a:	f7f9 fad1 	bl	80001e0 <memchr>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d03f      	beq.n	8006cc2 <_vfiprintf_r+0x20a>
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <_vfiprintf_r+0x224>)
 8006c44:	bb1b      	cbnz	r3, 8006c8e <_vfiprintf_r+0x1d6>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	3307      	adds	r3, #7
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	3308      	adds	r3, #8
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c54:	443b      	add	r3, r7
 8006c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c58:	e76a      	b.n	8006b30 <_vfiprintf_r+0x78>
 8006c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c5e:	460c      	mov	r4, r1
 8006c60:	2001      	movs	r0, #1
 8006c62:	e7a8      	b.n	8006bb6 <_vfiprintf_r+0xfe>
 8006c64:	2300      	movs	r3, #0
 8006c66:	3401      	adds	r4, #1
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f04f 0c0a 	mov.w	ip, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c76:	3a30      	subs	r2, #48	@ 0x30
 8006c78:	2a09      	cmp	r2, #9
 8006c7a:	d903      	bls.n	8006c84 <_vfiprintf_r+0x1cc>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0c6      	beq.n	8006c0e <_vfiprintf_r+0x156>
 8006c80:	9105      	str	r1, [sp, #20]
 8006c82:	e7c4      	b.n	8006c0e <_vfiprintf_r+0x156>
 8006c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c88:	4604      	mov	r4, r0
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e7f0      	b.n	8006c70 <_vfiprintf_r+0x1b8>
 8006c8e:	ab03      	add	r3, sp, #12
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	462a      	mov	r2, r5
 8006c94:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <_vfiprintf_r+0x228>)
 8006c96:	a904      	add	r1, sp, #16
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7fd fda1 	bl	80047e0 <_printf_float>
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	1c78      	adds	r0, r7, #1
 8006ca2:	d1d6      	bne.n	8006c52 <_vfiprintf_r+0x19a>
 8006ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ca6:	07d9      	lsls	r1, r3, #31
 8006ca8:	d405      	bmi.n	8006cb6 <_vfiprintf_r+0x1fe>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	059a      	lsls	r2, r3, #22
 8006cae:	d402      	bmi.n	8006cb6 <_vfiprintf_r+0x1fe>
 8006cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cb2:	f7fe fad1 	bl	8005258 <__retarget_lock_release_recursive>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	065b      	lsls	r3, r3, #25
 8006cba:	f53f af1f 	bmi.w	8006afc <_vfiprintf_r+0x44>
 8006cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cc0:	e71e      	b.n	8006b00 <_vfiprintf_r+0x48>
 8006cc2:	ab03      	add	r3, sp, #12
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4b05      	ldr	r3, [pc, #20]	@ (8006ce0 <_vfiprintf_r+0x228>)
 8006cca:	a904      	add	r1, sp, #16
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7fe f81f 	bl	8004d10 <_printf_i>
 8006cd2:	e7e4      	b.n	8006c9e <_vfiprintf_r+0x1e6>
 8006cd4:	08007a17 	.word	0x08007a17
 8006cd8:	08007a21 	.word	0x08007a21
 8006cdc:	080047e1 	.word	0x080047e1
 8006ce0:	08006a95 	.word	0x08006a95
 8006ce4:	08007a1d 	.word	0x08007a1d

08006ce8 <__swbuf_r>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	460e      	mov	r6, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	4605      	mov	r5, r0
 8006cf0:	b118      	cbz	r0, 8006cfa <__swbuf_r+0x12>
 8006cf2:	6a03      	ldr	r3, [r0, #32]
 8006cf4:	b90b      	cbnz	r3, 8006cfa <__swbuf_r+0x12>
 8006cf6:	f7fe f9b7 	bl	8005068 <__sinit>
 8006cfa:	69a3      	ldr	r3, [r4, #24]
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	071a      	lsls	r2, r3, #28
 8006d02:	d501      	bpl.n	8006d08 <__swbuf_r+0x20>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	b943      	cbnz	r3, 8006d1a <__swbuf_r+0x32>
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 f82a 	bl	8006d64 <__swsetup_r>
 8006d10:	b118      	cbz	r0, 8006d1a <__swbuf_r+0x32>
 8006d12:	f04f 37ff 	mov.w	r7, #4294967295
 8006d16:	4638      	mov	r0, r7
 8006d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	1a98      	subs	r0, r3, r2
 8006d20:	6963      	ldr	r3, [r4, #20]
 8006d22:	b2f6      	uxtb	r6, r6
 8006d24:	4283      	cmp	r3, r0
 8006d26:	4637      	mov	r7, r6
 8006d28:	dc05      	bgt.n	8006d36 <__swbuf_r+0x4e>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f7ff fde9 	bl	8006904 <_fflush_r>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1ed      	bne.n	8006d12 <__swbuf_r+0x2a>
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	60a3      	str	r3, [r4, #8]
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	701e      	strb	r6, [r3, #0]
 8006d44:	6962      	ldr	r2, [r4, #20]
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d004      	beq.n	8006d56 <__swbuf_r+0x6e>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	07db      	lsls	r3, r3, #31
 8006d50:	d5e1      	bpl.n	8006d16 <__swbuf_r+0x2e>
 8006d52:	2e0a      	cmp	r6, #10
 8006d54:	d1df      	bne.n	8006d16 <__swbuf_r+0x2e>
 8006d56:	4621      	mov	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7ff fdd3 	bl	8006904 <_fflush_r>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0d9      	beq.n	8006d16 <__swbuf_r+0x2e>
 8006d62:	e7d6      	b.n	8006d12 <__swbuf_r+0x2a>

08006d64 <__swsetup_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4b29      	ldr	r3, [pc, #164]	@ (8006e0c <__swsetup_r+0xa8>)
 8006d68:	4605      	mov	r5, r0
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	b118      	cbz	r0, 8006d78 <__swsetup_r+0x14>
 8006d70:	6a03      	ldr	r3, [r0, #32]
 8006d72:	b90b      	cbnz	r3, 8006d78 <__swsetup_r+0x14>
 8006d74:	f7fe f978 	bl	8005068 <__sinit>
 8006d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7c:	0719      	lsls	r1, r3, #28
 8006d7e:	d422      	bmi.n	8006dc6 <__swsetup_r+0x62>
 8006d80:	06da      	lsls	r2, r3, #27
 8006d82:	d407      	bmi.n	8006d94 <__swsetup_r+0x30>
 8006d84:	2209      	movs	r2, #9
 8006d86:	602a      	str	r2, [r5, #0]
 8006d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d92:	e033      	b.n	8006dfc <__swsetup_r+0x98>
 8006d94:	0758      	lsls	r0, r3, #29
 8006d96:	d512      	bpl.n	8006dbe <__swsetup_r+0x5a>
 8006d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d9a:	b141      	cbz	r1, 8006dae <__swsetup_r+0x4a>
 8006d9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d002      	beq.n	8006daa <__swsetup_r+0x46>
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff f8a7 	bl	8005ef8 <_free_r>
 8006daa:	2300      	movs	r3, #0
 8006dac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	2300      	movs	r3, #0
 8006db8:	6063      	str	r3, [r4, #4]
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f043 0308 	orr.w	r3, r3, #8
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	b94b      	cbnz	r3, 8006dde <__swsetup_r+0x7a>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd4:	d003      	beq.n	8006dde <__swsetup_r+0x7a>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f883 	bl	8006ee4 <__smakebuf_r>
 8006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de2:	f013 0201 	ands.w	r2, r3, #1
 8006de6:	d00a      	beq.n	8006dfe <__swsetup_r+0x9a>
 8006de8:	2200      	movs	r2, #0
 8006dea:	60a2      	str	r2, [r4, #8]
 8006dec:	6962      	ldr	r2, [r4, #20]
 8006dee:	4252      	negs	r2, r2
 8006df0:	61a2      	str	r2, [r4, #24]
 8006df2:	6922      	ldr	r2, [r4, #16]
 8006df4:	b942      	cbnz	r2, 8006e08 <__swsetup_r+0xa4>
 8006df6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dfa:	d1c5      	bne.n	8006d88 <__swsetup_r+0x24>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	0799      	lsls	r1, r3, #30
 8006e00:	bf58      	it	pl
 8006e02:	6962      	ldrpl	r2, [r4, #20]
 8006e04:	60a2      	str	r2, [r4, #8]
 8006e06:	e7f4      	b.n	8006df2 <__swsetup_r+0x8e>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e7f7      	b.n	8006dfc <__swsetup_r+0x98>
 8006e0c:	20000018 	.word	0x20000018

08006e10 <_raise_r>:
 8006e10:	291f      	cmp	r1, #31
 8006e12:	b538      	push	{r3, r4, r5, lr}
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	d904      	bls.n	8006e24 <_raise_r+0x14>
 8006e1a:	2316      	movs	r3, #22
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e26:	b112      	cbz	r2, 8006e2e <_raise_r+0x1e>
 8006e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e2c:	b94b      	cbnz	r3, 8006e42 <_raise_r+0x32>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f830 	bl	8006e94 <_getpid_r>
 8006e34:	4622      	mov	r2, r4
 8006e36:	4601      	mov	r1, r0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f000 b817 	b.w	8006e70 <_kill_r>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d00a      	beq.n	8006e5c <_raise_r+0x4c>
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	d103      	bne.n	8006e52 <_raise_r+0x42>
 8006e4a:	2316      	movs	r3, #22
 8006e4c:	6003      	str	r3, [r0, #0]
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7e7      	b.n	8006e22 <_raise_r+0x12>
 8006e52:	2100      	movs	r1, #0
 8006e54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4798      	blx	r3
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7e0      	b.n	8006e22 <_raise_r+0x12>

08006e60 <raise>:
 8006e60:	4b02      	ldr	r3, [pc, #8]	@ (8006e6c <raise+0xc>)
 8006e62:	4601      	mov	r1, r0
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7ff bfd3 	b.w	8006e10 <_raise_r>
 8006e6a:	bf00      	nop
 8006e6c:	20000018 	.word	0x20000018

08006e70 <_kill_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	@ (8006e90 <_kill_r+0x20>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f7fa fec0 	bl	8001c02 <_kill>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d102      	bne.n	8006e8c <_kill_r+0x1c>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b103      	cbz	r3, 8006e8c <_kill_r+0x1c>
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000620 	.word	0x20000620

08006e94 <_getpid_r>:
 8006e94:	f7fa bead 	b.w	8001bf2 <_getpid>

08006e98 <__swhatbuf_r>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	b096      	sub	sp, #88	@ 0x58
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	461e      	mov	r6, r3
 8006ea8:	da0d      	bge.n	8006ec6 <__swhatbuf_r+0x2e>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2340      	movne	r3, #64	@ 0x40
 8006eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	6031      	str	r1, [r6, #0]
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	b016      	add	sp, #88	@ 0x58
 8006ec4:	bd70      	pop	{r4, r5, r6, pc}
 8006ec6:	466a      	mov	r2, sp
 8006ec8:	f000 f848 	bl	8006f5c <_fstat_r>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	dbec      	blt.n	8006eaa <__swhatbuf_r+0x12>
 8006ed0:	9901      	ldr	r1, [sp, #4]
 8006ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006eda:	4259      	negs	r1, r3
 8006edc:	4159      	adcs	r1, r3
 8006ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ee2:	e7eb      	b.n	8006ebc <__swhatbuf_r+0x24>

08006ee4 <__smakebuf_r>:
 8006ee4:	898b      	ldrh	r3, [r1, #12]
 8006ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee8:	079d      	lsls	r5, r3, #30
 8006eea:	4606      	mov	r6, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	d507      	bpl.n	8006f00 <__smakebuf_r+0x1c>
 8006ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	2301      	movs	r3, #1
 8006efa:	6163      	str	r3, [r4, #20]
 8006efc:	b003      	add	sp, #12
 8006efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f00:	ab01      	add	r3, sp, #4
 8006f02:	466a      	mov	r2, sp
 8006f04:	f7ff ffc8 	bl	8006e98 <__swhatbuf_r>
 8006f08:	9f00      	ldr	r7, [sp, #0]
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff f866 	bl	8005fe0 <_malloc_r>
 8006f14:	b948      	cbnz	r0, 8006f2a <__smakebuf_r+0x46>
 8006f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1a:	059a      	lsls	r2, r3, #22
 8006f1c:	d4ee      	bmi.n	8006efc <__smakebuf_r+0x18>
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	f043 0302 	orr.w	r3, r3, #2
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	e7e2      	b.n	8006ef0 <__smakebuf_r+0xc>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	6020      	str	r0, [r4, #0]
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f3a:	b15b      	cbz	r3, 8006f54 <__smakebuf_r+0x70>
 8006f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 f81d 	bl	8006f80 <_isatty_r>
 8006f46:	b128      	cbz	r0, 8006f54 <__smakebuf_r+0x70>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	431d      	orrs	r5, r3
 8006f58:	81a5      	strh	r5, [r4, #12]
 8006f5a:	e7cf      	b.n	8006efc <__smakebuf_r+0x18>

08006f5c <_fstat_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	@ (8006f7c <_fstat_r+0x20>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7fa feaa 	bl	8001cc2 <_fstat>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_fstat_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_fstat_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000620 	.word	0x20000620

08006f80 <_isatty_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d06      	ldr	r5, [pc, #24]	@ (8006f9c <_isatty_r+0x1c>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	f7fa fea9 	bl	8001ce2 <_isatty>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d102      	bne.n	8006f9a <_isatty_r+0x1a>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	b103      	cbz	r3, 8006f9a <_isatty_r+0x1a>
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	20000620 	.word	0x20000620

08006fa0 <atan2>:
 8006fa0:	f000 baaa 	b.w	80074f8 <__ieee754_atan2>

08006fa4 <sqrt>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	ed2d 8b02 	vpush	{d8}
 8006faa:	ec55 4b10 	vmov	r4, r5, d0
 8006fae:	f000 f9c7 	bl	8007340 <__ieee754_sqrt>
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	eeb0 8a40 	vmov.f32	s16, s0
 8006fbe:	eef0 8a60 	vmov.f32	s17, s1
 8006fc2:	f7f9 fdbb 	bl	8000b3c <__aeabi_dcmpun>
 8006fc6:	b990      	cbnz	r0, 8006fee <sqrt+0x4a>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 fd8c 	bl	8000aec <__aeabi_dcmplt>
 8006fd4:	b158      	cbz	r0, 8006fee <sqrt+0x4a>
 8006fd6:	f7fe f913 	bl	8005200 <__errno>
 8006fda:	2321      	movs	r3, #33	@ 0x21
 8006fdc:	6003      	str	r3, [r0, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f7f9 fc39 	bl	800085c <__aeabi_ddiv>
 8006fea:	ec41 0b18 	vmov	d8, r0, r1
 8006fee:	eeb0 0a48 	vmov.f32	s0, s16
 8006ff2:	eef0 0a68 	vmov.f32	s1, s17
 8006ff6:	ecbd 8b02 	vpop	{d8}
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	0000      	movs	r0, r0
	...

08007000 <atan>:
 8007000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ec55 4b10 	vmov	r4, r5, d0
 8007008:	4bbf      	ldr	r3, [pc, #764]	@ (8007308 <atan+0x308>)
 800700a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800700e:	429e      	cmp	r6, r3
 8007010:	46ab      	mov	fp, r5
 8007012:	d918      	bls.n	8007046 <atan+0x46>
 8007014:	4bbd      	ldr	r3, [pc, #756]	@ (800730c <atan+0x30c>)
 8007016:	429e      	cmp	r6, r3
 8007018:	d801      	bhi.n	800701e <atan+0x1e>
 800701a:	d109      	bne.n	8007030 <atan+0x30>
 800701c:	b144      	cbz	r4, 8007030 <atan+0x30>
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 f939 	bl	800029c <__adddf3>
 800702a:	4604      	mov	r4, r0
 800702c:	460d      	mov	r5, r1
 800702e:	e006      	b.n	800703e <atan+0x3e>
 8007030:	f1bb 0f00 	cmp.w	fp, #0
 8007034:	f340 812b 	ble.w	800728e <atan+0x28e>
 8007038:	a597      	add	r5, pc, #604	@ (adr r5, 8007298 <atan+0x298>)
 800703a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800703e:	ec45 4b10 	vmov	d0, r4, r5
 8007042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007046:	4bb2      	ldr	r3, [pc, #712]	@ (8007310 <atan+0x310>)
 8007048:	429e      	cmp	r6, r3
 800704a:	d813      	bhi.n	8007074 <atan+0x74>
 800704c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007050:	429e      	cmp	r6, r3
 8007052:	d80c      	bhi.n	800706e <atan+0x6e>
 8007054:	a392      	add	r3, pc, #584	@ (adr r3, 80072a0 <atan+0x2a0>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	4620      	mov	r0, r4
 800705c:	4629      	mov	r1, r5
 800705e:	f7f9 f91d 	bl	800029c <__adddf3>
 8007062:	4bac      	ldr	r3, [pc, #688]	@ (8007314 <atan+0x314>)
 8007064:	2200      	movs	r2, #0
 8007066:	f7f9 fd5f 	bl	8000b28 <__aeabi_dcmpgt>
 800706a:	2800      	cmp	r0, #0
 800706c:	d1e7      	bne.n	800703e <atan+0x3e>
 800706e:	f04f 3aff 	mov.w	sl, #4294967295
 8007072:	e029      	b.n	80070c8 <atan+0xc8>
 8007074:	f000 f95c 	bl	8007330 <fabs>
 8007078:	4ba7      	ldr	r3, [pc, #668]	@ (8007318 <atan+0x318>)
 800707a:	429e      	cmp	r6, r3
 800707c:	ec55 4b10 	vmov	r4, r5, d0
 8007080:	f200 80bc 	bhi.w	80071fc <atan+0x1fc>
 8007084:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007088:	429e      	cmp	r6, r3
 800708a:	f200 809e 	bhi.w	80071ca <atan+0x1ca>
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f7f9 f901 	bl	800029c <__adddf3>
 800709a:	4b9e      	ldr	r3, [pc, #632]	@ (8007314 <atan+0x314>)
 800709c:	2200      	movs	r2, #0
 800709e:	f7f9 f8fb 	bl	8000298 <__aeabi_dsub>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 f8f4 	bl	800029c <__adddf3>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 fbce 	bl	800085c <__aeabi_ddiv>
 80070c0:	f04f 0a00 	mov.w	sl, #0
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	4622      	mov	r2, r4
 80070ca:	462b      	mov	r3, r5
 80070cc:	4620      	mov	r0, r4
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 fa9a 	bl	8000608 <__aeabi_dmul>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4680      	mov	r8, r0
 80070da:	4689      	mov	r9, r1
 80070dc:	f7f9 fa94 	bl	8000608 <__aeabi_dmul>
 80070e0:	a371      	add	r3, pc, #452	@ (adr r3, 80072a8 <atan+0x2a8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	4606      	mov	r6, r0
 80070e8:	460f      	mov	r7, r1
 80070ea:	f7f9 fa8d 	bl	8000608 <__aeabi_dmul>
 80070ee:	a370      	add	r3, pc, #448	@ (adr r3, 80072b0 <atan+0x2b0>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f8d2 	bl	800029c <__adddf3>
 80070f8:	4632      	mov	r2, r6
 80070fa:	463b      	mov	r3, r7
 80070fc:	f7f9 fa84 	bl	8000608 <__aeabi_dmul>
 8007100:	a36d      	add	r3, pc, #436	@ (adr r3, 80072b8 <atan+0x2b8>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f8c9 	bl	800029c <__adddf3>
 800710a:	4632      	mov	r2, r6
 800710c:	463b      	mov	r3, r7
 800710e:	f7f9 fa7b 	bl	8000608 <__aeabi_dmul>
 8007112:	a36b      	add	r3, pc, #428	@ (adr r3, 80072c0 <atan+0x2c0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f8c0 	bl	800029c <__adddf3>
 800711c:	4632      	mov	r2, r6
 800711e:	463b      	mov	r3, r7
 8007120:	f7f9 fa72 	bl	8000608 <__aeabi_dmul>
 8007124:	a368      	add	r3, pc, #416	@ (adr r3, 80072c8 <atan+0x2c8>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f8b7 	bl	800029c <__adddf3>
 800712e:	4632      	mov	r2, r6
 8007130:	463b      	mov	r3, r7
 8007132:	f7f9 fa69 	bl	8000608 <__aeabi_dmul>
 8007136:	a366      	add	r3, pc, #408	@ (adr r3, 80072d0 <atan+0x2d0>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f7f9 f8ae 	bl	800029c <__adddf3>
 8007140:	4642      	mov	r2, r8
 8007142:	464b      	mov	r3, r9
 8007144:	f7f9 fa60 	bl	8000608 <__aeabi_dmul>
 8007148:	a363      	add	r3, pc, #396	@ (adr r3, 80072d8 <atan+0x2d8>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	4680      	mov	r8, r0
 8007150:	4689      	mov	r9, r1
 8007152:	4630      	mov	r0, r6
 8007154:	4639      	mov	r1, r7
 8007156:	f7f9 fa57 	bl	8000608 <__aeabi_dmul>
 800715a:	a361      	add	r3, pc, #388	@ (adr r3, 80072e0 <atan+0x2e0>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 f89a 	bl	8000298 <__aeabi_dsub>
 8007164:	4632      	mov	r2, r6
 8007166:	463b      	mov	r3, r7
 8007168:	f7f9 fa4e 	bl	8000608 <__aeabi_dmul>
 800716c:	a35e      	add	r3, pc, #376	@ (adr r3, 80072e8 <atan+0x2e8>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f891 	bl	8000298 <__aeabi_dsub>
 8007176:	4632      	mov	r2, r6
 8007178:	463b      	mov	r3, r7
 800717a:	f7f9 fa45 	bl	8000608 <__aeabi_dmul>
 800717e:	a35c      	add	r3, pc, #368	@ (adr r3, 80072f0 <atan+0x2f0>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 f888 	bl	8000298 <__aeabi_dsub>
 8007188:	4632      	mov	r2, r6
 800718a:	463b      	mov	r3, r7
 800718c:	f7f9 fa3c 	bl	8000608 <__aeabi_dmul>
 8007190:	a359      	add	r3, pc, #356	@ (adr r3, 80072f8 <atan+0x2f8>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 f87f 	bl	8000298 <__aeabi_dsub>
 800719a:	4632      	mov	r2, r6
 800719c:	463b      	mov	r3, r7
 800719e:	f7f9 fa33 	bl	8000608 <__aeabi_dmul>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	f7f9 f877 	bl	800029c <__adddf3>
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	f7f9 fa29 	bl	8000608 <__aeabi_dmul>
 80071b6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	d148      	bne.n	8007252 <atan+0x252>
 80071c0:	4620      	mov	r0, r4
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7f9 f868 	bl	8000298 <__aeabi_dsub>
 80071c8:	e72f      	b.n	800702a <atan+0x2a>
 80071ca:	4b52      	ldr	r3, [pc, #328]	@ (8007314 <atan+0x314>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 f861 	bl	8000298 <__aeabi_dsub>
 80071d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007314 <atan+0x314>)
 80071d8:	4606      	mov	r6, r0
 80071da:	460f      	mov	r7, r1
 80071dc:	2200      	movs	r2, #0
 80071de:	4620      	mov	r0, r4
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7f9 f85b 	bl	800029c <__adddf3>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f9 fb35 	bl	800085c <__aeabi_ddiv>
 80071f2:	f04f 0a01 	mov.w	sl, #1
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	e765      	b.n	80070c8 <atan+0xc8>
 80071fc:	4b47      	ldr	r3, [pc, #284]	@ (800731c <atan+0x31c>)
 80071fe:	429e      	cmp	r6, r3
 8007200:	d21c      	bcs.n	800723c <atan+0x23c>
 8007202:	4b47      	ldr	r3, [pc, #284]	@ (8007320 <atan+0x320>)
 8007204:	2200      	movs	r2, #0
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 f845 	bl	8000298 <__aeabi_dsub>
 800720e:	4b44      	ldr	r3, [pc, #272]	@ (8007320 <atan+0x320>)
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	2200      	movs	r2, #0
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 f9f5 	bl	8000608 <__aeabi_dmul>
 800721e:	4b3d      	ldr	r3, [pc, #244]	@ (8007314 <atan+0x314>)
 8007220:	2200      	movs	r2, #0
 8007222:	f7f9 f83b 	bl	800029c <__adddf3>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4630      	mov	r0, r6
 800722c:	4639      	mov	r1, r7
 800722e:	f7f9 fb15 	bl	800085c <__aeabi_ddiv>
 8007232:	f04f 0a02 	mov.w	sl, #2
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
 800723a:	e745      	b.n	80070c8 <atan+0xc8>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	4938      	ldr	r1, [pc, #224]	@ (8007324 <atan+0x324>)
 8007242:	2000      	movs	r0, #0
 8007244:	f7f9 fb0a 	bl	800085c <__aeabi_ddiv>
 8007248:	f04f 0a03 	mov.w	sl, #3
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	e73a      	b.n	80070c8 <atan+0xc8>
 8007252:	4b35      	ldr	r3, [pc, #212]	@ (8007328 <atan+0x328>)
 8007254:	4e35      	ldr	r6, [pc, #212]	@ (800732c <atan+0x32c>)
 8007256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f81b 	bl	8000298 <__aeabi_dsub>
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	f7f9 f817 	bl	8000298 <__aeabi_dsub>
 800726a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007276:	f7f9 f80f 	bl	8000298 <__aeabi_dsub>
 800727a:	f1bb 0f00 	cmp.w	fp, #0
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	f6bf aedc 	bge.w	800703e <atan+0x3e>
 8007286:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800728a:	461d      	mov	r5, r3
 800728c:	e6d7      	b.n	800703e <atan+0x3e>
 800728e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007300 <atan+0x300>)
 8007290:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007294:	e6d3      	b.n	800703e <atan+0x3e>
 8007296:	bf00      	nop
 8007298:	54442d18 	.word	0x54442d18
 800729c:	3ff921fb 	.word	0x3ff921fb
 80072a0:	8800759c 	.word	0x8800759c
 80072a4:	7e37e43c 	.word	0x7e37e43c
 80072a8:	e322da11 	.word	0xe322da11
 80072ac:	3f90ad3a 	.word	0x3f90ad3a
 80072b0:	24760deb 	.word	0x24760deb
 80072b4:	3fa97b4b 	.word	0x3fa97b4b
 80072b8:	a0d03d51 	.word	0xa0d03d51
 80072bc:	3fb10d66 	.word	0x3fb10d66
 80072c0:	c54c206e 	.word	0xc54c206e
 80072c4:	3fb745cd 	.word	0x3fb745cd
 80072c8:	920083ff 	.word	0x920083ff
 80072cc:	3fc24924 	.word	0x3fc24924
 80072d0:	5555550d 	.word	0x5555550d
 80072d4:	3fd55555 	.word	0x3fd55555
 80072d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80072dc:	bfa2b444 	.word	0xbfa2b444
 80072e0:	52defd9a 	.word	0x52defd9a
 80072e4:	3fadde2d 	.word	0x3fadde2d
 80072e8:	af749a6d 	.word	0xaf749a6d
 80072ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80072f0:	fe231671 	.word	0xfe231671
 80072f4:	3fbc71c6 	.word	0x3fbc71c6
 80072f8:	9998ebc4 	.word	0x9998ebc4
 80072fc:	3fc99999 	.word	0x3fc99999
 8007300:	54442d18 	.word	0x54442d18
 8007304:	bff921fb 	.word	0xbff921fb
 8007308:	440fffff 	.word	0x440fffff
 800730c:	7ff00000 	.word	0x7ff00000
 8007310:	3fdbffff 	.word	0x3fdbffff
 8007314:	3ff00000 	.word	0x3ff00000
 8007318:	3ff2ffff 	.word	0x3ff2ffff
 800731c:	40038000 	.word	0x40038000
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	bff00000 	.word	0xbff00000
 8007328:	08007a28 	.word	0x08007a28
 800732c:	08007a48 	.word	0x08007a48

08007330 <fabs>:
 8007330:	ec51 0b10 	vmov	r0, r1, d0
 8007334:	4602      	mov	r2, r0
 8007336:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800733a:	ec43 2b10 	vmov	d0, r2, r3
 800733e:	4770      	bx	lr

08007340 <__ieee754_sqrt>:
 8007340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	4a68      	ldr	r2, [pc, #416]	@ (80074e8 <__ieee754_sqrt+0x1a8>)
 8007346:	ec55 4b10 	vmov	r4, r5, d0
 800734a:	43aa      	bics	r2, r5
 800734c:	462b      	mov	r3, r5
 800734e:	4621      	mov	r1, r4
 8007350:	d110      	bne.n	8007374 <__ieee754_sqrt+0x34>
 8007352:	4622      	mov	r2, r4
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f9 f956 	bl	8000608 <__aeabi_dmul>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4620      	mov	r0, r4
 8007362:	4629      	mov	r1, r5
 8007364:	f7f8 ff9a 	bl	800029c <__adddf3>
 8007368:	4604      	mov	r4, r0
 800736a:	460d      	mov	r5, r1
 800736c:	ec45 4b10 	vmov	d0, r4, r5
 8007370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007374:	2d00      	cmp	r5, #0
 8007376:	dc0e      	bgt.n	8007396 <__ieee754_sqrt+0x56>
 8007378:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800737c:	4322      	orrs	r2, r4
 800737e:	d0f5      	beq.n	800736c <__ieee754_sqrt+0x2c>
 8007380:	b19d      	cbz	r5, 80073aa <__ieee754_sqrt+0x6a>
 8007382:	4622      	mov	r2, r4
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	f7f8 ff86 	bl	8000298 <__aeabi_dsub>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	f7f9 fa64 	bl	800085c <__aeabi_ddiv>
 8007394:	e7e8      	b.n	8007368 <__ieee754_sqrt+0x28>
 8007396:	152a      	asrs	r2, r5, #20
 8007398:	d115      	bne.n	80073c6 <__ieee754_sqrt+0x86>
 800739a:	2000      	movs	r0, #0
 800739c:	e009      	b.n	80073b2 <__ieee754_sqrt+0x72>
 800739e:	0acb      	lsrs	r3, r1, #11
 80073a0:	3a15      	subs	r2, #21
 80073a2:	0549      	lsls	r1, r1, #21
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0fa      	beq.n	800739e <__ieee754_sqrt+0x5e>
 80073a8:	e7f7      	b.n	800739a <__ieee754_sqrt+0x5a>
 80073aa:	462a      	mov	r2, r5
 80073ac:	e7fa      	b.n	80073a4 <__ieee754_sqrt+0x64>
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	3001      	adds	r0, #1
 80073b2:	02dc      	lsls	r4, r3, #11
 80073b4:	d5fb      	bpl.n	80073ae <__ieee754_sqrt+0x6e>
 80073b6:	1e44      	subs	r4, r0, #1
 80073b8:	1b12      	subs	r2, r2, r4
 80073ba:	f1c0 0420 	rsb	r4, r0, #32
 80073be:	fa21 f404 	lsr.w	r4, r1, r4
 80073c2:	4323      	orrs	r3, r4
 80073c4:	4081      	lsls	r1, r0
 80073c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80073ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073d2:	07d2      	lsls	r2, r2, #31
 80073d4:	bf5c      	itt	pl
 80073d6:	005b      	lslpl	r3, r3, #1
 80073d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80073dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073e0:	bf58      	it	pl
 80073e2:	0049      	lslpl	r1, r1, #1
 80073e4:	2600      	movs	r6, #0
 80073e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80073ea:	106d      	asrs	r5, r5, #1
 80073ec:	0049      	lsls	r1, r1, #1
 80073ee:	2016      	movs	r0, #22
 80073f0:	4632      	mov	r2, r6
 80073f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80073f6:	1917      	adds	r7, r2, r4
 80073f8:	429f      	cmp	r7, r3
 80073fa:	bfde      	ittt	le
 80073fc:	193a      	addle	r2, r7, r4
 80073fe:	1bdb      	suble	r3, r3, r7
 8007400:	1936      	addle	r6, r6, r4
 8007402:	0fcf      	lsrs	r7, r1, #31
 8007404:	3801      	subs	r0, #1
 8007406:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800740a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800740e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007412:	d1f0      	bne.n	80073f6 <__ieee754_sqrt+0xb6>
 8007414:	4604      	mov	r4, r0
 8007416:	2720      	movs	r7, #32
 8007418:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800741c:	429a      	cmp	r2, r3
 800741e:	eb00 0e0c 	add.w	lr, r0, ip
 8007422:	db02      	blt.n	800742a <__ieee754_sqrt+0xea>
 8007424:	d113      	bne.n	800744e <__ieee754_sqrt+0x10e>
 8007426:	458e      	cmp	lr, r1
 8007428:	d811      	bhi.n	800744e <__ieee754_sqrt+0x10e>
 800742a:	f1be 0f00 	cmp.w	lr, #0
 800742e:	eb0e 000c 	add.w	r0, lr, ip
 8007432:	da42      	bge.n	80074ba <__ieee754_sqrt+0x17a>
 8007434:	2800      	cmp	r0, #0
 8007436:	db40      	blt.n	80074ba <__ieee754_sqrt+0x17a>
 8007438:	f102 0801 	add.w	r8, r2, #1
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	458e      	cmp	lr, r1
 8007440:	bf88      	it	hi
 8007442:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007446:	eba1 010e 	sub.w	r1, r1, lr
 800744a:	4464      	add	r4, ip
 800744c:	4642      	mov	r2, r8
 800744e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007452:	3f01      	subs	r7, #1
 8007454:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007458:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800745c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007460:	d1dc      	bne.n	800741c <__ieee754_sqrt+0xdc>
 8007462:	4319      	orrs	r1, r3
 8007464:	d01b      	beq.n	800749e <__ieee754_sqrt+0x15e>
 8007466:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80074ec <__ieee754_sqrt+0x1ac>
 800746a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80074f0 <__ieee754_sqrt+0x1b0>
 800746e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007472:	e9db 2300 	ldrd	r2, r3, [fp]
 8007476:	f7f8 ff0f 	bl	8000298 <__aeabi_dsub>
 800747a:	e9da 8900 	ldrd	r8, r9, [sl]
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4640      	mov	r0, r8
 8007484:	4649      	mov	r1, r9
 8007486:	f7f9 fb3b 	bl	8000b00 <__aeabi_dcmple>
 800748a:	b140      	cbz	r0, 800749e <__ieee754_sqrt+0x15e>
 800748c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007490:	e9da 0100 	ldrd	r0, r1, [sl]
 8007494:	e9db 2300 	ldrd	r2, r3, [fp]
 8007498:	d111      	bne.n	80074be <__ieee754_sqrt+0x17e>
 800749a:	3601      	adds	r6, #1
 800749c:	463c      	mov	r4, r7
 800749e:	1072      	asrs	r2, r6, #1
 80074a0:	0863      	lsrs	r3, r4, #1
 80074a2:	07f1      	lsls	r1, r6, #31
 80074a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80074a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80074ac:	bf48      	it	mi
 80074ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80074b6:	4618      	mov	r0, r3
 80074b8:	e756      	b.n	8007368 <__ieee754_sqrt+0x28>
 80074ba:	4690      	mov	r8, r2
 80074bc:	e7be      	b.n	800743c <__ieee754_sqrt+0xfc>
 80074be:	f7f8 feed 	bl	800029c <__adddf3>
 80074c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f9 fb0d 	bl	8000aec <__aeabi_dcmplt>
 80074d2:	b120      	cbz	r0, 80074de <__ieee754_sqrt+0x19e>
 80074d4:	1ca0      	adds	r0, r4, #2
 80074d6:	bf08      	it	eq
 80074d8:	3601      	addeq	r6, #1
 80074da:	3402      	adds	r4, #2
 80074dc:	e7df      	b.n	800749e <__ieee754_sqrt+0x15e>
 80074de:	1c63      	adds	r3, r4, #1
 80074e0:	f023 0401 	bic.w	r4, r3, #1
 80074e4:	e7db      	b.n	800749e <__ieee754_sqrt+0x15e>
 80074e6:	bf00      	nop
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	200001e0 	.word	0x200001e0
 80074f0:	200001d8 	.word	0x200001d8
 80074f4:	00000000 	.word	0x00000000

080074f8 <__ieee754_atan2>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	ec57 6b11 	vmov	r6, r7, d1
 8007500:	4273      	negs	r3, r6
 8007502:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007680 <__ieee754_atan2+0x188>
 8007506:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800750a:	4333      	orrs	r3, r6
 800750c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007510:	4543      	cmp	r3, r8
 8007512:	ec51 0b10 	vmov	r0, r1, d0
 8007516:	4635      	mov	r5, r6
 8007518:	d809      	bhi.n	800752e <__ieee754_atan2+0x36>
 800751a:	4244      	negs	r4, r0
 800751c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007520:	4304      	orrs	r4, r0
 8007522:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007526:	4544      	cmp	r4, r8
 8007528:	468e      	mov	lr, r1
 800752a:	4681      	mov	r9, r0
 800752c:	d907      	bls.n	800753e <__ieee754_atan2+0x46>
 800752e:	4632      	mov	r2, r6
 8007530:	463b      	mov	r3, r7
 8007532:	f7f8 feb3 	bl	800029c <__adddf3>
 8007536:	ec41 0b10 	vmov	d0, r0, r1
 800753a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8007542:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8007546:	4334      	orrs	r4, r6
 8007548:	d103      	bne.n	8007552 <__ieee754_atan2+0x5a>
 800754a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754e:	f7ff bd57 	b.w	8007000 <atan>
 8007552:	17bc      	asrs	r4, r7, #30
 8007554:	f004 0402 	and.w	r4, r4, #2
 8007558:	ea53 0909 	orrs.w	r9, r3, r9
 800755c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007560:	d107      	bne.n	8007572 <__ieee754_atan2+0x7a>
 8007562:	2c02      	cmp	r4, #2
 8007564:	d05f      	beq.n	8007626 <__ieee754_atan2+0x12e>
 8007566:	2c03      	cmp	r4, #3
 8007568:	d1e5      	bne.n	8007536 <__ieee754_atan2+0x3e>
 800756a:	a141      	add	r1, pc, #260	@ (adr r1, 8007670 <__ieee754_atan2+0x178>)
 800756c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007570:	e7e1      	b.n	8007536 <__ieee754_atan2+0x3e>
 8007572:	4315      	orrs	r5, r2
 8007574:	d106      	bne.n	8007584 <__ieee754_atan2+0x8c>
 8007576:	f1be 0f00 	cmp.w	lr, #0
 800757a:	da5f      	bge.n	800763c <__ieee754_atan2+0x144>
 800757c:	a13e      	add	r1, pc, #248	@ (adr r1, 8007678 <__ieee754_atan2+0x180>)
 800757e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007582:	e7d8      	b.n	8007536 <__ieee754_atan2+0x3e>
 8007584:	4542      	cmp	r2, r8
 8007586:	d10f      	bne.n	80075a8 <__ieee754_atan2+0xb0>
 8007588:	4293      	cmp	r3, r2
 800758a:	f104 34ff 	add.w	r4, r4, #4294967295
 800758e:	d107      	bne.n	80075a0 <__ieee754_atan2+0xa8>
 8007590:	2c02      	cmp	r4, #2
 8007592:	d84c      	bhi.n	800762e <__ieee754_atan2+0x136>
 8007594:	4b34      	ldr	r3, [pc, #208]	@ (8007668 <__ieee754_atan2+0x170>)
 8007596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800759a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800759e:	e7ca      	b.n	8007536 <__ieee754_atan2+0x3e>
 80075a0:	2c02      	cmp	r4, #2
 80075a2:	d848      	bhi.n	8007636 <__ieee754_atan2+0x13e>
 80075a4:	4b31      	ldr	r3, [pc, #196]	@ (800766c <__ieee754_atan2+0x174>)
 80075a6:	e7f6      	b.n	8007596 <__ieee754_atan2+0x9e>
 80075a8:	4543      	cmp	r3, r8
 80075aa:	d0e4      	beq.n	8007576 <__ieee754_atan2+0x7e>
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80075b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075b6:	da1e      	bge.n	80075f6 <__ieee754_atan2+0xfe>
 80075b8:	2f00      	cmp	r7, #0
 80075ba:	da01      	bge.n	80075c0 <__ieee754_atan2+0xc8>
 80075bc:	323c      	adds	r2, #60	@ 0x3c
 80075be:	db1e      	blt.n	80075fe <__ieee754_atan2+0x106>
 80075c0:	4632      	mov	r2, r6
 80075c2:	463b      	mov	r3, r7
 80075c4:	f7f9 f94a 	bl	800085c <__aeabi_ddiv>
 80075c8:	ec41 0b10 	vmov	d0, r0, r1
 80075cc:	f7ff feb0 	bl	8007330 <fabs>
 80075d0:	f7ff fd16 	bl	8007000 <atan>
 80075d4:	ec51 0b10 	vmov	r0, r1, d0
 80075d8:	2c01      	cmp	r4, #1
 80075da:	d013      	beq.n	8007604 <__ieee754_atan2+0x10c>
 80075dc:	2c02      	cmp	r4, #2
 80075de:	d015      	beq.n	800760c <__ieee754_atan2+0x114>
 80075e0:	2c00      	cmp	r4, #0
 80075e2:	d0a8      	beq.n	8007536 <__ieee754_atan2+0x3e>
 80075e4:	a318      	add	r3, pc, #96	@ (adr r3, 8007648 <__ieee754_atan2+0x150>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 fe55 	bl	8000298 <__aeabi_dsub>
 80075ee:	a318      	add	r3, pc, #96	@ (adr r3, 8007650 <__ieee754_atan2+0x158>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	e014      	b.n	8007620 <__ieee754_atan2+0x128>
 80075f6:	a118      	add	r1, pc, #96	@ (adr r1, 8007658 <__ieee754_atan2+0x160>)
 80075f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075fc:	e7ec      	b.n	80075d8 <__ieee754_atan2+0xe0>
 80075fe:	2000      	movs	r0, #0
 8007600:	2100      	movs	r1, #0
 8007602:	e7e9      	b.n	80075d8 <__ieee754_atan2+0xe0>
 8007604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007608:	4619      	mov	r1, r3
 800760a:	e794      	b.n	8007536 <__ieee754_atan2+0x3e>
 800760c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007648 <__ieee754_atan2+0x150>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f7f8 fe41 	bl	8000298 <__aeabi_dsub>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	a10d      	add	r1, pc, #52	@ (adr r1, 8007650 <__ieee754_atan2+0x158>)
 800761c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	e787      	b.n	8007536 <__ieee754_atan2+0x3e>
 8007626:	a10a      	add	r1, pc, #40	@ (adr r1, 8007650 <__ieee754_atan2+0x158>)
 8007628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800762c:	e783      	b.n	8007536 <__ieee754_atan2+0x3e>
 800762e:	a10c      	add	r1, pc, #48	@ (adr r1, 8007660 <__ieee754_atan2+0x168>)
 8007630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007634:	e77f      	b.n	8007536 <__ieee754_atan2+0x3e>
 8007636:	2000      	movs	r0, #0
 8007638:	2100      	movs	r1, #0
 800763a:	e77c      	b.n	8007536 <__ieee754_atan2+0x3e>
 800763c:	a106      	add	r1, pc, #24	@ (adr r1, 8007658 <__ieee754_atan2+0x160>)
 800763e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007642:	e778      	b.n	8007536 <__ieee754_atan2+0x3e>
 8007644:	f3af 8000 	nop.w
 8007648:	33145c07 	.word	0x33145c07
 800764c:	3ca1a626 	.word	0x3ca1a626
 8007650:	54442d18 	.word	0x54442d18
 8007654:	400921fb 	.word	0x400921fb
 8007658:	54442d18 	.word	0x54442d18
 800765c:	3ff921fb 	.word	0x3ff921fb
 8007660:	54442d18 	.word	0x54442d18
 8007664:	3fe921fb 	.word	0x3fe921fb
 8007668:	08007a80 	.word	0x08007a80
 800766c:	08007a68 	.word	0x08007a68
 8007670:	54442d18 	.word	0x54442d18
 8007674:	c00921fb 	.word	0xc00921fb
 8007678:	54442d18 	.word	0x54442d18
 800767c:	bff921fb 	.word	0xbff921fb
 8007680:	7ff00000 	.word	0x7ff00000

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
